
robosoccer-stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800629c  0800629c  0000729c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080062d4  080062d4  000072d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080062dc  080062dc  000072dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080062e0  080062e0  000072e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080062e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080062f4  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006354  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  240000d0  080063b4  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000370  080063b4  00008370  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b09  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002453  00000000  00000000  0001ec07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f30  00000000  00000000  00021060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be2  00000000  00000000  00021f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032790  00000000  00000000  00022b72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001416a  00000000  00000000  00055302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00146497  00000000  00000000  0006946c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001af903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004084  00000000  00000000  001af948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  001b39cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006284 	.word	0x08006284

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08006284 	.word	0x08006284

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fe1e 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f810 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f9de 	bl	80009c8 <MX_GPIO_Init>
  MX_ETH_Init();
 800060c:	f000 f87c 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f986 	bl	8000920 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 f9d0 	bl	80009b8 <MX_USB_OTG_HS_USB_Init>
  MX_I2C1_Init();
 8000618:	f000 f8c2 	bl	80007a0 <MX_I2C1_Init>
  MX_I2C2_Init();
 800061c:	f000 f900 	bl	8000820 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000620:	f000 f93e 	bl	80008a0 <MX_I2C4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <main+0x28>

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b09c      	sub	sp, #112	@ 0x70
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000632:	224c      	movs	r2, #76	@ 0x4c
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 fdf8 	bl	800622c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2220      	movs	r2, #32
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f005 fdf2 	bl	800622c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000648:	2002      	movs	r0, #2
 800064a:	f001 fead 	bl	80023a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	4b2c      	ldr	r3, [pc, #176]	@ (8000704 <SystemClock_Config+0xdc>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	4a2b      	ldr	r2, [pc, #172]	@ (8000704 <SystemClock_Config+0xdc>)
 8000658:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800065c:	6193      	str	r3, [r2, #24]
 800065e:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <SystemClock_Config+0xdc>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800066a:	bf00      	nop
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xdc>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000678:	d1f8      	bne.n	800066c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800067a:	2321      	movs	r3, #33	@ 0x21
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000682:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000690:	2304      	movs	r3, #4
 8000692:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000694:	f240 1313 	movw	r3, #275	@ 0x113
 8000698:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069e:	2304      	movs	r3, #4
 80006a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006a6:	2304      	movs	r3, #4
 80006a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 feb0 	bl	800241c <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006c2:	f000 fa8b 	bl	8000bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	233f      	movs	r3, #63	@ 0x3f
 80006c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006d2:	2308      	movs	r3, #8
 80006d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006d6:	2340      	movs	r3, #64	@ 0x40
 80006d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006da:	2340      	movs	r3, #64	@ 0x40
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006e4:	2340      	movs	r3, #64	@ 0x40
 80006e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2103      	movs	r1, #3
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 fa6f 	bl	8002bd0 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f8:	f000 fa70 	bl	8000bdc <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3770      	adds	r7, #112	@ 0x70
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58024800 	.word	0x58024800

08000708 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_ETH_Init+0x80>)
 800070e:	4a1f      	ldr	r2, [pc, #124]	@ (800078c <MX_ETH_Init+0x84>)
 8000710:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000712:	4b1f      	ldr	r3, [pc, #124]	@ (8000790 <MX_ETH_Init+0x88>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000718:	4b1d      	ldr	r3, [pc, #116]	@ (8000790 <MX_ETH_Init+0x88>)
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071e:	4b1c      	ldr	r3, [pc, #112]	@ (8000790 <MX_ETH_Init+0x88>)
 8000720:	22e1      	movs	r2, #225	@ 0xe1
 8000722:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000724:	4b1a      	ldr	r3, [pc, #104]	@ (8000790 <MX_ETH_Init+0x88>)
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072a:	4b19      	ldr	r3, [pc, #100]	@ (8000790 <MX_ETH_Init+0x88>)
 800072c:	2200      	movs	r2, #0
 800072e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000730:	4b17      	ldr	r3, [pc, #92]	@ (8000790 <MX_ETH_Init+0x88>)
 8000732:	2200      	movs	r2, #0
 8000734:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_ETH_Init+0x80>)
 8000738:	4a15      	ldr	r2, [pc, #84]	@ (8000790 <MX_ETH_Init+0x88>)
 800073a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_ETH_Init+0x80>)
 800073e:	2201      	movs	r2, #1
 8000740:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_ETH_Init+0x80>)
 8000744:	4a13      	ldr	r2, [pc, #76]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000746:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_ETH_Init+0x80>)
 800074a:	4a13      	ldr	r2, [pc, #76]	@ (8000798 <MX_ETH_Init+0x90>)
 800074c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800074e:	4b0e      	ldr	r3, [pc, #56]	@ (8000788 <MX_ETH_Init+0x80>)
 8000750:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000754:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000756:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_ETH_Init+0x80>)
 8000758:	f000 fefc 	bl	8001554 <HAL_ETH_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000762:	f000 fa3b 	bl	8000bdc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000766:	2238      	movs	r2, #56	@ 0x38
 8000768:	2100      	movs	r1, #0
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <MX_ETH_Init+0x94>)
 800076c:	f005 fd5e 	bl	800622c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000770:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <MX_ETH_Init+0x94>)
 8000772:	2221      	movs	r2, #33	@ 0x21
 8000774:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000776:	4b09      	ldr	r3, [pc, #36]	@ (800079c <MX_ETH_Init+0x94>)
 8000778:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800077c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800077e:	4b07      	ldr	r3, [pc, #28]	@ (800079c <MX_ETH_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	24000124 	.word	0x24000124
 800078c:	40028000 	.word	0x40028000
 8000790:	24000364 	.word	0x24000364
 8000794:	24000070 	.word	0x24000070
 8000798:	24000010 	.word	0x24000010
 800079c:	240000ec 	.word	0x240000ec

080007a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000818 <MX_I2C1_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <MX_I2C1_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007da:	480e      	ldr	r0, [pc, #56]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007dc:	f001 fcb0 	bl	8002140 <HAL_I2C_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f000 f9f9 	bl	8000bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <MX_I2C1_Init+0x74>)
 80007ee:	f001 fd43 	bl	8002278 <HAL_I2CEx_ConfigAnalogFilter>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 f9f0 	bl	8000bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_I2C1_Init+0x74>)
 8000800:	f001 fd85 	bl	800230e <HAL_I2CEx_ConfigDigitalFilter>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 f9e7 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	240001d4 	.word	0x240001d4
 8000818:	40005400 	.word	0x40005400
 800081c:	60404e72 	.word	0x60404e72

08000820 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000824:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000826:	4a1c      	ldr	r2, [pc, #112]	@ (8000898 <MX_I2C2_Init+0x78>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_I2C2_Init+0x74>)
 800082c:	4a1b      	ldr	r2, [pc, #108]	@ (800089c <MX_I2C2_Init+0x7c>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_I2C2_Init+0x74>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000844:	2200      	movs	r2, #0
 8000846:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000848:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_I2C2_Init+0x74>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000850:	2200      	movs	r2, #0
 8000852:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800085a:	480e      	ldr	r0, [pc, #56]	@ (8000894 <MX_I2C2_Init+0x74>)
 800085c:	f001 fc70 	bl	8002140 <HAL_I2C_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000866:	f000 f9b9 	bl	8000bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086a:	2100      	movs	r1, #0
 800086c:	4809      	ldr	r0, [pc, #36]	@ (8000894 <MX_I2C2_Init+0x74>)
 800086e:	f001 fd03 	bl	8002278 <HAL_I2CEx_ConfigAnalogFilter>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000878:	f000 f9b0 	bl	8000bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800087c:	2100      	movs	r1, #0
 800087e:	4805      	ldr	r0, [pc, #20]	@ (8000894 <MX_I2C2_Init+0x74>)
 8000880:	f001 fd45 	bl	800230e <HAL_I2CEx_ConfigDigitalFilter>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800088a:	f000 f9a7 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000228 	.word	0x24000228
 8000898:	40005800 	.word	0x40005800
 800089c:	60404e72 	.word	0x60404e72

080008a0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_I2C4_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	@ (800091c <MX_I2C4_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008dc:	f001 fc30 	bl	8002140 <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f979 	bl	8000bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	@ (8000914 <MX_I2C4_Init+0x74>)
 80008ee:	f001 fcc3 	bl	8002278 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f970 	bl	8000bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_I2C4_Init+0x74>)
 8000900:	f001 fd05 	bl	800230e <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f967 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2400027c 	.word	0x2400027c
 8000918:	58001c00 	.word	0x58001c00
 800091c:	60404e72 	.word	0x60404e72

08000920 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000924:	4b22      	ldr	r3, [pc, #136]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000926:	4a23      	ldr	r2, [pc, #140]	@ (80009b4 <MX_USART3_UART_Init+0x94>)
 8000928:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800092a:	4b21      	ldr	r3, [pc, #132]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800092c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000930:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b1f      	ldr	r3, [pc, #124]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b1d      	ldr	r3, [pc, #116]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b1a      	ldr	r3, [pc, #104]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b19      	ldr	r3, [pc, #100]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b17      	ldr	r3, [pc, #92]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000956:	4b16      	ldr	r3, [pc, #88]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800095c:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000962:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000968:	4811      	ldr	r0, [pc, #68]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800096a:	f004 fa7f 	bl	8004e6c <HAL_UART_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000974:	f000 f932 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	480d      	ldr	r0, [pc, #52]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800097c:	f005 fb8b 	bl	8006096 <HAL_UARTEx_SetTxFifoThreshold>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000986:	f000 f929 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4808      	ldr	r0, [pc, #32]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800098e:	f005 fbc0 	bl	8006112 <HAL_UARTEx_SetRxFifoThreshold>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000998:	f000 f920 	bl	8000bdc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	@ (80009b0 <MX_USART3_UART_Init+0x90>)
 800099e:	f005 fb41 	bl	8006024 <HAL_UARTEx_DisableFifoMode>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009a8:	f000 f918 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	240002d0 	.word	0x240002d0
 80009b4:	40004800 	.word	0x40004800

080009b8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009de:	4b78      	ldr	r3, [pc, #480]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a76      	ldr	r2, [pc, #472]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b74      	ldr	r3, [pc, #464]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	623b      	str	r3, [r7, #32]
 80009fa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fc:	4b70      	ldr	r3, [pc, #448]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 80009fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a02:	4a6f      	ldr	r2, [pc, #444]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a04:	f043 0320 	orr.w	r3, r3, #32
 8000a08:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a0c:	4b6c      	ldr	r3, [pc, #432]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a12:	f003 0320 	and.w	r3, r3, #32
 8000a16:	61fb      	str	r3, [r7, #28]
 8000a18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1a:	4b69      	ldr	r3, [pc, #420]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a20:	4a67      	ldr	r2, [pc, #412]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a2a:	4b65      	ldr	r3, [pc, #404]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a34:	61bb      	str	r3, [r7, #24]
 8000a36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b61      	ldr	r3, [pc, #388]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3e:	4a60      	ldr	r2, [pc, #384]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a48:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a56:	4b5a      	ldr	r3, [pc, #360]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	4a58      	ldr	r2, [pc, #352]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a5e:	f043 0302 	orr.w	r3, r3, #2
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a66:	4b56      	ldr	r3, [pc, #344]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a74:	4b52      	ldr	r3, [pc, #328]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a51      	ldr	r2, [pc, #324]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a7c:	f043 0308 	orr.w	r3, r3, #8
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b4e      	ldr	r3, [pc, #312]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a92:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a98:	4a49      	ldr	r2, [pc, #292]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000a9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa2:	4b47      	ldr	r3, [pc, #284]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ab0:	4b43      	ldr	r3, [pc, #268]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	4a42      	ldr	r2, [pc, #264]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000ab8:	f043 0310 	orr.w	r3, r3, #16
 8000abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac0:	4b3f      	ldr	r3, [pc, #252]	@ (8000bc0 <MX_GPIO_Init+0x1f8>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ad4:	483b      	ldr	r0, [pc, #236]	@ (8000bc4 <MX_GPIO_Init+0x1fc>)
 8000ad6:	f001 fb19 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ae0:	4839      	ldr	r0, [pc, #228]	@ (8000bc8 <MX_GPIO_Init+0x200>)
 8000ae2:	f001 fb13 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2102      	movs	r1, #2
 8000aea:	4838      	ldr	r0, [pc, #224]	@ (8000bcc <MX_GPIO_Init+0x204>)
 8000aec:	f001 fb0e 	bl	800210c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b02:	4619      	mov	r1, r3
 8000b04:	4832      	ldr	r0, [pc, #200]	@ (8000bd0 <MX_GPIO_Init+0x208>)
 8000b06:	f001 f959 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b0a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b20:	4619      	mov	r1, r3
 8000b22:	4828      	ldr	r0, [pc, #160]	@ (8000bc4 <MX_GPIO_Init+0x1fc>)
 8000b24:	f001 f94a 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000b28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4821      	ldr	r0, [pc, #132]	@ (8000bc8 <MX_GPIO_Init+0x200>)
 8000b42:	f001 f93b 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000b46:	2380      	movs	r3, #128	@ 0x80
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481e      	ldr	r0, [pc, #120]	@ (8000bd4 <MX_GPIO_Init+0x20c>)
 8000b5c:	f001 f92e 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000b60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b72:	4619      	mov	r1, r3
 8000b74:	4818      	ldr	r0, [pc, #96]	@ (8000bd8 <MX_GPIO_Init+0x210>)
 8000b76:	f001 f921 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000b8c:	230a      	movs	r3, #10
 8000b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b94:	4619      	mov	r1, r3
 8000b96:	4810      	ldr	r0, [pc, #64]	@ (8000bd8 <MX_GPIO_Init+0x210>)
 8000b98:	f001 f910 	bl	8001dbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <MX_GPIO_Init+0x204>)
 8000bb4:	f001 f902 	bl	8001dbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	bf00      	nop
 8000bba:	3738      	adds	r7, #56	@ 0x38
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	58024400 	.word	0x58024400
 8000bc4:	58020400 	.word	0x58020400
 8000bc8:	58020c00 	.word	0x58020c00
 8000bcc:	58021000 	.word	0x58021000
 8000bd0:	58020800 	.word	0x58020800
 8000bd4:	58021800 	.word	0x58021800
 8000bd8:	58020000 	.word	0x58020000

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <Error_Handler+0x8>

08000be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <HAL_MspInit+0x30>)
 8000bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf4:	4a08      	ldr	r2, [pc, #32]	@ (8000c18 <HAL_MspInit+0x30>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	58024400 	.word	0x58024400

08000c1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	@ 0x38
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a59      	ldr	r2, [pc, #356]	@ (8000da0 <HAL_ETH_MspInit+0x184>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	f040 80ab 	bne.w	8000d96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c40:	4b58      	ldr	r3, [pc, #352]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c46:	4a57      	ldr	r2, [pc, #348]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c4c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c50:	4b54      	ldr	r3, [pc, #336]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c5a:	623b      	str	r3, [r7, #32]
 8000c5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c64:	4a4f      	ldr	r2, [pc, #316]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c78:	61fb      	str	r3, [r7, #28]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000c7c:	4b49      	ldr	r3, [pc, #292]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c82:	4a48      	ldr	r2, [pc, #288]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c8c:	4b45      	ldr	r3, [pc, #276]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b42      	ldr	r3, [pc, #264]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a40      	ldr	r2, [pc, #256]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b3e      	ldr	r3, [pc, #248]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a39      	ldr	r2, [pc, #228]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b36      	ldr	r3, [pc, #216]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b33      	ldr	r3, [pc, #204]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	4a31      	ldr	r2, [pc, #196]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cf4:	4b2b      	ldr	r3, [pc, #172]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d04:	4b27      	ldr	r3, [pc, #156]	@ (8000da4 <HAL_ETH_MspInit+0x188>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d12:	2332      	movs	r3, #50	@ 0x32
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d22:	230b      	movs	r3, #11
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481e      	ldr	r0, [pc, #120]	@ (8000da8 <HAL_ETH_MspInit+0x18c>)
 8000d2e:	f001 f845 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d32:	2386      	movs	r3, #134	@ 0x86
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d42:	230b      	movs	r3, #11
 8000d44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4817      	ldr	r0, [pc, #92]	@ (8000dac <HAL_ETH_MspInit+0x190>)
 8000d4e:	f001 f835 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d64:	230b      	movs	r3, #11
 8000d66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4810      	ldr	r0, [pc, #64]	@ (8000db0 <HAL_ETH_MspInit+0x194>)
 8000d70:	f001 f824 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d74:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d86:	230b      	movs	r3, #11
 8000d88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4808      	ldr	r0, [pc, #32]	@ (8000db4 <HAL_ETH_MspInit+0x198>)
 8000d92:	f001 f813 	bl	8001dbc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	@ 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40028000 	.word	0x40028000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020800 	.word	0x58020800
 8000dac:	58020000 	.word	0x58020000
 8000db0:	58020400 	.word	0x58020400
 8000db4:	58021800 	.word	0x58021800

08000db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b0bc      	sub	sp, #240	@ 0xf0
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	22b8      	movs	r2, #184	@ 0xb8
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 fa27 	bl	800622c <memset>
  if(hi2c->Instance==I2C1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a73      	ldr	r2, [pc, #460]	@ (8000fb0 <HAL_I2C_MspInit+0x1f8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d146      	bne.n	8000e76 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000de8:	f04f 0208 	mov.w	r2, #8
 8000dec:	f04f 0300 	mov.w	r3, #0
 8000df0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f002 fa72 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000e0a:	f7ff fee7 	bl	8000bdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b69      	ldr	r3, [pc, #420]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e14:	4a67      	ldr	r2, [pc, #412]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1e:	4b65      	ldr	r3, [pc, #404]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2c:	23c0      	movs	r3, #192	@ 0xc0
 8000e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e32:	2312      	movs	r3, #18
 8000e34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e44:	2304      	movs	r3, #4
 8000e46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4859      	ldr	r0, [pc, #356]	@ (8000fb8 <HAL_I2C_MspInit+0x200>)
 8000e52:	f000 ffb3 	bl	8001dbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e56:	4b57      	ldr	r3, [pc, #348]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e5c:	4a55      	ldr	r2, [pc, #340]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000e5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e66:	4b53      	ldr	r3, [pc, #332]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e70:	61bb      	str	r3, [r7, #24]
 8000e72:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000e74:	e097      	b.n	8000fa6 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a50      	ldr	r2, [pc, #320]	@ (8000fbc <HAL_I2C_MspInit+0x204>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d146      	bne.n	8000f0e <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e80:	f04f 0208 	mov.w	r2, #8
 8000e84:	f04f 0300 	mov.w	r3, #0
 8000e88:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fa26 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000ea2:	f7ff fe9b 	bl	8000bdc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea6:	4b43      	ldr	r3, [pc, #268]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	4a41      	ldr	r2, [pc, #260]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000eae:	f043 0320 	orr.w	r3, r3, #32
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	f003 0320 	and.w	r3, r3, #32
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eca:	2312      	movs	r3, #18
 8000ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ee2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4835      	ldr	r0, [pc, #212]	@ (8000fc0 <HAL_I2C_MspInit+0x208>)
 8000eea:	f000 ff67 	bl	8001dbc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eee:	4b31      	ldr	r3, [pc, #196]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ef4:	4a2f      	ldr	r2, [pc, #188]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000ef6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000efa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000efe:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	693b      	ldr	r3, [r7, #16]
}
 8000f0c:	e04b      	b.n	8000fa6 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C4)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc4 <HAL_I2C_MspInit+0x20c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d146      	bne.n	8000fa6 <HAL_I2C_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000f18:	f04f 0210 	mov.w	r2, #16
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 f9da 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2C_MspInit+0x186>
      Error_Handler();
 8000f3a:	f7ff fe4f 	bl	8000bdc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f44:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f4e:	4b19      	ldr	r3, [pc, #100]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f54:	f003 0320 	and.w	r3, r3, #32
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f5c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000f60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f76:	2304      	movs	r3, #4
 8000f78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f80:	4619      	mov	r1, r3
 8000f82:	480f      	ldr	r0, [pc, #60]	@ (8000fc0 <HAL_I2C_MspInit+0x208>)
 8000f84:	f000 ff1a 	bl	8001dbc <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f88:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f8e:	4a09      	ldr	r2, [pc, #36]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000f90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_I2C_MspInit+0x1fc>)
 8000f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
}
 8000fa6:	bf00      	nop
 8000fa8:	37f0      	adds	r7, #240	@ 0xf0
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	58020400 	.word	0x58020400
 8000fbc:	40005800 	.word	0x40005800
 8000fc0:	58021400 	.word	0x58021400
 8000fc4:	58001c00 	.word	0x58001c00

08000fc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0b8      	sub	sp, #224	@ 0xe0
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	22b8      	movs	r2, #184	@ 0xb8
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 f91f 	bl	800622c <memset>
  if(huart->Instance==USART3)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a27      	ldr	r2, [pc, #156]	@ (8001090 <HAL_UART_MspInit+0xc8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d146      	bne.n	8001086 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ff8:	f04f 0202 	mov.w	r2, #2
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001004:	2300      	movs	r3, #0
 8001006:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f002 f96a 	bl	80032e8 <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800101a:	f7ff fddf 	bl	8000bdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800101e:	4b1d      	ldr	r3, [pc, #116]	@ (8001094 <HAL_UART_MspInit+0xcc>)
 8001020:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001024:	4a1b      	ldr	r2, [pc, #108]	@ (8001094 <HAL_UART_MspInit+0xcc>)
 8001026:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800102a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800102e:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_UART_MspInit+0xcc>)
 8001030:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001034:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_UART_MspInit+0xcc>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001042:	4a14      	ldr	r2, [pc, #80]	@ (8001094 <HAL_UART_MspInit+0xcc>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <HAL_UART_MspInit+0xcc>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800105a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800105e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001074:	2307      	movs	r3, #7
 8001076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800107a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	@ (8001098 <HAL_UART_MspInit+0xd0>)
 8001082:	f000 fe9b 	bl	8001dbc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001086:	bf00      	nop
 8001088:	37e0      	adds	r7, #224	@ 0xe0
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004800 	.word	0x40004800
 8001094:	58024400 	.word	0x58024400
 8001098:	58020c00 	.word	0x58020c00

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <NMI_Handler+0x4>

080010a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <HardFault_Handler+0x4>

080010ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <MemManage_Handler+0x4>

080010b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f2:	f000 f917 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001100:	4b32      	ldr	r3, [pc, #200]	@ (80011cc <SystemInit+0xd0>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001106:	4a31      	ldr	r2, [pc, #196]	@ (80011cc <SystemInit+0xd0>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001110:	4b2f      	ldr	r3, [pc, #188]	@ (80011d0 <SystemInit+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 030f 	and.w	r3, r3, #15
 8001118:	2b06      	cmp	r3, #6
 800111a:	d807      	bhi.n	800112c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800111c:	4b2c      	ldr	r3, [pc, #176]	@ (80011d0 <SystemInit+0xd4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f023 030f 	bic.w	r3, r3, #15
 8001124:	4a2a      	ldr	r2, [pc, #168]	@ (80011d0 <SystemInit+0xd4>)
 8001126:	f043 0307 	orr.w	r3, r3, #7
 800112a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800112c:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <SystemInit+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a28      	ldr	r2, [pc, #160]	@ (80011d4 <SystemInit+0xd8>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001138:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <SystemInit+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800113e:	4b25      	ldr	r3, [pc, #148]	@ (80011d4 <SystemInit+0xd8>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	4924      	ldr	r1, [pc, #144]	@ (80011d4 <SystemInit+0xd8>)
 8001144:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <SystemInit+0xdc>)
 8001146:	4013      	ands	r3, r2
 8001148:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800114a:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <SystemInit+0xd4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001156:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <SystemInit+0xd4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f023 030f 	bic.w	r3, r3, #15
 800115e:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <SystemInit+0xd4>)
 8001160:	f043 0307 	orr.w	r3, r3, #7
 8001164:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001166:	4b1b      	ldr	r3, [pc, #108]	@ (80011d4 <SystemInit+0xd8>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800116c:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <SystemInit+0xd8>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001172:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <SystemInit+0xd8>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001178:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <SystemInit+0xd8>)
 800117a:	4a18      	ldr	r2, [pc, #96]	@ (80011dc <SystemInit+0xe0>)
 800117c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <SystemInit+0xd8>)
 8001180:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <SystemInit+0xe4>)
 8001182:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <SystemInit+0xd8>)
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <SystemInit+0xe8>)
 8001188:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800118a:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <SystemInit+0xd8>)
 800118c:	2200      	movs	r2, #0
 800118e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <SystemInit+0xd8>)
 8001192:	4a14      	ldr	r2, [pc, #80]	@ (80011e4 <SystemInit+0xe8>)
 8001194:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <SystemInit+0xd8>)
 8001198:	2200      	movs	r2, #0
 800119a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800119c:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <SystemInit+0xd8>)
 800119e:	4a11      	ldr	r2, [pc, #68]	@ (80011e4 <SystemInit+0xe8>)
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011a2:	4b0c      	ldr	r3, [pc, #48]	@ (80011d4 <SystemInit+0xd8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <SystemInit+0xd8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <SystemInit+0xd8>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <SystemInit+0xd8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <SystemInit+0xec>)
 80011bc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00
 80011d0:	52002000 	.word	0x52002000
 80011d4:	58024400 	.word	0x58024400
 80011d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80011dc:	02020200 	.word	0x02020200
 80011e0:	01ff0000 	.word	0x01ff0000
 80011e4:	01010280 	.word	0x01010280
 80011e8:	52004000 	.word	0x52004000

080011ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011f0:	f7ff ff84 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopFillZerobss+0x22>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f005 f80f 	bl	800623c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800121e:	f7ff f9ed 	bl	80005fc <main>
  bx  lr
 8001222:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001224:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001228:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800122c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001230:	080062e4 	.word	0x080062e4
  ldr r2, =_sbss
 8001234:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001238:	24000370 	.word	0x24000370

0800123c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC3_IRQHandler>
	...

08001240 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001246:	2003      	movs	r0, #3
 8001248:	f000 f952 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800124c:	f001 fe76 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8001250:	4602      	mov	r2, r0
 8001252:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <HAL_Init+0x68>)
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	4913      	ldr	r1, [pc, #76]	@ (80012ac <HAL_Init+0x6c>)
 800125e:	5ccb      	ldrb	r3, [r1, r3]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
 8001268:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800126a:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <HAL_Init+0x68>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 030f 	and.w	r3, r3, #15
 8001272:	4a0e      	ldr	r2, [pc, #56]	@ (80012ac <HAL_Init+0x6c>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	fa22 f303 	lsr.w	r3, r2, r3
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_Init+0x70>)
 8001282:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <HAL_Init+0x74>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f814 	bl	80012b8 <HAL_InitTick>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e002      	b.n	80012a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800129a:	f7ff fca5 	bl	8000be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58024400 	.word	0x58024400
 80012ac:	0800629c 	.word	0x0800629c
 80012b0:	24000004 	.word	0x24000004
 80012b4:	24000000 	.word	0x24000000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_InitTick+0x60>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e021      	b.n	8001310 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <HAL_InitTick+0x64>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_InitTick+0x60>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f929 	bl	800153a <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001300:	f000 f901 	bl	8001506 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	@ (8001320 <HAL_InitTick+0x68>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2400000c 	.word	0x2400000c
 800131c:	24000000 	.word	0x24000000
 8001320:	24000008 	.word	0x24000008

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	2400000c 	.word	0x2400000c
 8001348:	2400036c 	.word	0x2400036c

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	2400036c 	.word	0x2400036c

08001364 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800136c:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001374:	4904      	ldr	r1, [pc, #16]	@ (8001388 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58000400 	.word	0x58000400

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0b      	ldr	r3, [pc, #44]	@ (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <__NVIC_SetPriorityGrouping+0x40>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	05fa0000 	.word	0x05fa0000

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014bc:	d301      	bcc.n	80014c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014be:	2301      	movs	r3, #1
 80014c0:	e00f      	b.n	80014e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c2:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <SysTick_Config+0x40>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ca:	210f      	movs	r1, #15
 80014cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014d0:	f7ff ff8e 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SysTick_Config+0x40>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014da:	4b04      	ldr	r3, [pc, #16]	@ (80014ec <SysTick_Config+0x40>)
 80014dc:	2207      	movs	r2, #7
 80014de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	e000e010 	.word	0xe000e010

080014f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff ff47 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b086      	sub	sp, #24
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff5e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff90 	bl	8001444 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5f 	bl	80013f0 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffb2 	bl	80014ac <SysTick_Config>
 8001548:	4603      	mov	r3, r0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e0e3      	b.n	800172e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800156c:	2b00      	cmp	r3, #0
 800156e:	d106      	bne.n	800157e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2223      	movs	r2, #35	@ 0x23
 8001574:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fb4f 	bl	8000c1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b6e      	ldr	r3, [pc, #440]	@ (8001738 <HAL_ETH_Init+0x1e4>)
 8001580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001584:	4a6c      	ldr	r2, [pc, #432]	@ (8001738 <HAL_ETH_Init+0x1e4>)
 8001586:	f043 0302 	orr.w	r3, r3, #2
 800158a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800158e:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <HAL_ETH_Init+0x1e4>)
 8001590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7a1b      	ldrb	r3, [r3, #8]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d103      	bne.n	80015ac <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fedd 	bl	8001364 <HAL_SYSCFG_ETHInterfaceSelect>
 80015aa:	e003      	b.n	80015b4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015ac:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80015b0:	f7ff fed8 	bl	8001364 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015b4:	4b61      	ldr	r3, [pc, #388]	@ (800173c <HAL_ETH_Init+0x1e8>)
 80015b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015d0:	f7ff febc 	bl	800134c <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015d6:	e011      	b.n	80015fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80015d8:	f7ff feb8 	bl	800134c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80015e6:	d909      	bls.n	80015fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	22e0      	movs	r2, #224	@ 0xe0
 80015f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e098      	b.n	800172e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1e4      	bne.n	80015d8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f89e 	bl	8001750 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001614:	f001 fe0c 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8001618:	4603      	mov	r3, r0
 800161a:	4a49      	ldr	r2, [pc, #292]	@ (8001740 <HAL_ETH_Init+0x1ec>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3a01      	subs	r2, #1
 8001628:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f000 fa81 	bl	8001b34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800163e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800164a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800164e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d009      	beq.n	8001672 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	22e0      	movs	r2, #224	@ 0xe0
 800166a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e05d      	b.n	800172e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800167e:	4b31      	ldr	r3, [pc, #196]	@ (8001744 <HAL_ETH_Init+0x1f0>)
 8001680:	4013      	ands	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6952      	ldr	r2, [r2, #20]
 8001686:	0051      	lsls	r1, r2, #1
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	430b      	orrs	r3, r1
 800168e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001692:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fae9 	bl	8001c6e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 fb2f 	bl	8001d00 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	3305      	adds	r3, #5
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	021a      	lsls	r2, r3, #8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	3304      	adds	r3, #4
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	3303      	adds	r3, #3
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	061a      	lsls	r2, r3, #24
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	3302      	adds	r3, #2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016e0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80016ee:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016f0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <HAL_ETH_Init+0x1f4>)
 8001702:	430b      	orrs	r3, r1
 8001704:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <HAL_ETH_Init+0x1f8>)
 8001716:	430b      	orrs	r3, r1
 8001718:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2210      	movs	r2, #16
 8001728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	58024400 	.word	0x58024400
 800173c:	58000400 	.word	0x58000400
 8001740:	431bde83 	.word	0x431bde83
 8001744:	ffff8001 	.word	0xffff8001
 8001748:	0c020060 	.word	0x0c020060
 800174c:	0c20c000 	.word	0x0c20c000

08001750 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001760:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001768:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800176a:	f001 fd61 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800176e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4a1a      	ldr	r2, [pc, #104]	@ (80017dc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d804      	bhi.n	8001782 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	e022      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	4a16      	ldr	r2, [pc, #88]	@ (80017e0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d204      	bcs.n	8001794 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e019      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4a13      	ldr	r2, [pc, #76]	@ (80017e4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d915      	bls.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4a12      	ldr	r2, [pc, #72]	@ (80017e8 <HAL_ETH_SetMDIOClockRange+0x98>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d804      	bhi.n	80017ae <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	e00c      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	4a0e      	ldr	r2, [pc, #56]	@ (80017ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d804      	bhi.n	80017c0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e003      	b.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80017c6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	02160ebf 	.word	0x02160ebf
 80017e0:	03938700 	.word	0x03938700
 80017e4:	05f5e0ff 	.word	0x05f5e0ff
 80017e8:	08f0d17f 	.word	0x08f0d17f
 80017ec:	0ee6b27f 	.word	0x0ee6b27f

080017f0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001802:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	791b      	ldrb	r3, [r3, #4]
 8001808:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800180a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	7b1b      	ldrb	r3, [r3, #12]
 8001810:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001812:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	7b5b      	ldrb	r3, [r3, #13]
 8001818:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800181a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	7b9b      	ldrb	r3, [r3, #14]
 8001820:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7bdb      	ldrb	r3, [r3, #15]
 8001828:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800182a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	7c12      	ldrb	r2, [r2, #16]
 8001830:	2a00      	cmp	r2, #0
 8001832:	d102      	bne.n	800183a <ETH_SetMACConfig+0x4a>
 8001834:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001838:	e000      	b.n	800183c <ETH_SetMACConfig+0x4c>
 800183a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800183c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	7c52      	ldrb	r2, [r2, #17]
 8001842:	2a00      	cmp	r2, #0
 8001844:	d102      	bne.n	800184c <ETH_SetMACConfig+0x5c>
 8001846:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800184a:	e000      	b.n	800184e <ETH_SetMACConfig+0x5e>
 800184c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7c9b      	ldrb	r3, [r3, #18]
 8001854:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001856:	431a      	orrs	r2, r3
               macconf->Speed |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800185c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	7f1b      	ldrb	r3, [r3, #28]
 8001868:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800186a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7f5b      	ldrb	r3, [r3, #29]
 8001870:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001872:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	7f92      	ldrb	r2, [r2, #30]
 8001878:	2a00      	cmp	r2, #0
 800187a:	d102      	bne.n	8001882 <ETH_SetMACConfig+0x92>
 800187c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001880:	e000      	b.n	8001884 <ETH_SetMACConfig+0x94>
 8001882:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001884:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	7fdb      	ldrb	r3, [r3, #31]
 800188a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800188c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001894:	2a00      	cmp	r2, #0
 8001896:	d102      	bne.n	800189e <ETH_SetMACConfig+0xae>
 8001898:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800189c:	e000      	b.n	80018a0 <ETH_SetMACConfig+0xb0>
 800189e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b56      	ldr	r3, [pc, #344]	@ (8001a1c <ETH_SetMACConfig+0x22c>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80018da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80018dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80018e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80018ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80018f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d102      	bne.n	8001902 <ETH_SetMACConfig+0x112>
 80018fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001900:	e000      	b.n	8001904 <ETH_SetMACConfig+0x114>
 8001902:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001904:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800190a:	4313      	orrs	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	4b42      	ldr	r3, [pc, #264]	@ (8001a20 <ETH_SetMACConfig+0x230>)
 8001916:	4013      	ands	r3, r2
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	68f9      	ldr	r1, [r7, #12]
 800191e:	430b      	orrs	r3, r1
 8001920:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001928:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800192e:	4313      	orrs	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68da      	ldr	r2, [r3, #12]
 8001938:	4b3a      	ldr	r3, [pc, #232]	@ (8001a24 <ETH_SetMACConfig+0x234>)
 800193a:	4013      	ands	r3, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	68f9      	ldr	r1, [r7, #12]
 8001942:	430b      	orrs	r3, r1
 8001944:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800194c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001952:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800195a:	2a00      	cmp	r2, #0
 800195c:	d101      	bne.n	8001962 <ETH_SetMACConfig+0x172>
 800195e:	2280      	movs	r2, #128	@ 0x80
 8001960:	e000      	b.n	8001964 <ETH_SetMACConfig+0x174>
 8001962:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001964:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800196a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800196c:	4313      	orrs	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001976:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	430b      	orrs	r3, r1
 8001984:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800198c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001994:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a2:	f023 0103 	bic.w	r1, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80019ba:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80019d6:	2a00      	cmp	r2, #0
 80019d8:	d101      	bne.n	80019de <ETH_SetMACConfig+0x1ee>
 80019da:	2240      	movs	r2, #64	@ 0x40
 80019dc:	e000      	b.n	80019e0 <ETH_SetMACConfig+0x1f0>
 80019de:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80019e0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80019e8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80019ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80019f2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a00:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	00048083 	.word	0x00048083
 8001a20:	c0f88000 	.word	0xc0f88000
 8001a24:	fffffef0 	.word	0xfffffef0

08001a28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b38      	ldr	r3, [pc, #224]	@ (8001b20 <ETH_SetDMAConfig+0xf8>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	6811      	ldr	r1, [r2, #0]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a4e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	791b      	ldrb	r3, [r3, #4]
 8001a54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a5a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	7b1b      	ldrb	r3, [r3, #12]
 8001a60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a62:	4313      	orrs	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	4b2c      	ldr	r3, [pc, #176]	@ (8001b24 <ETH_SetDMAConfig+0xfc>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a80:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	7b5b      	ldrb	r3, [r3, #13]
 8001a86:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a98:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001a9c:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <ETH_SetDMAConfig+0x100>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aac:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	7d1b      	ldrb	r3, [r3, #20]
 8001ab8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7f5b      	ldrb	r3, [r3, #29]
 8001ac0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ace:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001ad2:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <ETH_SetDMAConfig+0x104>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6812      	ldr	r2, [r2, #0]
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	430b      	orrs	r3, r1
 8001ade:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ae2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7f1b      	ldrb	r3, [r3, #28]
 8001aea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001afc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b00:	4b0b      	ldr	r3, [pc, #44]	@ (8001b30 <ETH_SetDMAConfig+0x108>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b10:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	ffff87fd 	.word	0xffff87fd
 8001b24:	ffff2ffe 	.word	0xffff2ffe
 8001b28:	fffec000 	.word	0xfffec000
 8001b2c:	ffc0efef 	.word	0xffc0efef
 8001b30:	7fc0ffff 	.word	0x7fc0ffff

08001b34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b0a4      	sub	sp, #144	@ 0x90
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b42:	2300      	movs	r3, #0
 8001b44:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b74:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001b8c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001b90:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001bcc:	2320      	movs	r3, #32
 8001bce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001bde:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001be4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001be8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c12:	2301      	movs	r3, #1
 8001c14:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c18:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fde6 	bl	80017f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c24:	2301      	movs	r3, #1
 8001c26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c3e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c54:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001c58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	4619      	mov	r1, r3
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff fee1 	bl	8001a28 <ETH_SetDMAConfig>
}
 8001c66:	bf00      	nop
 8001c68:	3790      	adds	r7, #144	@ 0x90
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e01d      	b.n	8001cb8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68d9      	ldr	r1, [r3, #12]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4413      	add	r3, r2
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	440b      	add	r3, r1
 8001c8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2200      	movs	r2, #0
 8001c98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ca6:	68b9      	ldr	r1, [r7, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	3206      	adds	r2, #6
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d9de      	bls.n	8001c7c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2303      	movs	r3, #3
 8001cd0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68da      	ldr	r2, [r3, #12]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e023      	b.n	8001d56 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6919      	ldr	r1, [r3, #16]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2200      	movs	r2, #0
 8001d42:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	3212      	adds	r2, #18
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3301      	adds	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2b03      	cmp	r3, #3
 8001d5a:	d9d8      	bls.n	8001d0e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d82:	461a      	mov	r2, r3
 8001d84:	2303      	movs	r3, #3
 8001d86:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d96:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001daa:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001dae:	bf00      	nop
 8001db0:	3714      	adds	r7, #20
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dca:	4b86      	ldr	r3, [pc, #536]	@ (8001fe4 <HAL_GPIO_Init+0x228>)
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dce:	e18c      	b.n	80020ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 817e 	beq.w	80020e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_GPIO_Init+0x44>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d017      	beq.n	8001e9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	69b9      	ldr	r1, [r7, #24]
 8001eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0203 	and.w	r2, r3, #3
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80d8 	beq.w	80020e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe8 <HAL_GPIO_Init+0x22c>)
 8001f36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8001fe8 <HAL_GPIO_Init+0x22c>)
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f44:	4b28      	ldr	r3, [pc, #160]	@ (8001fe8 <HAL_GPIO_Init+0x22c>)
 8001f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a26      	ldr	r2, [pc, #152]	@ (8001fec <HAL_GPIO_Init+0x230>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff0 <HAL_GPIO_Init+0x234>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d04a      	beq.n	8002014 <HAL_GPIO_Init+0x258>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <HAL_GPIO_Init+0x238>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d02b      	beq.n	8001fde <HAL_GPIO_Init+0x222>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <HAL_GPIO_Init+0x23c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d025      	beq.n	8001fda <HAL_GPIO_Init+0x21e>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1a      	ldr	r2, [pc, #104]	@ (8001ffc <HAL_GPIO_Init+0x240>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <HAL_GPIO_Init+0x21a>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a19      	ldr	r2, [pc, #100]	@ (8002000 <HAL_GPIO_Init+0x244>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x216>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a18      	ldr	r2, [pc, #96]	@ (8002004 <HAL_GPIO_Init+0x248>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x212>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a17      	ldr	r2, [pc, #92]	@ (8002008 <HAL_GPIO_Init+0x24c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a16      	ldr	r2, [pc, #88]	@ (800200c <HAL_GPIO_Init+0x250>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x20a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a15      	ldr	r2, [pc, #84]	@ (8002010 <HAL_GPIO_Init+0x254>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x206>
 8001fbe:	2309      	movs	r3, #9
 8001fc0:	e029      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fc2:	230a      	movs	r3, #10
 8001fc4:	e027      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fc6:	2307      	movs	r3, #7
 8001fc8:	e025      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fca:	2306      	movs	r3, #6
 8001fcc:	e023      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fce:	2305      	movs	r3, #5
 8001fd0:	e021      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	e01f      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e01d      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e01b      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e019      	b.n	8002016 <HAL_GPIO_Init+0x25a>
 8001fe2:	bf00      	nop
 8001fe4:	58000080 	.word	0x58000080
 8001fe8:	58024400 	.word	0x58024400
 8001fec:	58000400 	.word	0x58000400
 8001ff0:	58020000 	.word	0x58020000
 8001ff4:	58020400 	.word	0x58020400
 8001ff8:	58020800 	.word	0x58020800
 8001ffc:	58020c00 	.word	0x58020c00
 8002000:	58021000 	.word	0x58021000
 8002004:	58021400 	.word	0x58021400
 8002008:	58021800 	.word	0x58021800
 800200c:	58021c00 	.word	0x58021c00
 8002010:	58022400 	.word	0x58022400
 8002014:	2300      	movs	r3, #0
 8002016:	69fa      	ldr	r2, [r7, #28]
 8002018:	f002 0203 	and.w	r2, r2, #3
 800201c:	0092      	lsls	r2, r2, #2
 800201e:	4093      	lsls	r3, r2
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002026:	4938      	ldr	r1, [pc, #224]	@ (8002108 <HAL_GPIO_Init+0x34c>)
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	089b      	lsrs	r3, r3, #2
 800202c:	3302      	adds	r3, #2
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800205a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002088:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4013      	ands	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f47f ae6b 	bne.w	8001dd0 <HAL_GPIO_Init+0x14>
  }
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3724      	adds	r7, #36	@ 0x24
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	58000400 	.word	0x58000400

0800210c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	807b      	strh	r3, [r7, #2]
 8002118:	4613      	mov	r3, r2
 800211a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211c:	787b      	ldrb	r3, [r7, #1]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	887a      	ldrh	r2, [r7, #2]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002128:	e003      	b.n	8002132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	041a      	lsls	r2, r3, #16
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	619a      	str	r2, [r3, #24]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e08b      	b.n	800226a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fe26 	bl	8000db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2224      	movs	r2, #36	@ 0x24
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f022 0201 	bic.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002190:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d107      	bne.n	80021ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	e006      	b.n	80021c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	689a      	ldr	r2, [r3, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d108      	bne.n	80021e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	e007      	b.n	80021f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_I2C_Init+0x134>)
 80021fe:	430b      	orrs	r3, r1
 8002200:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002210:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	69d9      	ldr	r1, [r3, #28]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	02008000 	.word	0x02008000

08002278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b20      	cmp	r3, #32
 800228c:	d138      	bne.n	8002300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002298:	2302      	movs	r3, #2
 800229a:	e032      	b.n	8002302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2224      	movs	r2, #36	@ 0x24
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0201 	bic.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80022ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6819      	ldr	r1, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2220      	movs	r2, #32
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b20      	cmp	r3, #32
 8002322:	d139      	bne.n	8002398 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800232e:	2302      	movs	r3, #2
 8002330:	e033      	b.n	800239a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2201      	movs	r2, #1
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2224      	movs	r2, #36	@ 0x24
 800233e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0201 	bic.w	r2, r2, #1
 8002350:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002360:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0201 	orr.w	r2, r2, #1
 8002382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e000      	b.n	800239a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002398:	2302      	movs	r3, #2
  }
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_PWREx_ConfigSupply+0x70>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	d00a      	beq.n	80023d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023bc:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_PWREx_ConfigSupply+0x70>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d001      	beq.n	80023ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e01f      	b.n	800240e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	e01d      	b.n	800240e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80023d2:	4b11      	ldr	r3, [pc, #68]	@ (8002418 <HAL_PWREx_ConfigSupply+0x70>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	f023 0207 	bic.w	r2, r3, #7
 80023da:	490f      	ldr	r1, [pc, #60]	@ (8002418 <HAL_PWREx_ConfigSupply+0x70>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80023e2:	f7fe ffb3 	bl	800134c <HAL_GetTick>
 80023e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023e8:	e009      	b.n	80023fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023ea:	f7fe ffaf 	bl	800134c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023f8:	d901      	bls.n	80023fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e007      	b.n	800240e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80023fe:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_PWREx_ConfigSupply+0x70>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002406:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800240a:	d1ee      	bne.n	80023ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	58024800 	.word	0x58024800

0800241c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	@ 0x30
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e3c8      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8087 	beq.w	800254a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243c:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002444:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002446:	4b86      	ldr	r3, [pc, #536]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800244c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244e:	2b10      	cmp	r3, #16
 8002450:	d007      	beq.n	8002462 <HAL_RCC_OscConfig+0x46>
 8002452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002454:	2b18      	cmp	r3, #24
 8002456:	d110      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
 8002458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b7f      	ldr	r3, [pc, #508]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d06c      	beq.n	8002548 <HAL_RCC_OscConfig+0x12c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d168      	bne.n	8002548 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e3a2      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x76>
 8002484:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a75      	ldr	r2, [pc, #468]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x98>
 800249a:	4b71      	ldr	r3, [pc, #452]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a70      	ldr	r2, [pc, #448]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6d      	ldr	r2, [pc, #436]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e01d      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0xbc>
 80024be:	4b68      	ldr	r3, [pc, #416]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a67      	ldr	r2, [pc, #412]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b65      	ldr	r3, [pc, #404]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a64      	ldr	r2, [pc, #400]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e00b      	b.n	80024f0 <HAL_RCC_OscConfig+0xd4>
 80024d8:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a60      	ldr	r2, [pc, #384]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe ff28 	bl	800134c <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe ff24 	bl	800134c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e356      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002512:	4b53      	ldr	r3, [pc, #332]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0xe4>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe ff14 	bl	800134c <HAL_GetTick>
 8002524:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe ff10 	bl	800134c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e342      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800253a:	4b49      	ldr	r3, [pc, #292]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x10c>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 808c 	beq.w	8002670 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002558:	4b41      	ldr	r3, [pc, #260]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002560:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002562:	4b3f      	ldr	r3, [pc, #252]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002566:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d007      	beq.n	800257e <HAL_RCC_OscConfig+0x162>
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	2b18      	cmp	r3, #24
 8002572:	d137      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1c8>
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d132      	bne.n	80025e4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800257e:	4b38      	ldr	r3, [pc, #224]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x17a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e314      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002596:	4b32      	ldr	r3, [pc, #200]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 0219 	bic.w	r2, r3, #25
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	492f      	ldr	r1, [pc, #188]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7fe fed0 	bl	800134c <HAL_GetTick>
 80025ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7fe fecc 	bl	800134c <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e2fe      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025c2:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	4920      	ldr	r1, [pc, #128]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e2:	e045      	b.n	8002670 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d026      	beq.n	800263a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f023 0219 	bic.w	r2, r3, #25
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4919      	ldr	r1, [pc, #100]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7fe fea5 	bl	800134c <HAL_GetTick>
 8002602:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7fe fea1 	bl	800134c <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e2d3      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	490b      	ldr	r1, [pc, #44]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
 8002638:	e01a      	b.n	8002670 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a08      	ldr	r2, [pc, #32]	@ (8002660 <HAL_RCC_OscConfig+0x244>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fe81 	bl	800134c <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fe7d 	bl	800134c <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d903      	bls.n	8002664 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e2af      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
 8002660:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002664:	4b96      	ldr	r3, [pc, #600]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d06a      	beq.n	8002752 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800267c:	4b90      	ldr	r3, [pc, #576]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002684:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002686:	4b8e      	ldr	r3, [pc, #568]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b08      	cmp	r3, #8
 8002690:	d007      	beq.n	80026a2 <HAL_RCC_OscConfig+0x286>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b18      	cmp	r3, #24
 8002696:	d11b      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2b4>
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026a2:	4b87      	ldr	r3, [pc, #540]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x29e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69db      	ldr	r3, [r3, #28]
 80026b2:	2b80      	cmp	r3, #128	@ 0x80
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e282      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026ba:	4b81      	ldr	r3, [pc, #516]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	061b      	lsls	r3, r3, #24
 80026c8:	497d      	ldr	r1, [pc, #500]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ce:	e040      	b.n	8002752 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d023      	beq.n	8002720 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026d8:	4b79      	ldr	r3, [pc, #484]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a78      	ldr	r2, [pc, #480]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80026de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e4:	f7fe fe32 	bl	800134c <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026ec:	f7fe fe2e 	bl	800134c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e260      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fe:	4b70      	ldr	r3, [pc, #448]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800270a:	4b6d      	ldr	r3, [pc, #436]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	4969      	ldr	r1, [pc, #420]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800271a:	4313      	orrs	r3, r2
 800271c:	60cb      	str	r3, [r1, #12]
 800271e:	e018      	b.n	8002752 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002720:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a66      	ldr	r2, [pc, #408]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800272a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272c:	f7fe fe0e 	bl	800134c <HAL_GetTick>
 8002730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002732:	e008      	b.n	8002746 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002734:	f7fe fe0a 	bl	800134c <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e23c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002746:	4b5e      	ldr	r3, [pc, #376]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1f0      	bne.n	8002734 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d036      	beq.n	80027cc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d019      	beq.n	800279a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002766:	4b56      	ldr	r3, [pc, #344]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800276a:	4a55      	ldr	r2, [pc, #340]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7fe fdeb 	bl	800134c <HAL_GetTick>
 8002776:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277a:	f7fe fde7 	bl	800134c <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e219      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800278c:	4b4c      	ldr	r3, [pc, #304]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800278e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x35e>
 8002798:	e018      	b.n	80027cc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279a:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800279c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800279e:	4a48      	ldr	r2, [pc, #288]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a6:	f7fe fdd1 	bl	800134c <HAL_GetTick>
 80027aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ae:	f7fe fdcd 	bl	800134c <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1ff      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027c0:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80027c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0320 	and.w	r3, r3, #32
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d036      	beq.n	8002846 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d019      	beq.n	8002814 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027e0:	4b37      	ldr	r3, [pc, #220]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a36      	ldr	r2, [pc, #216]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80027e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80027ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027ec:	f7fe fdae 	bl	800134c <HAL_GetTick>
 80027f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f4:	f7fe fdaa 	bl	800134c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e1dc      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002806:	4b2e      	ldr	r3, [pc, #184]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x3d8>
 8002812:	e018      	b.n	8002846 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002814:	4b2a      	ldr	r3, [pc, #168]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a29      	ldr	r2, [pc, #164]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800281a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800281e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002820:	f7fe fd94 	bl	800134c <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002828:	f7fe fd90 	bl	800134c <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e1c2      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800283a:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8086 	beq.w	8002960 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002854:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_RCC_OscConfig+0x4a8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_RCC_OscConfig+0x4a8>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800285e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002860:	f7fe fd74 	bl	800134c <HAL_GetTick>
 8002864:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe fd70 	bl	800134c <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	@ 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1a2      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_RCC_OscConfig+0x4a8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x480>
 800288e:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002892:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	@ 0x70
 800289a:	e032      	b.n	8002902 <HAL_RCC_OscConfig+0x4e6>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d111      	bne.n	80028c8 <HAL_RCC_OscConfig+0x4ac>
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a8:	4a05      	ldr	r2, [pc, #20]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b4:	4a02      	ldr	r2, [pc, #8]	@ (80028c0 <HAL_RCC_OscConfig+0x4a4>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80028bc:	e021      	b.n	8002902 <HAL_RCC_OscConfig+0x4e6>
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	58024800 	.word	0x58024800
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x4ce>
 80028d0:	4b83      	ldr	r3, [pc, #524]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d4:	4a82      	ldr	r2, [pc, #520]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	@ 0x70
 80028dc:	4b80      	ldr	r3, [pc, #512]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x4e6>
 80028ea:	4b7d      	ldr	r3, [pc, #500]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80028f6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	4a79      	ldr	r2, [pc, #484]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fd1f 	bl	800134c <HAL_GetTick>
 800290e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7fe fd1b 	bl	800134c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e14b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002928:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x4f6>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002936:	f7fe fd09 	bl	800134c <HAL_GetTick>
 800293a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fd05 	bl	800134c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e135      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002954:	4b62      	ldr	r3, [pc, #392]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 812a 	beq.w	8002bbe <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800296a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002972:	2b18      	cmp	r3, #24
 8002974:	f000 80ba 	beq.w	8002aec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	2b02      	cmp	r3, #2
 800297e:	f040 8095 	bne.w	8002aac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002982:	4b57      	ldr	r3, [pc, #348]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a56      	ldr	r2, [pc, #344]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002988:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800298c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298e:	f7fe fcdd 	bl	800134c <HAL_GetTick>
 8002992:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002994:	e008      	b.n	80029a8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002996:	f7fe fcd9 	bl	800134c <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e10b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029a8:	4b4d      	ldr	r3, [pc, #308]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f0      	bne.n	8002996 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b4:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80029b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029b8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ae4 <HAL_RCC_OscConfig+0x6c8>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029c4:	0112      	lsls	r2, r2, #4
 80029c6:	430a      	orrs	r2, r1
 80029c8:	4945      	ldr	r1, [pc, #276]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	628b      	str	r3, [r1, #40]	@ 0x28
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	3b01      	subs	r3, #1
 80029d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029dc:	3b01      	subs	r3, #1
 80029de:	025b      	lsls	r3, r3, #9
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e8:	3b01      	subs	r3, #1
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029f6:	3b01      	subs	r3, #1
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80029fe:	4938      	ldr	r1, [pc, #224]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a04:	4b36      	ldr	r3, [pc, #216]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a08:	4a35      	ldr	r2, [pc, #212]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a0a:	f023 0301 	bic.w	r3, r3, #1
 8002a0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a10:	4b33      	ldr	r3, [pc, #204]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a14:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <HAL_RCC_OscConfig+0x6cc>)
 8002a16:	4013      	ands	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a1c:	00d2      	lsls	r2, r2, #3
 8002a1e:	4930      	ldr	r1, [pc, #192]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a28:	f023 020c 	bic.w	r2, r3, #12
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	492b      	ldr	r1, [pc, #172]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a36:	4b2a      	ldr	r3, [pc, #168]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a3a:	f023 0202 	bic.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	4927      	ldr	r1, [pc, #156]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a48:	4b25      	ldr	r3, [pc, #148]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4c:	4a24      	ldr	r2, [pc, #144]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a54:	4b22      	ldr	r3, [pc, #136]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	4a21      	ldr	r2, [pc, #132]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a64:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a70:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fc62 	bl	800134c <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fc5e 	bl	800134c <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e090      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x670>
 8002aaa:	e088      	b.n	8002bbe <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab8:	f7fe fc48 	bl	800134c <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002abe:	e008      	b.n	8002ad2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac0:	f7fe fc44 	bl	800134c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e076      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ad2:	4b03      	ldr	r3, [pc, #12]	@ (8002ae0 <HAL_RCC_OscConfig+0x6c4>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d1f0      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x6a4>
 8002ade:	e06e      	b.n	8002bbe <HAL_RCC_OscConfig+0x7a2>
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	fffffc0c 	.word	0xfffffc0c
 8002ae8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002aec:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002af2:	4b35      	ldr	r3, [pc, #212]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d031      	beq.n	8002b64 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f003 0203 	and.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d12a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d122      	bne.n	8002b64 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d11a      	bne.n	8002b64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	0a5b      	lsrs	r3, r3, #9
 8002b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d111      	bne.n	8002b64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0c1b      	lsrs	r3, r3, #16
 8002b44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d108      	bne.n	8002b64 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	0e1b      	lsrs	r3, r3, #24
 8002b56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e02b      	b.n	8002bc0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002b68:	4b17      	ldr	r3, [pc, #92]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b6c:	08db      	lsrs	r3, r3, #3
 8002b6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d01f      	beq.n	8002bbe <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002b7e:	4b12      	ldr	r3, [pc, #72]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b8a:	f7fe fbdf 	bl	800134c <HAL_GetTick>
 8002b8e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b90:	bf00      	nop
 8002b92:	f7fe fbdb 	bl	800134c <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d0f9      	beq.n	8002b92 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002ba0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bcc <HAL_RCC_OscConfig+0x7b0>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002baa:	00d2      	lsls	r2, r2, #3
 8002bac:	4906      	ldr	r1, [pc, #24]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_RCC_OscConfig+0x7ac>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3730      	adds	r7, #48	@ 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	ffff0007 	.word	0xffff0007

08002bd0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e19c      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b8a      	ldr	r3, [pc, #552]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d910      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b87      	ldr	r3, [pc, #540]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f023 020f 	bic.w	r2, r3, #15
 8002bfa:	4985      	ldr	r1, [pc, #532]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b83      	ldr	r3, [pc, #524]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e184      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d010      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	4b7b      	ldr	r3, [pc, #492]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d908      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c30:	4b78      	ldr	r3, [pc, #480]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	4975      	ldr	r1, [pc, #468]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	4b70      	ldr	r3, [pc, #448]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d908      	bls.n	8002c70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	496a      	ldr	r1, [pc, #424]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d010      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699a      	ldr	r2, [r3, #24]
 8002c80:	4b64      	ldr	r3, [pc, #400]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d908      	bls.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c8c:	4b61      	ldr	r3, [pc, #388]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	69db      	ldr	r3, [r3, #28]
 8002c90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	495e      	ldr	r1, [pc, #376]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69da      	ldr	r2, [r3, #28]
 8002cae:	4b59      	ldr	r3, [pc, #356]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d908      	bls.n	8002ccc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cba:	4b56      	ldr	r3, [pc, #344]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	4953      	ldr	r1, [pc, #332]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d908      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f023 020f 	bic.w	r2, r3, #15
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4947      	ldr	r1, [pc, #284]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d055      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d06:	4b43      	ldr	r3, [pc, #268]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4940      	ldr	r1, [pc, #256]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d20:	4b3c      	ldr	r3, [pc, #240]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d121      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0f6      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d107      	bne.n	8002d48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d38:	4b36      	ldr	r3, [pc, #216]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d115      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0ea      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d107      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d50:	4b30      	ldr	r3, [pc, #192]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d109      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0de      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d60:	4b2c      	ldr	r3, [pc, #176]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e0d6      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d70:	4b28      	ldr	r3, [pc, #160]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f023 0207 	bic.w	r2, r3, #7
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	4925      	ldr	r1, [pc, #148]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d82:	f7fe fae3 	bl	800134c <HAL_GetTick>
 8002d86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8a:	f7fe fadf 	bl	800134c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e0be      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d1eb      	bne.n	8002d8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d010      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d208      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dce:	4b11      	ldr	r3, [pc, #68]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f023 020f 	bic.w	r2, r3, #15
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	490e      	ldr	r1, [pc, #56]	@ (8002e14 <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d214      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 020f 	bic.w	r2, r3, #15
 8002df6:	4906      	ldr	r1, [pc, #24]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <HAL_RCC_ClockConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e086      	b.n	8002f1e <HAL_RCC_ClockConfig+0x34e>
 8002e10:	52002000 	.word	0x52002000
 8002e14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	4b3f      	ldr	r3, [pc, #252]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d208      	bcs.n	8002e46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e34:	4b3c      	ldr	r3, [pc, #240]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4939      	ldr	r1, [pc, #228]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d010      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b34      	ldr	r3, [pc, #208]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d208      	bcs.n	8002e74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e62:	4b31      	ldr	r3, [pc, #196]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	492e      	ldr	r1, [pc, #184]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0310 	and.w	r3, r3, #16
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d010      	beq.n	8002ea2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	4b28      	ldr	r3, [pc, #160]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d208      	bcs.n	8002ea2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	4922      	ldr	r1, [pc, #136]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d010      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69da      	ldr	r2, [r3, #28]
 8002eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d208      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	4917      	ldr	r1, [pc, #92]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ed0:	f000 f834 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b14      	ldr	r3, [pc, #80]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	4912      	ldr	r1, [pc, #72]	@ (8002f2c <HAL_RCC_ClockConfig+0x35c>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	f003 031f 	and.w	r3, r3, #31
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eee:	4b0e      	ldr	r3, [pc, #56]	@ (8002f28 <HAL_RCC_ClockConfig+0x358>)
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <HAL_RCC_ClockConfig+0x35c>)
 8002ef8:	5cd3      	ldrb	r3, [r2, r3]
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	fa22 f303 	lsr.w	r3, r2, r3
 8002f04:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <HAL_RCC_ClockConfig+0x360>)
 8002f06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f08:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <HAL_RCC_ClockConfig+0x364>)
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f38 <HAL_RCC_ClockConfig+0x368>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe f9d0 	bl	80012b8 <HAL_InitTick>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	58024400 	.word	0x58024400
 8002f2c:	0800629c 	.word	0x0800629c
 8002f30:	24000004 	.word	0x24000004
 8002f34:	24000000 	.word	0x24000000
 8002f38:	24000008 	.word	0x24000008

08002f3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	@ 0x24
 8002f40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f42:	4bb3      	ldr	r3, [pc, #716]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f4a:	2b18      	cmp	r3, #24
 8002f4c:	f200 8155 	bhi.w	80031fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002f50:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f56:	bf00      	nop
 8002f58:	08002fbd 	.word	0x08002fbd
 8002f5c:	080031fb 	.word	0x080031fb
 8002f60:	080031fb 	.word	0x080031fb
 8002f64:	080031fb 	.word	0x080031fb
 8002f68:	080031fb 	.word	0x080031fb
 8002f6c:	080031fb 	.word	0x080031fb
 8002f70:	080031fb 	.word	0x080031fb
 8002f74:	080031fb 	.word	0x080031fb
 8002f78:	08002fe3 	.word	0x08002fe3
 8002f7c:	080031fb 	.word	0x080031fb
 8002f80:	080031fb 	.word	0x080031fb
 8002f84:	080031fb 	.word	0x080031fb
 8002f88:	080031fb 	.word	0x080031fb
 8002f8c:	080031fb 	.word	0x080031fb
 8002f90:	080031fb 	.word	0x080031fb
 8002f94:	080031fb 	.word	0x080031fb
 8002f98:	08002fe9 	.word	0x08002fe9
 8002f9c:	080031fb 	.word	0x080031fb
 8002fa0:	080031fb 	.word	0x080031fb
 8002fa4:	080031fb 	.word	0x080031fb
 8002fa8:	080031fb 	.word	0x080031fb
 8002fac:	080031fb 	.word	0x080031fb
 8002fb0:	080031fb 	.word	0x080031fb
 8002fb4:	080031fb 	.word	0x080031fb
 8002fb8:	08002fef 	.word	0x08002fef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fbc:	4b94      	ldr	r3, [pc, #592]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fc8:	4b91      	ldr	r3, [pc, #580]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	08db      	lsrs	r3, r3, #3
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	4a90      	ldr	r2, [pc, #576]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002fda:	e111      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002fdc:	4b8d      	ldr	r3, [pc, #564]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fde:	61bb      	str	r3, [r7, #24]
      break;
 8002fe0:	e10e      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002fe4:	61bb      	str	r3, [r7, #24]
      break;
 8002fe6:	e10b      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002fe8:	4b8c      	ldr	r3, [pc, #560]	@ (800321c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002fea:	61bb      	str	r3, [r7, #24]
      break;
 8002fec:	e108      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002fee:	4b88      	ldr	r3, [pc, #544]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ff8:	4b85      	ldr	r3, [pc, #532]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003002:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003004:	4b82      	ldr	r3, [pc, #520]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800300e:	4b80      	ldr	r3, [pc, #512]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	fb02 f303 	mul.w	r3, r2, r3
 800301e:	ee07 3a90 	vmov	s15, r3
 8003022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003026:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80e1 	beq.w	80031f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b02      	cmp	r3, #2
 8003036:	f000 8083 	beq.w	8003140 <HAL_RCC_GetSysClockFreq+0x204>
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b02      	cmp	r3, #2
 800303e:	f200 80a1 	bhi.w	8003184 <HAL_RCC_GetSysClockFreq+0x248>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_RCC_GetSysClockFreq+0x114>
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d056      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800304e:	e099      	b.n	8003184 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003050:	4b6f      	ldr	r3, [pc, #444]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0320 	and.w	r3, r3, #32
 8003058:	2b00      	cmp	r3, #0
 800305a:	d02d      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800305c:	4b6c      	ldr	r3, [pc, #432]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	4a6b      	ldr	r2, [pc, #428]	@ (8003214 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	ee07 3a90 	vmov	s15, r3
 800307e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003086:	4b62      	ldr	r3, [pc, #392]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800308e:	ee07 3a90 	vmov	s15, r3
 8003092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003096:	ed97 6a02 	vldr	s12, [r7, #8]
 800309a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800309e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030b6:	e087      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003224 <HAL_RCC_GetSysClockFreq+0x2e8>
 80030c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ca:	4b51      	ldr	r3, [pc, #324]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d2:	ee07 3a90 	vmov	s15, r3
 80030d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030da:	ed97 6a02 	vldr	s12, [r7, #8]
 80030de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030fa:	e065      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ee07 3a90 	vmov	s15, r3
 8003102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003106:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x2ec>
 800310a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800310e:	4b40      	ldr	r3, [pc, #256]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003116:	ee07 3a90 	vmov	s15, r3
 800311a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800311e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003122:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800312e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800313e:	e043      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800322c <HAL_RCC_GetSysClockFreq+0x2f0>
 800314e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003152:	4b2f      	ldr	r3, [pc, #188]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003162:	ed97 6a02 	vldr	s12, [r7, #8]
 8003166:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800316e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003182:	e021      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	ee07 3a90 	vmov	s15, r3
 800318a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800318e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003228 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003220 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80031c8:	4b11      	ldr	r3, [pc, #68]	@ (8003210 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031cc:	0a5b      	lsrs	r3, r3, #9
 80031ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031d2:	3301      	adds	r3, #1
 80031d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80031e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ec:	ee17 3a90 	vmov	r3, s15
 80031f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80031f2:	e005      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
      break;
 80031f8:	e002      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80031fa:	4b07      	ldr	r3, [pc, #28]	@ (8003218 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031fc:	61bb      	str	r3, [r7, #24]
      break;
 80031fe:	bf00      	nop
  }

  return sysclockfreq;
 8003200:	69bb      	ldr	r3, [r7, #24]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3724      	adds	r7, #36	@ 0x24
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	58024400 	.word	0x58024400
 8003214:	03d09000 	.word	0x03d09000
 8003218:	003d0900 	.word	0x003d0900
 800321c:	007a1200 	.word	0x007a1200
 8003220:	46000000 	.word	0x46000000
 8003224:	4c742400 	.word	0x4c742400
 8003228:	4a742400 	.word	0x4a742400
 800322c:	4af42400 	.word	0x4af42400

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003236:	f7ff fe81 	bl	8002f3c <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b10      	ldr	r3, [pc, #64]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x50>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	490f      	ldr	r1, [pc, #60]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x54>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003254:	4b0a      	ldr	r3, [pc, #40]	@ (8003280 <HAL_RCC_GetHCLKFreq+0x50>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	4a09      	ldr	r2, [pc, #36]	@ (8003284 <HAL_RCC_GetHCLKFreq+0x54>)
 800325e:	5cd3      	ldrb	r3, [r2, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	fa22 f303 	lsr.w	r3, r2, r3
 800326a:	4a07      	ldr	r2, [pc, #28]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x58>)
 800326c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800326e:	4a07      	ldr	r2, [pc, #28]	@ (800328c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003274:	4b04      	ldr	r3, [pc, #16]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x58>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	58024400 	.word	0x58024400
 8003284:	0800629c 	.word	0x0800629c
 8003288:	24000004 	.word	0x24000004
 800328c:	24000000 	.word	0x24000000

08003290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003294:	f7ff ffcc 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003298:	4602      	mov	r2, r0
 800329a:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	091b      	lsrs	r3, r3, #4
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	4904      	ldr	r1, [pc, #16]	@ (80032b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a6:	5ccb      	ldrb	r3, [r1, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	58024400 	.word	0x58024400
 80032b8:	0800629c 	.word	0x0800629c

080032bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80032c0:	f7ff ffb6 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	0a1b      	lsrs	r3, r3, #8
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	4904      	ldr	r1, [pc, #16]	@ (80032e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032d2:	5ccb      	ldrb	r3, [r1, r3]
 80032d4:	f003 031f 	and.w	r3, r3, #31
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80032dc:	4618      	mov	r0, r3
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	58024400 	.word	0x58024400
 80032e4:	0800629c 	.word	0x0800629c

080032e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b0c6      	sub	sp, #280	@ 0x118
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032f4:	2300      	movs	r3, #0
 80032f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800330c:	2500      	movs	r5, #0
 800330e:	ea54 0305 	orrs.w	r3, r4, r5
 8003312:	d049      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003318:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800331a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800331e:	d02f      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003320:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003324:	d828      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003326:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800332a:	d01a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800332c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003330:	d822      	bhi.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800333a:	d007      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800333c:	e01c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800333e:	4bab      	ldr	r3, [pc, #684]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003342:	4aaa      	ldr	r2, [pc, #680]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003348:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800334a:	e01a      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800334c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003350:	3308      	adds	r3, #8
 8003352:	2102      	movs	r1, #2
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fc25 	bl	8004ba4 <RCCEx_PLL2_Config>
 800335a:	4603      	mov	r3, r0
 800335c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003360:	e00f      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003366:	3328      	adds	r3, #40	@ 0x28
 8003368:	2102      	movs	r1, #2
 800336a:	4618      	mov	r0, r3
 800336c:	f001 fccc 	bl	8004d08 <RCCEx_PLL3_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003376:	e004      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800338a:	4b98      	ldr	r3, [pc, #608]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800338c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800338e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003398:	4a94      	ldr	r2, [pc, #592]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800339a:	430b      	orrs	r3, r1
 800339c:	6513      	str	r3, [r2, #80]	@ 0x50
 800339e:	e003      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80033a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80033b4:	f04f 0900 	mov.w	r9, #0
 80033b8:	ea58 0309 	orrs.w	r3, r8, r9
 80033bc:	d047      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80033be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d82a      	bhi.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80033c8:	a201      	add	r2, pc, #4	@ (adr r2, 80033d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80033ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ce:	bf00      	nop
 80033d0:	080033e5 	.word	0x080033e5
 80033d4:	080033f3 	.word	0x080033f3
 80033d8:	08003409 	.word	0x08003409
 80033dc:	08003427 	.word	0x08003427
 80033e0:	08003427 	.word	0x08003427
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e4:	4b81      	ldr	r3, [pc, #516]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	4a80      	ldr	r2, [pc, #512]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033f0:	e01a      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033f6:	3308      	adds	r3, #8
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 fbd2 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003406:	e00f      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800340c:	3328      	adds	r3, #40	@ 0x28
 800340e:	2100      	movs	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f001 fc79 	bl	8004d08 <RCCEx_PLL3_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800341c:	e004      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003430:	4b6e      	ldr	r3, [pc, #440]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003434:	f023 0107 	bic.w	r1, r3, #7
 8003438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800343c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800343e:	4a6b      	ldr	r2, [pc, #428]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003440:	430b      	orrs	r3, r1
 8003442:	6513      	str	r3, [r2, #80]	@ 0x50
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003446:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800344a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800344e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800345a:	f04f 0b00 	mov.w	fp, #0
 800345e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003462:	d05b      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003468:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800346c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003470:	d03b      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003472:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003476:	d834      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003478:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800347c:	d037      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 800347e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003482:	d82e      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003484:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003488:	d033      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800348a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800348e:	d828      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003494:	d01a      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349a:	d822      	bhi.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80034a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034a4:	d007      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80034a6:	e01c      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a8:	4b50      	ldr	r3, [pc, #320]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ac:	4a4f      	ldr	r2, [pc, #316]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b4:	e01e      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034ba:	3308      	adds	r3, #8
 80034bc:	2100      	movs	r1, #0
 80034be:	4618      	mov	r0, r3
 80034c0:	f001 fb70 	bl	8004ba4 <RCCEx_PLL2_Config>
 80034c4:	4603      	mov	r3, r0
 80034c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034ca:	e013      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034d0:	3328      	adds	r3, #40	@ 0x28
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 fc17 	bl	8004d08 <RCCEx_PLL3_Config>
 80034da:	4603      	mov	r3, r0
 80034dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e0:	e008      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80034f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034fc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800350c:	4a37      	ldr	r2, [pc, #220]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800350e:	430b      	orrs	r3, r1
 8003510:	6593      	str	r3, [r2, #88]	@ 0x58
 8003512:	e003      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800351c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003528:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003532:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003536:	460b      	mov	r3, r1
 8003538:	4313      	orrs	r3, r2
 800353a:	d05d      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800353c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003540:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003544:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003548:	d03b      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800354a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800354e:	d834      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003550:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003554:	d037      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800355a:	d82e      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800355c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003560:	d033      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003562:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003566:	d828      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003568:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800356c:	d01a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800356e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003572:	d822      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800357c:	d007      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800357e:	e01c      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003580:	4b1a      	ldr	r3, [pc, #104]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	4a19      	ldr	r2, [pc, #100]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800358c:	e01e      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003592:	3308      	adds	r3, #8
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fb04 	bl	8004ba4 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035a2:	e013      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a8:	3328      	adds	r3, #40	@ 0x28
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fbab 	bl	8004d08 <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035b8:	e008      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035c0:	e004      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80035ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10d      	bne.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035e4:	4a01      	ldr	r2, [pc, #4]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ea:	e005      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80035f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003600:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003604:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003608:	2300      	movs	r3, #0
 800360a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800360e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003612:	460b      	mov	r3, r1
 8003614:	4313      	orrs	r3, r2
 8003616:	d03a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800361e:	2b30      	cmp	r3, #48	@ 0x30
 8003620:	d01f      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003622:	2b30      	cmp	r3, #48	@ 0x30
 8003624:	d819      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003626:	2b20      	cmp	r3, #32
 8003628:	d00c      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800362a:	2b20      	cmp	r3, #32
 800362c:	d815      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d019      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003632:	2b10      	cmp	r3, #16
 8003634:	d111      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003636:	4baa      	ldr	r3, [pc, #680]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363a:	4aa9      	ldr	r2, [pc, #676]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800363c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003642:	e011      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003648:	3308      	adds	r3, #8
 800364a:	2102      	movs	r1, #2
 800364c:	4618      	mov	r0, r3
 800364e:	f001 faa9 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003670:	4b9b      	ldr	r3, [pc, #620]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003674:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	4a98      	ldr	r2, [pc, #608]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003680:	430b      	orrs	r3, r1
 8003682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800368a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800368e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800369a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80036a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d051      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036b8:	d035      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80036ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036be:	d82e      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80036c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036c4:	d031      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80036c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036ca:	d828      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80036cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d0:	d01a      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d6:	d822      	bhi.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e0:	d007      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80036e2:	e01c      	b.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e4:	4b7e      	ldr	r3, [pc, #504]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e8:	4a7d      	ldr	r2, [pc, #500]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036f0:	e01c      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f6:	3308      	adds	r3, #8
 80036f8:	2100      	movs	r1, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fa52 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003700:	4603      	mov	r3, r0
 8003702:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003706:	e011      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800370c:	3328      	adds	r3, #40	@ 0x28
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f001 faf9 	bl	8004d08 <RCCEx_PLL3_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800371c:	e006      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003724:	e002      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003726:	bf00      	nop
 8003728:	e000      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800372a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003730:	2b00      	cmp	r3, #0
 8003732:	d10a      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003734:	4b6a      	ldr	r3, [pc, #424]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003738:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800373c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003742:	4a67      	ldr	r2, [pc, #412]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6513      	str	r3, [r2, #80]	@ 0x50
 8003748:	e003      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800374e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800375e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003768:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800376c:	460b      	mov	r3, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	d053      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003778:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800377c:	d033      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800377e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003782:	d82c      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003784:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003788:	d02f      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x502>
 800378a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800378e:	d826      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003790:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003794:	d02b      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003796:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800379a:	d820      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800379c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037a0:	d012      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80037a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037a6:	d81a      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d022      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80037ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b0:	d115      	bne.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b6:	3308      	adds	r3, #8
 80037b8:	2101      	movs	r1, #1
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 f9f2 	bl	8004ba4 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037c6:	e015      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037cc:	3328      	adds	r3, #40	@ 0x28
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 fa99 	bl	8004d08 <RCCEx_PLL3_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037dc:	e00a      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037e4:	e006      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037e6:	bf00      	nop
 80037e8:	e004      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037ea:	bf00      	nop
 80037ec:	e002      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037ee:	bf00      	nop
 80037f0:	e000      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80037f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037fc:	4b38      	ldr	r3, [pc, #224]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003800:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380a:	4a35      	ldr	r2, [pc, #212]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800380c:	430b      	orrs	r3, r1
 800380e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003810:	e003      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003812:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003816:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800381a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800381e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003822:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003830:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003834:	460b      	mov	r3, r1
 8003836:	4313      	orrs	r3, r2
 8003838:	d058      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800383a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003846:	d033      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800384c:	d82c      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800384e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003852:	d02f      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003858:	d826      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800385a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800385e:	d02b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003860:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003864:	d820      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800386a:	d012      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800386c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003870:	d81a      	bhi.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003872:	2b00      	cmp	r3, #0
 8003874:	d022      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003876:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800387a:	d115      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800387c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003880:	3308      	adds	r3, #8
 8003882:	2101      	movs	r1, #1
 8003884:	4618      	mov	r0, r3
 8003886:	f001 f98d 	bl	8004ba4 <RCCEx_PLL2_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003890:	e015      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003896:	3328      	adds	r3, #40	@ 0x28
 8003898:	2101      	movs	r1, #1
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fa34 	bl	8004d08 <RCCEx_PLL3_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038a6:	e00a      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038ae:	e006      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038b0:	bf00      	nop
 80038b2:	e004      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038b4:	bf00      	nop
 80038b6:	e002      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038b8:	bf00      	nop
 80038ba:	e000      	b.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80038bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10e      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038d6:	4a02      	ldr	r2, [pc, #8]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6593      	str	r3, [r2, #88]	@ 0x58
 80038dc:	e006      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 80038de:	bf00      	nop
 80038e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003902:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003906:	460b      	mov	r3, r1
 8003908:	4313      	orrs	r3, r2
 800390a:	d037      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800390c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003916:	d00e      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800391c:	d816      	bhi.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d018      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003926:	d111      	bne.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003928:	4bc4      	ldr	r3, [pc, #784]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	4ac3      	ldr	r2, [pc, #780]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800392e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003932:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003934:	e00f      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800393a:	3308      	adds	r3, #8
 800393c:	2101      	movs	r1, #1
 800393e:	4618      	mov	r0, r3
 8003940:	f001 f930 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800394a:	e004      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003954:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003956:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800395e:	4bb7      	ldr	r3, [pc, #732]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003962:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800396a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800396c:	4ab3      	ldr	r2, [pc, #716]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800396e:	430b      	orrs	r3, r1
 8003970:	6513      	str	r3, [r2, #80]	@ 0x50
 8003972:	e003      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800397c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003988:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003992:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d039      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800399c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d81c      	bhi.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80039a6:	a201      	add	r2, pc, #4	@ (adr r2, 80039ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80039a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ac:	080039e9 	.word	0x080039e9
 80039b0:	080039bd 	.word	0x080039bd
 80039b4:	080039cb 	.word	0x080039cb
 80039b8:	080039e9 	.word	0x080039e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4b9f      	ldr	r3, [pc, #636]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	4a9e      	ldr	r2, [pc, #632]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039c8:	e00f      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039ce:	3308      	adds	r3, #8
 80039d0:	2102      	movs	r1, #2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 f8e6 	bl	8004ba4 <RCCEx_PLL2_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039de:	e004      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039e6:	e000      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80039e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10a      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039f2:	4b92      	ldr	r3, [pc, #584]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f6:	f023 0103 	bic.w	r1, r3, #3
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a00:	4a8e      	ldr	r2, [pc, #568]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a02:	430b      	orrs	r3, r1
 8003a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a06:	e003      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f000 8099 	beq.w	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a32:	4b83      	ldr	r3, [pc, #524]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a82      	ldr	r2, [pc, #520]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3e:	f7fd fc85 	bl	800134c <HAL_GetTick>
 8003a42:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a46:	e00b      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a48:	f7fd fc80 	bl	800134c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b64      	cmp	r3, #100	@ 0x64
 8003a56:	d903      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a5e:	e005      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a60:	4b77      	ldr	r3, [pc, #476]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ed      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d173      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a74:	4b71      	ldr	r3, [pc, #452]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a80:	4053      	eors	r3, r2
 8003a82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d015      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a92:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a96:	4b69      	ldr	r3, [pc, #420]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9a:	4a68      	ldr	r2, [pc, #416]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa2:	4b66      	ldr	r3, [pc, #408]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	4a65      	ldr	r2, [pc, #404]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aae:	4a63      	ldr	r2, [pc, #396]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ab4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ac2:	d118      	bne.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fc42 	bl	800134c <HAL_GetTick>
 8003ac8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003acc:	e00d      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fd fc3d 	bl	800134c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ad8:	1ad2      	subs	r2, r2, r3
 8003ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d903      	bls.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003ae8:	e005      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aea:	4b54      	ldr	r3, [pc, #336]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0eb      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003af6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d129      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0e:	d10e      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003b10:	4b4a      	ldr	r3, [pc, #296]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b20:	091a      	lsrs	r2, r3, #4
 8003b22:	4b48      	ldr	r3, [pc, #288]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	4a45      	ldr	r2, [pc, #276]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	6113      	str	r3, [r2, #16]
 8003b2c:	e005      	b.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003b2e:	4b43      	ldr	r3, [pc, #268]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	4a42      	ldr	r2, [pc, #264]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b38:	6113      	str	r3, [r2, #16]
 8003b3a:	4b40      	ldr	r3, [pc, #256]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b3c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4a:	4a3c      	ldr	r2, [pc, #240]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b50:	e008      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b56:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f002 0301 	and.w	r3, r2, #1
 8003b70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f000 808f 	beq.w	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b8c:	2b28      	cmp	r3, #40	@ 0x28
 8003b8e:	d871      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003b90:	a201      	add	r2, pc, #4	@ (adr r2, 8003b98 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003c7d 	.word	0x08003c7d
 8003b9c:	08003c75 	.word	0x08003c75
 8003ba0:	08003c75 	.word	0x08003c75
 8003ba4:	08003c75 	.word	0x08003c75
 8003ba8:	08003c75 	.word	0x08003c75
 8003bac:	08003c75 	.word	0x08003c75
 8003bb0:	08003c75 	.word	0x08003c75
 8003bb4:	08003c75 	.word	0x08003c75
 8003bb8:	08003c49 	.word	0x08003c49
 8003bbc:	08003c75 	.word	0x08003c75
 8003bc0:	08003c75 	.word	0x08003c75
 8003bc4:	08003c75 	.word	0x08003c75
 8003bc8:	08003c75 	.word	0x08003c75
 8003bcc:	08003c75 	.word	0x08003c75
 8003bd0:	08003c75 	.word	0x08003c75
 8003bd4:	08003c75 	.word	0x08003c75
 8003bd8:	08003c5f 	.word	0x08003c5f
 8003bdc:	08003c75 	.word	0x08003c75
 8003be0:	08003c75 	.word	0x08003c75
 8003be4:	08003c75 	.word	0x08003c75
 8003be8:	08003c75 	.word	0x08003c75
 8003bec:	08003c75 	.word	0x08003c75
 8003bf0:	08003c75 	.word	0x08003c75
 8003bf4:	08003c75 	.word	0x08003c75
 8003bf8:	08003c7d 	.word	0x08003c7d
 8003bfc:	08003c75 	.word	0x08003c75
 8003c00:	08003c75 	.word	0x08003c75
 8003c04:	08003c75 	.word	0x08003c75
 8003c08:	08003c75 	.word	0x08003c75
 8003c0c:	08003c75 	.word	0x08003c75
 8003c10:	08003c75 	.word	0x08003c75
 8003c14:	08003c75 	.word	0x08003c75
 8003c18:	08003c7d 	.word	0x08003c7d
 8003c1c:	08003c75 	.word	0x08003c75
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003c75 	.word	0x08003c75
 8003c28:	08003c75 	.word	0x08003c75
 8003c2c:	08003c75 	.word	0x08003c75
 8003c30:	08003c75 	.word	0x08003c75
 8003c34:	08003c75 	.word	0x08003c75
 8003c38:	08003c7d 	.word	0x08003c7d
 8003c3c:	58024400 	.word	0x58024400
 8003c40:	58024800 	.word	0x58024800
 8003c44:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f000 ffa7 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f84e 	bl	8004d08 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c86:	4bbf      	ldr	r3, [pc, #764]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c94:	4abb      	ldr	r2, [pc, #748]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ca0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f002 0302 	and.w	r3, r2, #2
 8003cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	d041      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cca:	2b05      	cmp	r3, #5
 8003ccc:	d824      	bhi.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003cce:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003ced 	.word	0x08003ced
 8003cdc:	08003d03 	.word	0x08003d03
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d21 	.word	0x08003d21
 8003ce8:	08003d21 	.word	0x08003d21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 ff55 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d00:	e00f      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d06:	3328      	adds	r3, #40	@ 0x28
 8003d08:	2101      	movs	r1, #1
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fffc 	bl	8004d08 <RCCEx_PLL3_Config>
 8003d10:	4603      	mov	r3, r0
 8003d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d16:	e004      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d2a:	4b96      	ldr	r3, [pc, #600]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2e:	f023 0107 	bic.w	r1, r3, #7
 8003d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d38:	4a92      	ldr	r2, [pc, #584]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d3e:	e003      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d44:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d50:	f002 0304 	and.w	r3, r2, #4
 8003d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d5e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d62:	460b      	mov	r3, r1
 8003d64:	4313      	orrs	r3, r2
 8003d66:	d044      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d825      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003d74:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003dc9 	.word	0x08003dc9
 8003d80:	08003d95 	.word	0x08003d95
 8003d84:	08003dab 	.word	0x08003dab
 8003d88:	08003dc9 	.word	0x08003dc9
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003dc9 	.word	0x08003dc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	3308      	adds	r3, #8
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 ff01 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 ffa8 	bl	8004d08 <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dd6:	f023 0107 	bic.w	r1, r3, #7
 8003dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de2:	4a68      	ldr	r2, [pc, #416]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003de8:	e003      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	f002 0320 	and.w	r3, r2, #32
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e08:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	d055      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e1e:	d033      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e24:	d82c      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e2a:	d02f      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e30:	d826      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e36:	d02b      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003e38:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e3c:	d820      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e42:	d012      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e48:	d81a      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d022      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003e4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e52:	d115      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e58:	3308      	adds	r3, #8
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fea1 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e68:	e015      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	3328      	adds	r3, #40	@ 0x28
 8003e70:	2102      	movs	r1, #2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 ff48 	bl	8004d08 <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e86:	e006      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e88:	bf00      	nop
 8003e8a:	e004      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e8c:	bf00      	nop
 8003e8e:	e002      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e90:	bf00      	nop
 8003e92:	e000      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003e94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10b      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9e:	4b39      	ldr	r3, [pc, #228]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eae:	4a35      	ldr	r2, [pc, #212]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003eb4:	e003      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003eca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003ed4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003ed8:	460b      	mov	r3, r1
 8003eda:	4313      	orrs	r3, r2
 8003edc:	d058      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ee6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eea:	d033      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003eec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ef0:	d82c      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ef6:	d02f      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003efc:	d826      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003efe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f02:	d02b      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003f04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f08:	d820      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f0e:	d012      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f14:	d81a      	bhi.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d022      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f1e:	d115      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f24:	3308      	adds	r3, #8
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fe3b 	bl	8004ba4 <RCCEx_PLL2_Config>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f34:	e015      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f3a:	3328      	adds	r3, #40	@ 0x28
 8003f3c:	2102      	movs	r1, #2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fee2 	bl	8004d08 <RCCEx_PLL3_Config>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f52:	e006      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f54:	bf00      	nop
 8003f56:	e004      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f58:	bf00      	nop
 8003f5a:	e002      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f5c:	bf00      	nop
 8003f5e:	e000      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10e      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f6a:	4b06      	ldr	r3, [pc, #24]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f7a:	4a02      	ldr	r2, [pc, #8]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f7c:	430b      	orrs	r3, r1
 8003f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f80:	e006      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003f82:	bf00      	nop
 8003f84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fa6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	d055      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fb8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fbc:	d033      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003fbe:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fc2:	d82c      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fc8:	d02f      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003fca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fce:	d826      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fd0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fd4:	d02b      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003fd6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003fda:	d820      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe0:	d012      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fe6:	d81a      	bhi.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d022      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003fec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ff0:	d115      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fdd2 	bl	8004ba4 <RCCEx_PLL2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004006:	e015      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004008:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400c:	3328      	adds	r3, #40	@ 0x28
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fe79 	bl	8004d08 <RCCEx_PLL3_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800401c:	e00a      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004024:	e006      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004026:	bf00      	nop
 8004028:	e004      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800402a:	bf00      	nop
 800402c:	e002      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800402e:	bf00      	nop
 8004030:	e000      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004032:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800403c:	4ba0      	ldr	r3, [pc, #640]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004040:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004048:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800404c:	4a9c      	ldr	r2, [pc, #624]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800404e:	430b      	orrs	r3, r1
 8004050:	6593      	str	r3, [r2, #88]	@ 0x58
 8004052:	e003      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004058:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f002 0308 	and.w	r3, r2, #8
 8004068:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800406c:	2300      	movs	r3, #0
 800406e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004072:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004076:	460b      	mov	r3, r1
 8004078:	4313      	orrs	r3, r2
 800407a:	d01e      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800407c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800408a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800408e:	3328      	adds	r3, #40	@ 0x28
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fe38 	bl	8004d08 <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80040a4:	4b86      	ldr	r3, [pc, #536]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b4:	4a82      	ldr	r2, [pc, #520]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c2:	f002 0310 	and.w	r3, r2, #16
 80040c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040ca:	2300      	movs	r3, #0
 80040cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040d4:	460b      	mov	r3, r1
 80040d6:	4313      	orrs	r3, r2
 80040d8:	d01e      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80040da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040e6:	d10c      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ec:	3328      	adds	r3, #40	@ 0x28
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fe09 	bl	8004d08 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004102:	4b6f      	ldr	r3, [pc, #444]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800410a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004112:	4a6b      	ldr	r2, [pc, #428]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004114:	430b      	orrs	r3, r1
 8004116:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800411c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004120:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004124:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004126:	2300      	movs	r3, #0
 8004128:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800412a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800412e:	460b      	mov	r3, r1
 8004130:	4313      	orrs	r3, r2
 8004132:	d03e      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004138:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800413c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004140:	d022      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004142:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004146:	d81b      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004148:	2b00      	cmp	r3, #0
 800414a:	d003      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004150:	d00b      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004152:	e015      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004158:	3308      	adds	r3, #8
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd21 	bl	8004ba4 <RCCEx_PLL2_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004168:	e00f      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800416a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416e:	3328      	adds	r3, #40	@ 0x28
 8004170:	2102      	movs	r1, #2
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fdc8 	bl	8004d08 <RCCEx_PLL3_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800417e:	e004      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004192:	4b4b      	ldr	r3, [pc, #300]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800419a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041a2:	4a47      	ldr	r2, [pc, #284]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a8:	e003      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041be:	673b      	str	r3, [r7, #112]	@ 0x70
 80041c0:	2300      	movs	r3, #0
 80041c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80041c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80041c8:	460b      	mov	r3, r1
 80041ca:	4313      	orrs	r3, r2
 80041cc:	d03b      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041da:	d01f      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80041dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041e0:	d818      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e6:	d003      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80041e8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041ec:	d007      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80041ee:	e011      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f0:	4b33      	ldr	r3, [pc, #204]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f4:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041fc:	e00f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004202:	3328      	adds	r3, #40	@ 0x28
 8004204:	2101      	movs	r1, #1
 8004206:	4618      	mov	r0, r3
 8004208:	f000 fd7e 	bl	8004d08 <RCCEx_PLL3_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800422e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004232:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004236:	4a22      	ldr	r2, [pc, #136]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004238:	430b      	orrs	r3, r1
 800423a:	6553      	str	r3, [r2, #84]	@ 0x54
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004242:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004252:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004254:	2300      	movs	r3, #0
 8004256:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004258:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d034      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004270:	d007      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004272:	e011      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004274:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	4a11      	ldr	r2, [pc, #68]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800427a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800427e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004280:	e00e      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004282:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004286:	3308      	adds	r3, #8
 8004288:	2102      	movs	r1, #2
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fc8a 	bl	8004ba4 <RCCEx_PLL2_Config>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004296:	e003      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800429e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10d      	bne.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042a8:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b6:	4a02      	ldr	r2, [pc, #8]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042b8:	430b      	orrs	r3, r1
 80042ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042bc:	e006      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80042be:	bf00      	nop
 80042c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042c8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80042da:	2300      	movs	r3, #0
 80042dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80042de:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042e2:	460b      	mov	r3, r1
 80042e4:	4313      	orrs	r3, r2
 80042e6:	d00c      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ec:	3328      	adds	r3, #40	@ 0x28
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fd09 	bl	8004d08 <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800430e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004310:	2300      	movs	r3, #0
 8004312:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004314:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d036      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800431e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004328:	d018      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800432a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800432e:	d811      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004334:	d014      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800433a:	d80b      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d011      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004344:	d106      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004346:	4bb7      	ldr	r3, [pc, #732]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	4ab6      	ldr	r2, [pc, #728]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800434c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004350:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004352:	e008      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800435a:	e004      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10a      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436e:	4bad      	ldr	r3, [pc, #692]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004372:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800437c:	4aa9      	ldr	r2, [pc, #676]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800437e:	430b      	orrs	r3, r1
 8004380:	6553      	str	r3, [r2, #84]	@ 0x54
 8004382:	e003      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800438c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004398:	653b      	str	r3, [r7, #80]	@ 0x50
 800439a:	2300      	movs	r3, #0
 800439c:	657b      	str	r3, [r7, #84]	@ 0x54
 800439e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043a2:	460b      	mov	r3, r1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	d009      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	4a9b      	ldr	r2, [pc, #620]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043ca:	2300      	movs	r3, #0
 80043cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043d2:	460b      	mov	r3, r1
 80043d4:	4313      	orrs	r3, r2
 80043d6:	d009      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d8:	4b92      	ldr	r3, [pc, #584]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043dc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043e6:	4a8f      	ldr	r2, [pc, #572]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043fa:	2300      	movs	r3, #0
 80043fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80043fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d00e      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004408:	4b86      	ldr	r3, [pc, #536]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	4a85      	ldr	r2, [pc, #532]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800440e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004412:	6113      	str	r3, [r2, #16]
 8004414:	4b83      	ldr	r3, [pc, #524]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004416:	6919      	ldr	r1, [r3, #16]
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004420:	4a80      	ldr	r2, [pc, #512]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004422:	430b      	orrs	r3, r1
 8004424:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004432:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004434:	2300      	movs	r3, #0
 8004436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004438:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d009      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004442:	4b78      	ldr	r3, [pc, #480]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004446:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800444a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800444e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004450:	4a74      	ldr	r2, [pc, #464]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004452:	430b      	orrs	r3, r1
 8004454:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800445e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004462:	633b      	str	r3, [r7, #48]	@ 0x30
 8004464:	2300      	movs	r3, #0
 8004466:	637b      	str	r3, [r7, #52]	@ 0x34
 8004468:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800446c:	460b      	mov	r3, r1
 800446e:	4313      	orrs	r3, r2
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004472:	4b6c      	ldr	r3, [pc, #432]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004476:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800447a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004482:	4a68      	ldr	r2, [pc, #416]	@ (8004624 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004484:	430b      	orrs	r3, r1
 8004486:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	2100      	movs	r1, #0
 8004492:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800449e:	460b      	mov	r3, r1
 80044a0:	4313      	orrs	r3, r2
 80044a2:	d011      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a8:	3308      	adds	r3, #8
 80044aa:	2100      	movs	r1, #0
 80044ac:	4618      	mov	r0, r3
 80044ae:	f000 fb79 	bl	8004ba4 <RCCEx_PLL2_Config>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	2100      	movs	r1, #0
 80044d2:	6239      	str	r1, [r7, #32]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044de:	460b      	mov	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	d011      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e8:	3308      	adds	r3, #8
 80044ea:	2101      	movs	r1, #1
 80044ec:	4618      	mov	r0, r3
 80044ee:	f000 fb59 	bl	8004ba4 <RCCEx_PLL2_Config>
 80044f2:	4603      	mov	r3, r0
 80044f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80044f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	2100      	movs	r1, #0
 8004512:	61b9      	str	r1, [r7, #24]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	d011      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004528:	3308      	adds	r3, #8
 800452a:	2102      	movs	r1, #2
 800452c:	4618      	mov	r0, r3
 800452e:	f000 fb39 	bl	8004ba4 <RCCEx_PLL2_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004538:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	2100      	movs	r1, #0
 8004552:	6139      	str	r1, [r7, #16]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d011      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004568:	3328      	adds	r3, #40	@ 0x28
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fbcb 	bl	8004d08 <RCCEx_PLL3_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	2100      	movs	r1, #0
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	f003 0310 	and.w	r3, r3, #16
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800459e:	460b      	mov	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	d011      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a8:	3328      	adds	r3, #40	@ 0x28
 80045aa:	2101      	movs	r1, #1
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fbab 	bl	8004d08 <RCCEx_PLL3_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	2100      	movs	r1, #0
 80045d2:	6039      	str	r1, [r7, #0]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d011      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e8:	3328      	adds	r3, #40	@ 0x28
 80045ea:	2102      	movs	r1, #2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fb8b 	bl	8004d08 <RCCEx_PLL3_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004608:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
}
 8004616:	4618      	mov	r0, r3
 8004618:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800461c:	46bd      	mov	sp, r7
 800461e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004622:	bf00      	nop
 8004624:	58024400 	.word	0x58024400

08004628 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800462c:	f7fe fe00 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8004630:	4602      	mov	r2, r0
 8004632:	4b06      	ldr	r3, [pc, #24]	@ (800464c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4904      	ldr	r1, [pc, #16]	@ (8004650 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800463e:	5ccb      	ldrb	r3, [r1, r3]
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004648:	4618      	mov	r0, r3
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58024400 	.word	0x58024400
 8004650:	0800629c 	.word	0x0800629c

08004654 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004654:	b480      	push	{r7}
 8004656:	b089      	sub	sp, #36	@ 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800465c:	4ba1      	ldr	r3, [pc, #644]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004666:	4b9f      	ldr	r3, [pc, #636]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	0b1b      	lsrs	r3, r3, #12
 800466c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004670:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004672:	4b9c      	ldr	r3, [pc, #624]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800467e:	4b99      	ldr	r3, [pc, #612]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004682:	08db      	lsrs	r3, r3, #3
 8004684:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	fb02 f303 	mul.w	r3, r2, r3
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8111 	beq.w	80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f000 8083 	beq.w	80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	f200 80a1 	bhi.w	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d056      	beq.n	800476c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046be:	e099      	b.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c0:	4b88      	ldr	r3, [pc, #544]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d02d      	beq.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046cc:	4b85      	ldr	r3, [pc, #532]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	08db      	lsrs	r3, r3, #3
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	4a84      	ldr	r2, [pc, #528]	@ (80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
 80046dc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	ee07 3a90 	vmov	s15, r3
 80046e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	ee07 3a90 	vmov	s15, r3
 80046ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b7b      	ldr	r3, [pc, #492]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004726:	e087      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b6a      	ldr	r3, [pc, #424]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a03 	vldr	s12, [r7, #12]
 800474e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800476a:	e065      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b59      	ldr	r3, [pc, #356]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004792:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ae:	e043      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b48      	ldr	r3, [pc, #288]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f2:	e021      	b.n	8004838 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004806:	4b37      	ldr	r3, [pc, #220]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004816:	ed97 6a03 	vldr	s12, [r7, #12]
 800481a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800481e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800482a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800482e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004836:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004838:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	0a5b      	lsrs	r3, r3, #9
 800483e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004842:	ee07 3a90 	vmov	s15, r3
 8004846:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800484e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004852:	edd7 6a07 	vldr	s13, [r7, #28]
 8004856:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800485e:	ee17 2a90 	vmov	r2, s15
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004866:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004870:	ee07 3a90 	vmov	s15, r3
 8004874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004878:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800487c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004880:	edd7 6a07 	vldr	s13, [r7, #28]
 8004884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488c:	ee17 2a90 	vmov	r2, s15
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004894:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004898:	0e1b      	lsrs	r3, r3, #24
 800489a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800489e:	ee07 3a90 	vmov	s15, r3
 80048a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80048b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ba:	ee17 2a90 	vmov	r2, s15
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048c2:	e008      	b.n	80048d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
}
 80048d6:	bf00      	nop
 80048d8:	3724      	adds	r7, #36	@ 0x24
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	03d09000 	.word	0x03d09000
 80048ec:	46000000 	.word	0x46000000
 80048f0:	4c742400 	.word	0x4c742400
 80048f4:	4a742400 	.word	0x4a742400
 80048f8:	4af42400 	.word	0x4af42400

080048fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b089      	sub	sp, #36	@ 0x24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004904:	4ba1      	ldr	r3, [pc, #644]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800490e:	4b9f      	ldr	r3, [pc, #636]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	0d1b      	lsrs	r3, r3, #20
 8004914:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004918:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800491a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004926:	4b99      	ldr	r3, [pc, #612]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	08db      	lsrs	r3, r3, #3
 800492c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004930:	693a      	ldr	r2, [r7, #16]
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800493e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8111 	beq.w	8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b02      	cmp	r3, #2
 800494e:	f000 8083 	beq.w	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b02      	cmp	r3, #2
 8004956:	f200 80a1 	bhi.w	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d056      	beq.n	8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004966:	e099      	b.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004968:	4b88      	ldr	r3, [pc, #544]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0320 	and.w	r3, r3, #32
 8004970:	2b00      	cmp	r3, #0
 8004972:	d02d      	beq.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004974:	4b85      	ldr	r3, [pc, #532]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	08db      	lsrs	r3, r3, #3
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	4a84      	ldr	r2, [pc, #528]	@ (8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004980:	fa22 f303 	lsr.w	r3, r2, r3
 8004984:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	ee07 3a90 	vmov	s15, r3
 800498c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	ee07 3a90 	vmov	s15, r3
 8004996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049ce:	e087      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a12:	e065      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b59      	ldr	r3, [pc, #356]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a56:	e043      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b48      	ldr	r3, [pc, #288]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9a:	e021      	b.n	8004ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	ee07 3a90 	vmov	s15, r3
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aae:	4b37      	ldr	r3, [pc, #220]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab6:	ee07 3a90 	vmov	s15, r3
 8004aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ac2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ade:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ae0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae4:	0a5b      	lsrs	r3, r3, #9
 8004ae6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aea:	ee07 3a90 	vmov	s15, r3
 8004aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004af6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004afe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b06:	ee17 2a90 	vmov	r2, s15
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	0c1b      	lsrs	r3, r3, #16
 8004b14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b28:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b34:	ee17 2a90 	vmov	r2, s15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b3c:	4b13      	ldr	r3, [pc, #76]	@ (8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	0e1b      	lsrs	r3, r3, #24
 8004b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b46:	ee07 3a90 	vmov	s15, r3
 8004b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	ee17 2a90 	vmov	r2, s15
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b6a:	e008      	b.n	8004b7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	609a      	str	r2, [r3, #8]
}
 8004b7e:	bf00      	nop
 8004b80:	3724      	adds	r7, #36	@ 0x24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	03d09000 	.word	0x03d09000
 8004b94:	46000000 	.word	0x46000000
 8004b98:	4c742400 	.word	0x4c742400
 8004b9c:	4a742400 	.word	0x4a742400
 8004ba0:	4af42400 	.word	0x4af42400

08004ba4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bb2:	4b53      	ldr	r3, [pc, #332]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb6:	f003 0303 	and.w	r3, r3, #3
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	d101      	bne.n	8004bc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e099      	b.n	8004cf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a4e      	ldr	r2, [pc, #312]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bc8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bce:	f7fc fbbd 	bl	800134c <HAL_GetTick>
 8004bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bd4:	e008      	b.n	8004be8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bd6:	f7fc fbb9 	bl	800134c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e086      	b.n	8004cf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004be8:	4b45      	ldr	r3, [pc, #276]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f0      	bne.n	8004bd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bf4:	4b42      	ldr	r3, [pc, #264]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	031b      	lsls	r3, r3, #12
 8004c02:	493f      	ldr	r1, [pc, #252]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	3b01      	subs	r3, #1
 8004c18:	025b      	lsls	r3, r3, #9
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	061b      	lsls	r3, r3, #24
 8004c34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c38:	4931      	ldr	r1, [pc, #196]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c3e:	4b30      	ldr	r3, [pc, #192]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	492d      	ldr	r1, [pc, #180]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c50:	4b2b      	ldr	r3, [pc, #172]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	f023 0220 	bic.w	r2, r3, #32
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	4928      	ldr	r1, [pc, #160]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c62:	4b27      	ldr	r3, [pc, #156]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c66:	4a26      	ldr	r2, [pc, #152]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	f023 0310 	bic.w	r3, r3, #16
 8004c6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c6e:	4b24      	ldr	r3, [pc, #144]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c72:	4b24      	ldr	r3, [pc, #144]	@ (8004d04 <RCCEx_PLL2_Config+0x160>)
 8004c74:	4013      	ands	r3, r2
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	69d2      	ldr	r2, [r2, #28]
 8004c7a:	00d2      	lsls	r2, r2, #3
 8004c7c:	4920      	ldr	r1, [pc, #128]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c82:	4b1f      	ldr	r3, [pc, #124]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	4a1e      	ldr	r2, [pc, #120]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	f043 0310 	orr.w	r3, r3, #16
 8004c8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c94:	4b1a      	ldr	r3, [pc, #104]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c98:	4a19      	ldr	r2, [pc, #100]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004c9a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c9e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ca0:	e00f      	b.n	8004cc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d106      	bne.n	8004cb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ca8:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	4a14      	ldr	r2, [pc, #80]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cb4:	e005      	b.n	8004cc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cb6:	4b12      	ldr	r3, [pc, #72]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	4a11      	ldr	r2, [pc, #68]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cc8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cce:	f7fc fb3d 	bl	800134c <HAL_GetTick>
 8004cd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cd4:	e008      	b.n	8004ce8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cd6:	f7fc fb39 	bl	800134c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e006      	b.n	8004cf6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ce8:	4b05      	ldr	r3, [pc, #20]	@ (8004d00 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	58024400 	.word	0x58024400
 8004d04:	ffff0007 	.word	0xffff0007

08004d08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d16:	4b53      	ldr	r3, [pc, #332]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	2b03      	cmp	r3, #3
 8004d20:	d101      	bne.n	8004d26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e099      	b.n	8004e5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d26:	4b4f      	ldr	r3, [pc, #316]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d32:	f7fc fb0b 	bl	800134c <HAL_GetTick>
 8004d36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d38:	e008      	b.n	8004d4c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d3a:	f7fc fb07 	bl	800134c <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e086      	b.n	8004e5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d4c:	4b45      	ldr	r3, [pc, #276]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1f0      	bne.n	8004d3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d58:	4b42      	ldr	r3, [pc, #264]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	051b      	lsls	r3, r3, #20
 8004d66:	493f      	ldr	r1, [pc, #252]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	025b      	lsls	r3, r3, #9
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d9c:	4931      	ldr	r1, [pc, #196]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004da2:	4b30      	ldr	r3, [pc, #192]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	492d      	ldr	r1, [pc, #180]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004db4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	4928      	ldr	r1, [pc, #160]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dc6:	4b27      	ldr	r3, [pc, #156]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	4a26      	ldr	r2, [pc, #152]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dd2:	4b24      	ldr	r3, [pc, #144]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dd6:	4b24      	ldr	r3, [pc, #144]	@ (8004e68 <RCCEx_PLL3_Config+0x160>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	69d2      	ldr	r2, [r2, #28]
 8004dde:	00d2      	lsls	r2, r2, #3
 8004de0:	4920      	ldr	r1, [pc, #128]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004de6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dea:	4a1e      	ldr	r2, [pc, #120]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d106      	bne.n	8004e06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004df8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfc:	4a19      	ldr	r2, [pc, #100]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004dfe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e04:	e00f      	b.n	8004e26 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d106      	bne.n	8004e1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e0c:	4b15      	ldr	r3, [pc, #84]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	4a14      	ldr	r2, [pc, #80]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e12:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e18:	e005      	b.n	8004e26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e1a:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	4a11      	ldr	r2, [pc, #68]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e24:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e26:	4b0f      	ldr	r3, [pc, #60]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fc fa8b 	bl	800134c <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e38:	e008      	b.n	8004e4c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e3a:	f7fc fa87 	bl	800134c <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e006      	b.n	8004e5a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	58024400 	.word	0x58024400
 8004e68:	ffff0007 	.word	0xffff0007

08004e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e042      	b.n	8004f04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fc f899 	bl	8000fc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2224      	movs	r2, #36	@ 0x24
 8004e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fe94 	bl	8005be4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f825 	bl	8004f0c <UART_SetConfig>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e01b      	b.n	8004f04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 ff13 	bl	8005d28 <UART_CheckIdleState>
 8004f02:	4603      	mov	r3, r0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f10:	b092      	sub	sp, #72	@ 0x48
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	431a      	orrs	r2, r3
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4bbe      	ldr	r3, [pc, #760]	@ (8005234 <UART_SetConfig+0x328>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4ab3      	ldr	r2, [pc, #716]	@ (8005238 <UART_SetConfig+0x32c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d004      	beq.n	8004f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f74:	4313      	orrs	r3, r2
 8004f76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689a      	ldr	r2, [r3, #8]
 8004f7e:	4baf      	ldr	r3, [pc, #700]	@ (800523c <UART_SetConfig+0x330>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	f023 010f 	bic.w	r1, r3, #15
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4aa6      	ldr	r2, [pc, #664]	@ (8005240 <UART_SetConfig+0x334>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d177      	bne.n	800509c <UART_SetConfig+0x190>
 8004fac:	4ba5      	ldr	r3, [pc, #660]	@ (8005244 <UART_SetConfig+0x338>)
 8004fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fb4:	2b28      	cmp	r3, #40	@ 0x28
 8004fb6:	d86d      	bhi.n	8005094 <UART_SetConfig+0x188>
 8004fb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <UART_SetConfig+0xb4>)
 8004fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fbe:	bf00      	nop
 8004fc0:	08005065 	.word	0x08005065
 8004fc4:	08005095 	.word	0x08005095
 8004fc8:	08005095 	.word	0x08005095
 8004fcc:	08005095 	.word	0x08005095
 8004fd0:	08005095 	.word	0x08005095
 8004fd4:	08005095 	.word	0x08005095
 8004fd8:	08005095 	.word	0x08005095
 8004fdc:	08005095 	.word	0x08005095
 8004fe0:	0800506d 	.word	0x0800506d
 8004fe4:	08005095 	.word	0x08005095
 8004fe8:	08005095 	.word	0x08005095
 8004fec:	08005095 	.word	0x08005095
 8004ff0:	08005095 	.word	0x08005095
 8004ff4:	08005095 	.word	0x08005095
 8004ff8:	08005095 	.word	0x08005095
 8004ffc:	08005095 	.word	0x08005095
 8005000:	08005075 	.word	0x08005075
 8005004:	08005095 	.word	0x08005095
 8005008:	08005095 	.word	0x08005095
 800500c:	08005095 	.word	0x08005095
 8005010:	08005095 	.word	0x08005095
 8005014:	08005095 	.word	0x08005095
 8005018:	08005095 	.word	0x08005095
 800501c:	08005095 	.word	0x08005095
 8005020:	0800507d 	.word	0x0800507d
 8005024:	08005095 	.word	0x08005095
 8005028:	08005095 	.word	0x08005095
 800502c:	08005095 	.word	0x08005095
 8005030:	08005095 	.word	0x08005095
 8005034:	08005095 	.word	0x08005095
 8005038:	08005095 	.word	0x08005095
 800503c:	08005095 	.word	0x08005095
 8005040:	08005085 	.word	0x08005085
 8005044:	08005095 	.word	0x08005095
 8005048:	08005095 	.word	0x08005095
 800504c:	08005095 	.word	0x08005095
 8005050:	08005095 	.word	0x08005095
 8005054:	08005095 	.word	0x08005095
 8005058:	08005095 	.word	0x08005095
 800505c:	08005095 	.word	0x08005095
 8005060:	0800508d 	.word	0x0800508d
 8005064:	2301      	movs	r3, #1
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e326      	b.n	80056ba <UART_SetConfig+0x7ae>
 800506c:	2304      	movs	r3, #4
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e322      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005074:	2308      	movs	r3, #8
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e31e      	b.n	80056ba <UART_SetConfig+0x7ae>
 800507c:	2310      	movs	r3, #16
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e31a      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005084:	2320      	movs	r3, #32
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e316      	b.n	80056ba <UART_SetConfig+0x7ae>
 800508c:	2340      	movs	r3, #64	@ 0x40
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e312      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e30e      	b.n	80056ba <UART_SetConfig+0x7ae>
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a69      	ldr	r2, [pc, #420]	@ (8005248 <UART_SetConfig+0x33c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d130      	bne.n	8005108 <UART_SetConfig+0x1fc>
 80050a6:	4b67      	ldr	r3, [pc, #412]	@ (8005244 <UART_SetConfig+0x338>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b05      	cmp	r3, #5
 80050b0:	d826      	bhi.n	8005100 <UART_SetConfig+0x1f4>
 80050b2:	a201      	add	r2, pc, #4	@ (adr r2, 80050b8 <UART_SetConfig+0x1ac>)
 80050b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b8:	080050d1 	.word	0x080050d1
 80050bc:	080050d9 	.word	0x080050d9
 80050c0:	080050e1 	.word	0x080050e1
 80050c4:	080050e9 	.word	0x080050e9
 80050c8:	080050f1 	.word	0x080050f1
 80050cc:	080050f9 	.word	0x080050f9
 80050d0:	2300      	movs	r3, #0
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e2f0      	b.n	80056ba <UART_SetConfig+0x7ae>
 80050d8:	2304      	movs	r3, #4
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e2ec      	b.n	80056ba <UART_SetConfig+0x7ae>
 80050e0:	2308      	movs	r3, #8
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e2e8      	b.n	80056ba <UART_SetConfig+0x7ae>
 80050e8:	2310      	movs	r3, #16
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e2e4      	b.n	80056ba <UART_SetConfig+0x7ae>
 80050f0:	2320      	movs	r3, #32
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e2e0      	b.n	80056ba <UART_SetConfig+0x7ae>
 80050f8:	2340      	movs	r3, #64	@ 0x40
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e2dc      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005100:	2380      	movs	r3, #128	@ 0x80
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e2d8      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a4f      	ldr	r2, [pc, #316]	@ (800524c <UART_SetConfig+0x340>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d130      	bne.n	8005174 <UART_SetConfig+0x268>
 8005112:	4b4c      	ldr	r3, [pc, #304]	@ (8005244 <UART_SetConfig+0x338>)
 8005114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005116:	f003 0307 	and.w	r3, r3, #7
 800511a:	2b05      	cmp	r3, #5
 800511c:	d826      	bhi.n	800516c <UART_SetConfig+0x260>
 800511e:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <UART_SetConfig+0x218>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	0800513d 	.word	0x0800513d
 8005128:	08005145 	.word	0x08005145
 800512c:	0800514d 	.word	0x0800514d
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	2300      	movs	r3, #0
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e2ba      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e2b6      	b.n	80056ba <UART_SetConfig+0x7ae>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e2b2      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e2ae      	b.n	80056ba <UART_SetConfig+0x7ae>
 800515c:	2320      	movs	r3, #32
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e2aa      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005164:	2340      	movs	r3, #64	@ 0x40
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e2a6      	b.n	80056ba <UART_SetConfig+0x7ae>
 800516c:	2380      	movs	r3, #128	@ 0x80
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e2a2      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a35      	ldr	r2, [pc, #212]	@ (8005250 <UART_SetConfig+0x344>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d130      	bne.n	80051e0 <UART_SetConfig+0x2d4>
 800517e:	4b31      	ldr	r3, [pc, #196]	@ (8005244 <UART_SetConfig+0x338>)
 8005180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b05      	cmp	r3, #5
 8005188:	d826      	bhi.n	80051d8 <UART_SetConfig+0x2cc>
 800518a:	a201      	add	r2, pc, #4	@ (adr r2, 8005190 <UART_SetConfig+0x284>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051a9 	.word	0x080051a9
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051b9 	.word	0x080051b9
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e284      	b.n	80056ba <UART_SetConfig+0x7ae>
 80051b0:	2304      	movs	r3, #4
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e280      	b.n	80056ba <UART_SetConfig+0x7ae>
 80051b8:	2308      	movs	r3, #8
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e27c      	b.n	80056ba <UART_SetConfig+0x7ae>
 80051c0:	2310      	movs	r3, #16
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e278      	b.n	80056ba <UART_SetConfig+0x7ae>
 80051c8:	2320      	movs	r3, #32
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ce:	e274      	b.n	80056ba <UART_SetConfig+0x7ae>
 80051d0:	2340      	movs	r3, #64	@ 0x40
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e270      	b.n	80056ba <UART_SetConfig+0x7ae>
 80051d8:	2380      	movs	r3, #128	@ 0x80
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051de:	e26c      	b.n	80056ba <UART_SetConfig+0x7ae>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005254 <UART_SetConfig+0x348>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d142      	bne.n	8005270 <UART_SetConfig+0x364>
 80051ea:	4b16      	ldr	r3, [pc, #88]	@ (8005244 <UART_SetConfig+0x338>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	d838      	bhi.n	8005268 <UART_SetConfig+0x35c>
 80051f6:	a201      	add	r2, pc, #4	@ (adr r2, 80051fc <UART_SetConfig+0x2f0>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005215 	.word	0x08005215
 8005200:	0800521d 	.word	0x0800521d
 8005204:	08005225 	.word	0x08005225
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005259 	.word	0x08005259
 8005210:	08005261 	.word	0x08005261
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e24e      	b.n	80056ba <UART_SetConfig+0x7ae>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e24a      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e246      	b.n	80056ba <UART_SetConfig+0x7ae>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e242      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005234:	cfff69f3 	.word	0xcfff69f3
 8005238:	58000c00 	.word	0x58000c00
 800523c:	11fff4ff 	.word	0x11fff4ff
 8005240:	40011000 	.word	0x40011000
 8005244:	58024400 	.word	0x58024400
 8005248:	40004400 	.word	0x40004400
 800524c:	40004800 	.word	0x40004800
 8005250:	40004c00 	.word	0x40004c00
 8005254:	40005000 	.word	0x40005000
 8005258:	2320      	movs	r3, #32
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e22c      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005260:	2340      	movs	r3, #64	@ 0x40
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e228      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005268:	2380      	movs	r3, #128	@ 0x80
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e224      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4ab1      	ldr	r2, [pc, #708]	@ (800553c <UART_SetConfig+0x630>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d176      	bne.n	8005368 <UART_SetConfig+0x45c>
 800527a:	4bb1      	ldr	r3, [pc, #708]	@ (8005540 <UART_SetConfig+0x634>)
 800527c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800527e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005282:	2b28      	cmp	r3, #40	@ 0x28
 8005284:	d86c      	bhi.n	8005360 <UART_SetConfig+0x454>
 8005286:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <UART_SetConfig+0x380>)
 8005288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528c:	08005331 	.word	0x08005331
 8005290:	08005361 	.word	0x08005361
 8005294:	08005361 	.word	0x08005361
 8005298:	08005361 	.word	0x08005361
 800529c:	08005361 	.word	0x08005361
 80052a0:	08005361 	.word	0x08005361
 80052a4:	08005361 	.word	0x08005361
 80052a8:	08005361 	.word	0x08005361
 80052ac:	08005339 	.word	0x08005339
 80052b0:	08005361 	.word	0x08005361
 80052b4:	08005361 	.word	0x08005361
 80052b8:	08005361 	.word	0x08005361
 80052bc:	08005361 	.word	0x08005361
 80052c0:	08005361 	.word	0x08005361
 80052c4:	08005361 	.word	0x08005361
 80052c8:	08005361 	.word	0x08005361
 80052cc:	08005341 	.word	0x08005341
 80052d0:	08005361 	.word	0x08005361
 80052d4:	08005361 	.word	0x08005361
 80052d8:	08005361 	.word	0x08005361
 80052dc:	08005361 	.word	0x08005361
 80052e0:	08005361 	.word	0x08005361
 80052e4:	08005361 	.word	0x08005361
 80052e8:	08005361 	.word	0x08005361
 80052ec:	08005349 	.word	0x08005349
 80052f0:	08005361 	.word	0x08005361
 80052f4:	08005361 	.word	0x08005361
 80052f8:	08005361 	.word	0x08005361
 80052fc:	08005361 	.word	0x08005361
 8005300:	08005361 	.word	0x08005361
 8005304:	08005361 	.word	0x08005361
 8005308:	08005361 	.word	0x08005361
 800530c:	08005351 	.word	0x08005351
 8005310:	08005361 	.word	0x08005361
 8005314:	08005361 	.word	0x08005361
 8005318:	08005361 	.word	0x08005361
 800531c:	08005361 	.word	0x08005361
 8005320:	08005361 	.word	0x08005361
 8005324:	08005361 	.word	0x08005361
 8005328:	08005361 	.word	0x08005361
 800532c:	08005359 	.word	0x08005359
 8005330:	2301      	movs	r3, #1
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e1c0      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005338:	2304      	movs	r3, #4
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e1bc      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005340:	2308      	movs	r3, #8
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e1b8      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005348:	2310      	movs	r3, #16
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e1b4      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005350:	2320      	movs	r3, #32
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e1b0      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005358:	2340      	movs	r3, #64	@ 0x40
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e1ac      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005360:	2380      	movs	r3, #128	@ 0x80
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e1a8      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a75      	ldr	r2, [pc, #468]	@ (8005544 <UART_SetConfig+0x638>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d130      	bne.n	80053d4 <UART_SetConfig+0x4c8>
 8005372:	4b73      	ldr	r3, [pc, #460]	@ (8005540 <UART_SetConfig+0x634>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005376:	f003 0307 	and.w	r3, r3, #7
 800537a:	2b05      	cmp	r3, #5
 800537c:	d826      	bhi.n	80053cc <UART_SetConfig+0x4c0>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <UART_SetConfig+0x478>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	0800539d 	.word	0x0800539d
 8005388:	080053a5 	.word	0x080053a5
 800538c:	080053ad 	.word	0x080053ad
 8005390:	080053b5 	.word	0x080053b5
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053c5 	.word	0x080053c5
 800539c:	2300      	movs	r3, #0
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e18a      	b.n	80056ba <UART_SetConfig+0x7ae>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e186      	b.n	80056ba <UART_SetConfig+0x7ae>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e182      	b.n	80056ba <UART_SetConfig+0x7ae>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e17e      	b.n	80056ba <UART_SetConfig+0x7ae>
 80053bc:	2320      	movs	r3, #32
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e17a      	b.n	80056ba <UART_SetConfig+0x7ae>
 80053c4:	2340      	movs	r3, #64	@ 0x40
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e176      	b.n	80056ba <UART_SetConfig+0x7ae>
 80053cc:	2380      	movs	r3, #128	@ 0x80
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e172      	b.n	80056ba <UART_SetConfig+0x7ae>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a5b      	ldr	r2, [pc, #364]	@ (8005548 <UART_SetConfig+0x63c>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d130      	bne.n	8005440 <UART_SetConfig+0x534>
 80053de:	4b58      	ldr	r3, [pc, #352]	@ (8005540 <UART_SetConfig+0x634>)
 80053e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	2b05      	cmp	r3, #5
 80053e8:	d826      	bhi.n	8005438 <UART_SetConfig+0x52c>
 80053ea:	a201      	add	r2, pc, #4	@ (adr r2, 80053f0 <UART_SetConfig+0x4e4>)
 80053ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f0:	08005409 	.word	0x08005409
 80053f4:	08005411 	.word	0x08005411
 80053f8:	08005419 	.word	0x08005419
 80053fc:	08005421 	.word	0x08005421
 8005400:	08005429 	.word	0x08005429
 8005404:	08005431 	.word	0x08005431
 8005408:	2300      	movs	r3, #0
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e154      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005410:	2304      	movs	r3, #4
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e150      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005418:	2308      	movs	r3, #8
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e14c      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005420:	2310      	movs	r3, #16
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e148      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005428:	2320      	movs	r3, #32
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e144      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005430:	2340      	movs	r3, #64	@ 0x40
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e140      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005438:	2380      	movs	r3, #128	@ 0x80
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e13c      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a41      	ldr	r2, [pc, #260]	@ (800554c <UART_SetConfig+0x640>)
 8005446:	4293      	cmp	r3, r2
 8005448:	f040 8082 	bne.w	8005550 <UART_SetConfig+0x644>
 800544c:	4b3c      	ldr	r3, [pc, #240]	@ (8005540 <UART_SetConfig+0x634>)
 800544e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005450:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005454:	2b28      	cmp	r3, #40	@ 0x28
 8005456:	d86d      	bhi.n	8005534 <UART_SetConfig+0x628>
 8005458:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <UART_SetConfig+0x554>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005505 	.word	0x08005505
 8005464:	08005535 	.word	0x08005535
 8005468:	08005535 	.word	0x08005535
 800546c:	08005535 	.word	0x08005535
 8005470:	08005535 	.word	0x08005535
 8005474:	08005535 	.word	0x08005535
 8005478:	08005535 	.word	0x08005535
 800547c:	08005535 	.word	0x08005535
 8005480:	0800550d 	.word	0x0800550d
 8005484:	08005535 	.word	0x08005535
 8005488:	08005535 	.word	0x08005535
 800548c:	08005535 	.word	0x08005535
 8005490:	08005535 	.word	0x08005535
 8005494:	08005535 	.word	0x08005535
 8005498:	08005535 	.word	0x08005535
 800549c:	08005535 	.word	0x08005535
 80054a0:	08005515 	.word	0x08005515
 80054a4:	08005535 	.word	0x08005535
 80054a8:	08005535 	.word	0x08005535
 80054ac:	08005535 	.word	0x08005535
 80054b0:	08005535 	.word	0x08005535
 80054b4:	08005535 	.word	0x08005535
 80054b8:	08005535 	.word	0x08005535
 80054bc:	08005535 	.word	0x08005535
 80054c0:	0800551d 	.word	0x0800551d
 80054c4:	08005535 	.word	0x08005535
 80054c8:	08005535 	.word	0x08005535
 80054cc:	08005535 	.word	0x08005535
 80054d0:	08005535 	.word	0x08005535
 80054d4:	08005535 	.word	0x08005535
 80054d8:	08005535 	.word	0x08005535
 80054dc:	08005535 	.word	0x08005535
 80054e0:	08005525 	.word	0x08005525
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005535 	.word	0x08005535
 80054ec:	08005535 	.word	0x08005535
 80054f0:	08005535 	.word	0x08005535
 80054f4:	08005535 	.word	0x08005535
 80054f8:	08005535 	.word	0x08005535
 80054fc:	08005535 	.word	0x08005535
 8005500:	0800552d 	.word	0x0800552d
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550a:	e0d6      	b.n	80056ba <UART_SetConfig+0x7ae>
 800550c:	2304      	movs	r3, #4
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005512:	e0d2      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005514:	2308      	movs	r3, #8
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551a:	e0ce      	b.n	80056ba <UART_SetConfig+0x7ae>
 800551c:	2310      	movs	r3, #16
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005522:	e0ca      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005524:	2320      	movs	r3, #32
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e0c6      	b.n	80056ba <UART_SetConfig+0x7ae>
 800552c:	2340      	movs	r3, #64	@ 0x40
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e0c2      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005534:	2380      	movs	r3, #128	@ 0x80
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e0be      	b.n	80056ba <UART_SetConfig+0x7ae>
 800553c:	40011400 	.word	0x40011400
 8005540:	58024400 	.word	0x58024400
 8005544:	40007800 	.word	0x40007800
 8005548:	40007c00 	.word	0x40007c00
 800554c:	40011800 	.word	0x40011800
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4aad      	ldr	r2, [pc, #692]	@ (800580c <UART_SetConfig+0x900>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d176      	bne.n	8005648 <UART_SetConfig+0x73c>
 800555a:	4bad      	ldr	r3, [pc, #692]	@ (8005810 <UART_SetConfig+0x904>)
 800555c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005562:	2b28      	cmp	r3, #40	@ 0x28
 8005564:	d86c      	bhi.n	8005640 <UART_SetConfig+0x734>
 8005566:	a201      	add	r2, pc, #4	@ (adr r2, 800556c <UART_SetConfig+0x660>)
 8005568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556c:	08005611 	.word	0x08005611
 8005570:	08005641 	.word	0x08005641
 8005574:	08005641 	.word	0x08005641
 8005578:	08005641 	.word	0x08005641
 800557c:	08005641 	.word	0x08005641
 8005580:	08005641 	.word	0x08005641
 8005584:	08005641 	.word	0x08005641
 8005588:	08005641 	.word	0x08005641
 800558c:	08005619 	.word	0x08005619
 8005590:	08005641 	.word	0x08005641
 8005594:	08005641 	.word	0x08005641
 8005598:	08005641 	.word	0x08005641
 800559c:	08005641 	.word	0x08005641
 80055a0:	08005641 	.word	0x08005641
 80055a4:	08005641 	.word	0x08005641
 80055a8:	08005641 	.word	0x08005641
 80055ac:	08005621 	.word	0x08005621
 80055b0:	08005641 	.word	0x08005641
 80055b4:	08005641 	.word	0x08005641
 80055b8:	08005641 	.word	0x08005641
 80055bc:	08005641 	.word	0x08005641
 80055c0:	08005641 	.word	0x08005641
 80055c4:	08005641 	.word	0x08005641
 80055c8:	08005641 	.word	0x08005641
 80055cc:	08005629 	.word	0x08005629
 80055d0:	08005641 	.word	0x08005641
 80055d4:	08005641 	.word	0x08005641
 80055d8:	08005641 	.word	0x08005641
 80055dc:	08005641 	.word	0x08005641
 80055e0:	08005641 	.word	0x08005641
 80055e4:	08005641 	.word	0x08005641
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005631 	.word	0x08005631
 80055f0:	08005641 	.word	0x08005641
 80055f4:	08005641 	.word	0x08005641
 80055f8:	08005641 	.word	0x08005641
 80055fc:	08005641 	.word	0x08005641
 8005600:	08005641 	.word	0x08005641
 8005604:	08005641 	.word	0x08005641
 8005608:	08005641 	.word	0x08005641
 800560c:	08005639 	.word	0x08005639
 8005610:	2301      	movs	r3, #1
 8005612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005616:	e050      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005618:	2304      	movs	r3, #4
 800561a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800561e:	e04c      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005620:	2308      	movs	r3, #8
 8005622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005626:	e048      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005628:	2310      	movs	r3, #16
 800562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800562e:	e044      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005630:	2320      	movs	r3, #32
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e040      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005638:	2340      	movs	r3, #64	@ 0x40
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563e:	e03c      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005640:	2380      	movs	r3, #128	@ 0x80
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e038      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a71      	ldr	r2, [pc, #452]	@ (8005814 <UART_SetConfig+0x908>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d130      	bne.n	80056b4 <UART_SetConfig+0x7a8>
 8005652:	4b6f      	ldr	r3, [pc, #444]	@ (8005810 <UART_SetConfig+0x904>)
 8005654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b05      	cmp	r3, #5
 800565c:	d826      	bhi.n	80056ac <UART_SetConfig+0x7a0>
 800565e:	a201      	add	r2, pc, #4	@ (adr r2, 8005664 <UART_SetConfig+0x758>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	0800567d 	.word	0x0800567d
 8005668:	08005685 	.word	0x08005685
 800566c:	0800568d 	.word	0x0800568d
 8005670:	08005695 	.word	0x08005695
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a5 	.word	0x080056a5
 800567c:	2302      	movs	r3, #2
 800567e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005682:	e01a      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800568a:	e016      	b.n	80056ba <UART_SetConfig+0x7ae>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e012      	b.n	80056ba <UART_SetConfig+0x7ae>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e00e      	b.n	80056ba <UART_SetConfig+0x7ae>
 800569c:	2320      	movs	r3, #32
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e00a      	b.n	80056ba <UART_SetConfig+0x7ae>
 80056a4:	2340      	movs	r3, #64	@ 0x40
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e006      	b.n	80056ba <UART_SetConfig+0x7ae>
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e002      	b.n	80056ba <UART_SetConfig+0x7ae>
 80056b4:	2380      	movs	r3, #128	@ 0x80
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a55      	ldr	r2, [pc, #340]	@ (8005814 <UART_SetConfig+0x908>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	f040 80f8 	bne.w	80058b6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	dc46      	bgt.n	800575c <UART_SetConfig+0x850>
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	db75      	blt.n	80057be <UART_SetConfig+0x8b2>
 80056d2:	3b02      	subs	r3, #2
 80056d4:	2b1e      	cmp	r3, #30
 80056d6:	d872      	bhi.n	80057be <UART_SetConfig+0x8b2>
 80056d8:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <UART_SetConfig+0x7d4>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005763 	.word	0x08005763
 80056e4:	080057bf 	.word	0x080057bf
 80056e8:	0800576b 	.word	0x0800576b
 80056ec:	080057bf 	.word	0x080057bf
 80056f0:	080057bf 	.word	0x080057bf
 80056f4:	080057bf 	.word	0x080057bf
 80056f8:	0800577b 	.word	0x0800577b
 80056fc:	080057bf 	.word	0x080057bf
 8005700:	080057bf 	.word	0x080057bf
 8005704:	080057bf 	.word	0x080057bf
 8005708:	080057bf 	.word	0x080057bf
 800570c:	080057bf 	.word	0x080057bf
 8005710:	080057bf 	.word	0x080057bf
 8005714:	080057bf 	.word	0x080057bf
 8005718:	0800578b 	.word	0x0800578b
 800571c:	080057bf 	.word	0x080057bf
 8005720:	080057bf 	.word	0x080057bf
 8005724:	080057bf 	.word	0x080057bf
 8005728:	080057bf 	.word	0x080057bf
 800572c:	080057bf 	.word	0x080057bf
 8005730:	080057bf 	.word	0x080057bf
 8005734:	080057bf 	.word	0x080057bf
 8005738:	080057bf 	.word	0x080057bf
 800573c:	080057bf 	.word	0x080057bf
 8005740:	080057bf 	.word	0x080057bf
 8005744:	080057bf 	.word	0x080057bf
 8005748:	080057bf 	.word	0x080057bf
 800574c:	080057bf 	.word	0x080057bf
 8005750:	080057bf 	.word	0x080057bf
 8005754:	080057bf 	.word	0x080057bf
 8005758:	080057b1 	.word	0x080057b1
 800575c:	2b40      	cmp	r3, #64	@ 0x40
 800575e:	d02a      	beq.n	80057b6 <UART_SetConfig+0x8aa>
 8005760:	e02d      	b.n	80057be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005762:	f7fe ff61 	bl	8004628 <HAL_RCCEx_GetD3PCLK1Freq>
 8005766:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005768:	e02f      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800576a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800576e:	4618      	mov	r0, r3
 8005770:	f7fe ff70 	bl	8004654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005778:	e027      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800577a:	f107 0318 	add.w	r3, r7, #24
 800577e:	4618      	mov	r0, r3
 8005780:	f7ff f8bc 	bl	80048fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005788:	e01f      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800578a:	4b21      	ldr	r3, [pc, #132]	@ (8005810 <UART_SetConfig+0x904>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005796:	4b1e      	ldr	r3, [pc, #120]	@ (8005810 <UART_SetConfig+0x904>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	08db      	lsrs	r3, r3, #3
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005818 <UART_SetConfig+0x90c>)
 80057a2:	fa22 f303 	lsr.w	r3, r2, r3
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057a8:	e00f      	b.n	80057ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057aa:	4b1b      	ldr	r3, [pc, #108]	@ (8005818 <UART_SetConfig+0x90c>)
 80057ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ae:	e00c      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057b0:	4b1a      	ldr	r3, [pc, #104]	@ (800581c <UART_SetConfig+0x910>)
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057b4:	e009      	b.n	80057ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057bc:	e005      	b.n	80057ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 81ee 	beq.w	8005bae <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	4a12      	ldr	r2, [pc, #72]	@ (8005820 <UART_SetConfig+0x914>)
 80057d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057dc:	461a      	mov	r2, r3
 80057de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057e4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	005b      	lsls	r3, r3, #1
 80057ee:	4413      	add	r3, r2
 80057f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d305      	bcc.n	8005802 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057fe:	429a      	cmp	r2, r3
 8005800:	d910      	bls.n	8005824 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005808:	e1d1      	b.n	8005bae <UART_SetConfig+0xca2>
 800580a:	bf00      	nop
 800580c:	40011c00 	.word	0x40011c00
 8005810:	58024400 	.word	0x58024400
 8005814:	58000c00 	.word	0x58000c00
 8005818:	03d09000 	.word	0x03d09000
 800581c:	003d0900 	.word	0x003d0900
 8005820:	080062ac 	.word	0x080062ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005826:	2200      	movs	r2, #0
 8005828:	60bb      	str	r3, [r7, #8]
 800582a:	60fa      	str	r2, [r7, #12]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	4ac0      	ldr	r2, [pc, #768]	@ (8005b34 <UART_SetConfig+0xc28>)
 8005832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005836:	b29b      	uxth	r3, r3
 8005838:	2200      	movs	r2, #0
 800583a:	603b      	str	r3, [r7, #0]
 800583c:	607a      	str	r2, [r7, #4]
 800583e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005846:	f7fa fd61 	bl	800030c <__aeabi_uldivmod>
 800584a:	4602      	mov	r2, r0
 800584c:	460b      	mov	r3, r1
 800584e:	4610      	mov	r0, r2
 8005850:	4619      	mov	r1, r3
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	020b      	lsls	r3, r1, #8
 800585c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005860:	0202      	lsls	r2, r0, #8
 8005862:	6979      	ldr	r1, [r7, #20]
 8005864:	6849      	ldr	r1, [r1, #4]
 8005866:	0849      	lsrs	r1, r1, #1
 8005868:	2000      	movs	r0, #0
 800586a:	460c      	mov	r4, r1
 800586c:	4605      	mov	r5, r0
 800586e:	eb12 0804 	adds.w	r8, r2, r4
 8005872:	eb43 0905 	adc.w	r9, r3, r5
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	469a      	mov	sl, r3
 800587e:	4693      	mov	fp, r2
 8005880:	4652      	mov	r2, sl
 8005882:	465b      	mov	r3, fp
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fa fd40 	bl	800030c <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005896:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800589a:	d308      	bcc.n	80058ae <UART_SetConfig+0x9a2>
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058a2:	d204      	bcs.n	80058ae <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	e17f      	b.n	8005bae <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80058b4:	e17b      	b.n	8005bae <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058be:	f040 80bd 	bne.w	8005a3c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80058c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058c6:	2b20      	cmp	r3, #32
 80058c8:	dc48      	bgt.n	800595c <UART_SetConfig+0xa50>
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	db7b      	blt.n	80059c6 <UART_SetConfig+0xaba>
 80058ce:	2b20      	cmp	r3, #32
 80058d0:	d879      	bhi.n	80059c6 <UART_SetConfig+0xaba>
 80058d2:	a201      	add	r2, pc, #4	@ (adr r2, 80058d8 <UART_SetConfig+0x9cc>)
 80058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d8:	08005963 	.word	0x08005963
 80058dc:	0800596b 	.word	0x0800596b
 80058e0:	080059c7 	.word	0x080059c7
 80058e4:	080059c7 	.word	0x080059c7
 80058e8:	08005973 	.word	0x08005973
 80058ec:	080059c7 	.word	0x080059c7
 80058f0:	080059c7 	.word	0x080059c7
 80058f4:	080059c7 	.word	0x080059c7
 80058f8:	08005983 	.word	0x08005983
 80058fc:	080059c7 	.word	0x080059c7
 8005900:	080059c7 	.word	0x080059c7
 8005904:	080059c7 	.word	0x080059c7
 8005908:	080059c7 	.word	0x080059c7
 800590c:	080059c7 	.word	0x080059c7
 8005910:	080059c7 	.word	0x080059c7
 8005914:	080059c7 	.word	0x080059c7
 8005918:	08005993 	.word	0x08005993
 800591c:	080059c7 	.word	0x080059c7
 8005920:	080059c7 	.word	0x080059c7
 8005924:	080059c7 	.word	0x080059c7
 8005928:	080059c7 	.word	0x080059c7
 800592c:	080059c7 	.word	0x080059c7
 8005930:	080059c7 	.word	0x080059c7
 8005934:	080059c7 	.word	0x080059c7
 8005938:	080059c7 	.word	0x080059c7
 800593c:	080059c7 	.word	0x080059c7
 8005940:	080059c7 	.word	0x080059c7
 8005944:	080059c7 	.word	0x080059c7
 8005948:	080059c7 	.word	0x080059c7
 800594c:	080059c7 	.word	0x080059c7
 8005950:	080059c7 	.word	0x080059c7
 8005954:	080059c7 	.word	0x080059c7
 8005958:	080059b9 	.word	0x080059b9
 800595c:	2b40      	cmp	r3, #64	@ 0x40
 800595e:	d02e      	beq.n	80059be <UART_SetConfig+0xab2>
 8005960:	e031      	b.n	80059c6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005962:	f7fd fc95 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8005966:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005968:	e033      	b.n	80059d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800596a:	f7fd fca7 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 800596e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005970:	e02f      	b.n	80059d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fe6c 	bl	8004654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005980:	e027      	b.n	80059d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005982:	f107 0318 	add.w	r3, r7, #24
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe ffb8 	bl	80048fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005990:	e01f      	b.n	80059d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005992:	4b69      	ldr	r3, [pc, #420]	@ (8005b38 <UART_SetConfig+0xc2c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800599e:	4b66      	ldr	r3, [pc, #408]	@ (8005b38 <UART_SetConfig+0xc2c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	08db      	lsrs	r3, r3, #3
 80059a4:	f003 0303 	and.w	r3, r3, #3
 80059a8:	4a64      	ldr	r2, [pc, #400]	@ (8005b3c <UART_SetConfig+0xc30>)
 80059aa:	fa22 f303 	lsr.w	r3, r2, r3
 80059ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059b0:	e00f      	b.n	80059d2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80059b2:	4b62      	ldr	r3, [pc, #392]	@ (8005b3c <UART_SetConfig+0xc30>)
 80059b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b6:	e00c      	b.n	80059d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059b8:	4b61      	ldr	r3, [pc, #388]	@ (8005b40 <UART_SetConfig+0xc34>)
 80059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059bc:	e009      	b.n	80059d2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059c4:	e005      	b.n	80059d2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80ea 	beq.w	8005bae <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059de:	4a55      	ldr	r2, [pc, #340]	@ (8005b34 <UART_SetConfig+0xc28>)
 80059e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80059ec:	005a      	lsls	r2, r3, #1
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	085b      	lsrs	r3, r3, #1
 80059f4:	441a      	add	r2, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	2b0f      	cmp	r3, #15
 8005a04:	d916      	bls.n	8005a34 <UART_SetConfig+0xb28>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a0c:	d212      	bcs.n	8005a34 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	f023 030f 	bic.w	r3, r3, #15
 8005a16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	085b      	lsrs	r3, r3, #1
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	f003 0307 	and.w	r3, r3, #7
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005a26:	4313      	orrs	r3, r2
 8005a28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	e0bc      	b.n	8005bae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a3a:	e0b8      	b.n	8005bae <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a3c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	dc4b      	bgt.n	8005adc <UART_SetConfig+0xbd0>
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f2c0 8087 	blt.w	8005b58 <UART_SetConfig+0xc4c>
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	f200 8084 	bhi.w	8005b58 <UART_SetConfig+0xc4c>
 8005a50:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <UART_SetConfig+0xb4c>)
 8005a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a56:	bf00      	nop
 8005a58:	08005ae3 	.word	0x08005ae3
 8005a5c:	08005aeb 	.word	0x08005aeb
 8005a60:	08005b59 	.word	0x08005b59
 8005a64:	08005b59 	.word	0x08005b59
 8005a68:	08005af3 	.word	0x08005af3
 8005a6c:	08005b59 	.word	0x08005b59
 8005a70:	08005b59 	.word	0x08005b59
 8005a74:	08005b59 	.word	0x08005b59
 8005a78:	08005b03 	.word	0x08005b03
 8005a7c:	08005b59 	.word	0x08005b59
 8005a80:	08005b59 	.word	0x08005b59
 8005a84:	08005b59 	.word	0x08005b59
 8005a88:	08005b59 	.word	0x08005b59
 8005a8c:	08005b59 	.word	0x08005b59
 8005a90:	08005b59 	.word	0x08005b59
 8005a94:	08005b59 	.word	0x08005b59
 8005a98:	08005b13 	.word	0x08005b13
 8005a9c:	08005b59 	.word	0x08005b59
 8005aa0:	08005b59 	.word	0x08005b59
 8005aa4:	08005b59 	.word	0x08005b59
 8005aa8:	08005b59 	.word	0x08005b59
 8005aac:	08005b59 	.word	0x08005b59
 8005ab0:	08005b59 	.word	0x08005b59
 8005ab4:	08005b59 	.word	0x08005b59
 8005ab8:	08005b59 	.word	0x08005b59
 8005abc:	08005b59 	.word	0x08005b59
 8005ac0:	08005b59 	.word	0x08005b59
 8005ac4:	08005b59 	.word	0x08005b59
 8005ac8:	08005b59 	.word	0x08005b59
 8005acc:	08005b59 	.word	0x08005b59
 8005ad0:	08005b59 	.word	0x08005b59
 8005ad4:	08005b59 	.word	0x08005b59
 8005ad8:	08005b4b 	.word	0x08005b4b
 8005adc:	2b40      	cmp	r3, #64	@ 0x40
 8005ade:	d037      	beq.n	8005b50 <UART_SetConfig+0xc44>
 8005ae0:	e03a      	b.n	8005b58 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae2:	f7fd fbd5 	bl	8003290 <HAL_RCC_GetPCLK1Freq>
 8005ae6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ae8:	e03c      	b.n	8005b64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005aea:	f7fd fbe7 	bl	80032bc <HAL_RCC_GetPCLK2Freq>
 8005aee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005af0:	e038      	b.n	8005b64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7fe fdac 	bl	8004654 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b00:	e030      	b.n	8005b64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b02:	f107 0318 	add.w	r3, r7, #24
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fe fef8 	bl	80048fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b10:	e028      	b.n	8005b64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b12:	4b09      	ldr	r3, [pc, #36]	@ (8005b38 <UART_SetConfig+0xc2c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d012      	beq.n	8005b44 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b1e:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <UART_SetConfig+0xc2c>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	08db      	lsrs	r3, r3, #3
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	4a04      	ldr	r2, [pc, #16]	@ (8005b3c <UART_SetConfig+0xc30>)
 8005b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b30:	e018      	b.n	8005b64 <UART_SetConfig+0xc58>
 8005b32:	bf00      	nop
 8005b34:	080062ac 	.word	0x080062ac
 8005b38:	58024400 	.word	0x58024400
 8005b3c:	03d09000 	.word	0x03d09000
 8005b40:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005b44:	4b24      	ldr	r3, [pc, #144]	@ (8005bd8 <UART_SetConfig+0xccc>)
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b48:	e00c      	b.n	8005b64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b4a:	4b24      	ldr	r3, [pc, #144]	@ (8005bdc <UART_SetConfig+0xcd0>)
 8005b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b4e:	e009      	b.n	8005b64 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b56:	e005      	b.n	8005b64 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b62:	bf00      	nop
    }

    if (pclk != 0U)
 8005b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d021      	beq.n	8005bae <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8005be0 <UART_SetConfig+0xcd4>)
 8005b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b74:	461a      	mov	r2, r3
 8005b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b78:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	085b      	lsrs	r3, r3, #1
 8005b82:	441a      	add	r2, r3
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	2b0f      	cmp	r3, #15
 8005b92:	d909      	bls.n	8005ba8 <UART_SetConfig+0xc9c>
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9a:	d205      	bcs.n	8005ba8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60da      	str	r2, [r3, #12]
 8005ba6:	e002      	b.n	8005bae <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3748      	adds	r7, #72	@ 0x48
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bd8:	03d09000 	.word	0x03d09000
 8005bdc:	003d0900 	.word	0x003d0900
 8005be0:	080062ac 	.word	0x080062ac

08005be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00a      	beq.n	8005c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00a      	beq.n	8005c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	f003 0310 	and.w	r3, r3, #16
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00a      	beq.n	8005c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00a      	beq.n	8005cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ce2:	d10a      	bne.n	8005cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b098      	sub	sp, #96	@ 0x60
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d38:	f7fb fb08 	bl	800134c <HAL_GetTick>
 8005d3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0308 	and.w	r3, r3, #8
 8005d48:	2b08      	cmp	r3, #8
 8005d4a:	d12f      	bne.n	8005dac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d54:	2200      	movs	r2, #0
 8005d56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f88e 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d022      	beq.n	8005dac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	e853 3f00 	ldrex	r3, [r3]
 8005d72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e6      	bne.n	8005d66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e063      	b.n	8005e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d149      	bne.n	8005e4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f857 	bl	8005e7c <UART_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d03c      	beq.n	8005e4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	623b      	str	r3, [r7, #32]
   return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005df2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005df4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dfa:	e841 2300 	strex	r3, r2, [r1]
 8005dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1e6      	bne.n	8005dd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3308      	adds	r3, #8
 8005e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e26:	61fa      	str	r2, [r7, #28]
 8005e28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2a:	69b9      	ldr	r1, [r7, #24]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	617b      	str	r3, [r7, #20]
   return(result);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1e5      	bne.n	8005e06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e012      	b.n	8005e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3758      	adds	r7, #88	@ 0x58
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e8c:	e04f      	b.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e8e:	69bb      	ldr	r3, [r7, #24]
 8005e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e94:	d04b      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e96:	f7fb fa59 	bl	800134c <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d302      	bcc.n	8005eac <UART_WaitOnFlagUntilTimeout+0x30>
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e04e      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d037      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b80      	cmp	r3, #128	@ 0x80
 8005ec2:	d034      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d031      	beq.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d110      	bne.n	8005efa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2208      	movs	r2, #8
 8005ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 f839 	bl	8005f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e029      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f08:	d111      	bne.n	8005f2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f81f 	bl	8005f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e00f      	b.n	8005f4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69da      	ldr	r2, [r3, #28]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	4013      	ands	r3, r2
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	bf0c      	ite	eq
 8005f3e:	2301      	moveq	r3, #1
 8005f40:	2300      	movne	r3, #0
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d0a0      	beq.n	8005e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
	...

08005f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b095      	sub	sp, #84	@ 0x54
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f80:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1e6      	bne.n	8005f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	3308      	adds	r3, #8
 8005f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8006020 <UART_EndRxTransfer+0xc8>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3308      	adds	r3, #8
 8005fb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e5      	bne.n	8005f92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d118      	bne.n	8006000 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	e853 3f00 	ldrex	r3, [r3]
 8005fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 0310 	bic.w	r3, r3, #16
 8005fe2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	6979      	ldr	r1, [r7, #20]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e6      	bne.n	8005fce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2220      	movs	r2, #32
 8006004:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006014:	bf00      	nop
 8006016:	3754      	adds	r7, #84	@ 0x54
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	effffffe 	.word	0xeffffffe

08006024 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_UARTEx_DisableFifoMode+0x16>
 8006036:	2302      	movs	r3, #2
 8006038:	e027      	b.n	800608a <HAL_UARTEx_DisableFifoMode+0x66>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2224      	movs	r2, #36	@ 0x24
 8006046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0201 	bic.w	r2, r2, #1
 8006060:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006068:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d101      	bne.n	80060ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060aa:	2302      	movs	r3, #2
 80060ac:	e02d      	b.n	800610a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2224      	movs	r2, #36	@ 0x24
 80060ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0201 	bic.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f850 	bl	8006190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006126:	2302      	movs	r3, #2
 8006128:	e02d      	b.n	8006186 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2224      	movs	r2, #36	@ 0x24
 8006136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f812 	bl	8006190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2220      	movs	r2, #32
 8006178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800619c:	2b00      	cmp	r3, #0
 800619e:	d108      	bne.n	80061b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061b0:	e031      	b.n	8006216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061b2:	2310      	movs	r3, #16
 80061b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061b6:	2310      	movs	r3, #16
 80061b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	0e5b      	lsrs	r3, r3, #25
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	f003 0307 	and.w	r3, r3, #7
 80061c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	0f5b      	lsrs	r3, r3, #29
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f003 0307 	and.w	r3, r3, #7
 80061d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061da:	7bbb      	ldrb	r3, [r7, #14]
 80061dc:	7b3a      	ldrb	r2, [r7, #12]
 80061de:	4911      	ldr	r1, [pc, #68]	@ (8006224 <UARTEx_SetNbDataToProcess+0x94>)
 80061e0:	5c8a      	ldrb	r2, [r1, r2]
 80061e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061e6:	7b3a      	ldrb	r2, [r7, #12]
 80061e8:	490f      	ldr	r1, [pc, #60]	@ (8006228 <UARTEx_SetNbDataToProcess+0x98>)
 80061ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	7b7a      	ldrb	r2, [r7, #13]
 80061fc:	4909      	ldr	r1, [pc, #36]	@ (8006224 <UARTEx_SetNbDataToProcess+0x94>)
 80061fe:	5c8a      	ldrb	r2, [r1, r2]
 8006200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006204:	7b7a      	ldrb	r2, [r7, #13]
 8006206:	4908      	ldr	r1, [pc, #32]	@ (8006228 <UARTEx_SetNbDataToProcess+0x98>)
 8006208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800620a:	fb93 f3f2 	sdiv	r3, r3, r2
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006216:	bf00      	nop
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	080062c4 	.word	0x080062c4
 8006228:	080062cc 	.word	0x080062cc

0800622c <memset>:
 800622c:	4402      	add	r2, r0
 800622e:	4603      	mov	r3, r0
 8006230:	4293      	cmp	r3, r2
 8006232:	d100      	bne.n	8006236 <memset+0xa>
 8006234:	4770      	bx	lr
 8006236:	f803 1b01 	strb.w	r1, [r3], #1
 800623a:	e7f9      	b.n	8006230 <memset+0x4>

0800623c <__libc_init_array>:
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	4d0d      	ldr	r5, [pc, #52]	@ (8006274 <__libc_init_array+0x38>)
 8006240:	4c0d      	ldr	r4, [pc, #52]	@ (8006278 <__libc_init_array+0x3c>)
 8006242:	1b64      	subs	r4, r4, r5
 8006244:	10a4      	asrs	r4, r4, #2
 8006246:	2600      	movs	r6, #0
 8006248:	42a6      	cmp	r6, r4
 800624a:	d109      	bne.n	8006260 <__libc_init_array+0x24>
 800624c:	4d0b      	ldr	r5, [pc, #44]	@ (800627c <__libc_init_array+0x40>)
 800624e:	4c0c      	ldr	r4, [pc, #48]	@ (8006280 <__libc_init_array+0x44>)
 8006250:	f000 f818 	bl	8006284 <_init>
 8006254:	1b64      	subs	r4, r4, r5
 8006256:	10a4      	asrs	r4, r4, #2
 8006258:	2600      	movs	r6, #0
 800625a:	42a6      	cmp	r6, r4
 800625c:	d105      	bne.n	800626a <__libc_init_array+0x2e>
 800625e:	bd70      	pop	{r4, r5, r6, pc}
 8006260:	f855 3b04 	ldr.w	r3, [r5], #4
 8006264:	4798      	blx	r3
 8006266:	3601      	adds	r6, #1
 8006268:	e7ee      	b.n	8006248 <__libc_init_array+0xc>
 800626a:	f855 3b04 	ldr.w	r3, [r5], #4
 800626e:	4798      	blx	r3
 8006270:	3601      	adds	r6, #1
 8006272:	e7f2      	b.n	800625a <__libc_init_array+0x1e>
 8006274:	080062dc 	.word	0x080062dc
 8006278:	080062dc 	.word	0x080062dc
 800627c:	080062dc 	.word	0x080062dc
 8006280:	080062e0 	.word	0x080062e0

08006284 <_init>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr

08006290 <_fini>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	bf00      	nop
 8006294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006296:	bc08      	pop	{r3}
 8006298:	469e      	mov	lr, r3
 800629a:	4770      	bx	lr
