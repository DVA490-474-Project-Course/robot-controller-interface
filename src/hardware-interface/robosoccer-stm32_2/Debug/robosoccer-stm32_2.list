
robosoccer-stm32_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062e0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080065ac  080065ac  000075ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080065f8  080065f8  000075f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006600  08006600  00007600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006604  08006604  00007604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08006608  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08006618  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006678  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  240000d0  080066d8  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000404  080066d8  00008404  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016bbb  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002454  00000000  00000000  0001ecb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00021110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be9  00000000  00000000  00022048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032790  00000000  00000000  00022c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014223  00000000  00000000  000553c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001464ae  00000000  00000000  000695e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001afa92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  001afad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001b3b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08006594 	.word	0x08006594

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	08006594 	.word	0x08006594

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fef4 	bl	80013ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f822 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 fa3c 	bl	8000a84 <MX_GPIO_Init>
  MX_ETH_Init();
 800060c:	f000 f88e 	bl	800072c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000610:	f000 f9e4 	bl	80009dc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000614:	f000 fa2e 	bl	8000a74 <MX_USB_OTG_HS_USB_Init>
  MX_I2C1_Init();
 8000618:	f000 f8d4 	bl	80007c4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800061c:	f000 f912 	bl	8000844 <MX_I2C2_Init>
  MX_I2C4_Init();
 8000620:	f000 f950 	bl	80008c4 <MX_I2C4_Init>
  MX_UART5_Init();
 8000624:	f000 f98e 	bl	8000944 <MX_UART5_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Transmit message using UART1 (or whichever UART is appropriate)
	      HAL_UART_Transmit(&huart5, (uint8_t *)"Hello from STM32!\r\n", strlen("Hello from STM32!\r\n"), HAL_MAX_DELAY);
 8000628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800062c:	2213      	movs	r2, #19
 800062e:	4905      	ldr	r1, [pc, #20]	@ (8000644 <main+0x48>)
 8000630:	4805      	ldr	r0, [pc, #20]	@ (8000648 <main+0x4c>)
 8000632:	f004 fd65 	bl	8005100 <HAL_UART_Transmit>

	      HAL_Delay(1000);  // Optional delay of 1 second
 8000636:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063a:	f000 ff69 	bl	8001510 <HAL_Delay>
	      HAL_UART_Transmit(&huart5, (uint8_t *)"Hello from STM32!\r\n", strlen("Hello from STM32!\r\n"), HAL_MAX_DELAY);
 800063e:	bf00      	nop
 8000640:	e7f2      	b.n	8000628 <main+0x2c>
 8000642:	bf00      	nop
 8000644:	080065ac 	.word	0x080065ac
 8000648:	240002d0 	.word	0x240002d0

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b09c      	sub	sp, #112	@ 0x70
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000656:	224c      	movs	r2, #76	@ 0x4c
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 ff6e 	bl	800653c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2220      	movs	r2, #32
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 ff68 	bl	800653c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800066c:	2002      	movs	r0, #2
 800066e:	f001 ff95 	bl	800259c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <SystemClock_Config+0xdc>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a2b      	ldr	r2, [pc, #172]	@ (8000728 <SystemClock_Config+0xdc>)
 800067c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <SystemClock_Config+0xdc>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068e:	bf00      	nop
 8000690:	4b25      	ldr	r3, [pc, #148]	@ (8000728 <SystemClock_Config+0xdc>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800069c:	d1f8      	bne.n	8000690 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800069e:	2321      	movs	r3, #33	@ 0x21
 80006a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80006b8:	f240 1313 	movw	r3, #275	@ 0x113
 80006bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006c2:	2304      	movs	r3, #4
 80006c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80006ca:	2304      	movs	r3, #4
 80006cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 ff98 	bl	8002610 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e6:	f000 fad7 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	233f      	movs	r3, #63	@ 0x3f
 80006ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006f6:	2308      	movs	r3, #8
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006fa:	2340      	movs	r3, #64	@ 0x40
 80006fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006fe:	2340      	movs	r3, #64	@ 0x40
 8000700:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000706:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800070c:	1d3b      	adds	r3, r7, #4
 800070e:	2103      	movs	r1, #3
 8000710:	4618      	mov	r0, r3
 8000712:	f002 fb57 	bl	8002dc4 <HAL_RCC_ClockConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800071c:	f000 fabc 	bl	8000c98 <Error_Handler>
  }
}
 8000720:	bf00      	nop
 8000722:	3770      	adds	r7, #112	@ 0x70
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	58024800 	.word	0x58024800

0800072c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000730:	4b1e      	ldr	r3, [pc, #120]	@ (80007ac <MX_ETH_Init+0x80>)
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <MX_ETH_Init+0x84>)
 8000734:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_ETH_Init+0x88>)
 800073e:	2280      	movs	r2, #128	@ 0x80
 8000740:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000744:	22e1      	movs	r2, #225	@ 0xe1
 8000746:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_ETH_Init+0x88>)
 800074a:	2200      	movs	r2, #0
 800074c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000750:	2200      	movs	r2, #0
 8000752:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ETH_Init+0x88>)
 8000756:	2200      	movs	r2, #0
 8000758:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800075a:	4b14      	ldr	r3, [pc, #80]	@ (80007ac <MX_ETH_Init+0x80>)
 800075c:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_ETH_Init+0x88>)
 800075e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_ETH_Init+0x80>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000766:	4b11      	ldr	r3, [pc, #68]	@ (80007ac <MX_ETH_Init+0x80>)
 8000768:	4a13      	ldr	r2, [pc, #76]	@ (80007b8 <MX_ETH_Init+0x8c>)
 800076a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800076c:	4b0f      	ldr	r3, [pc, #60]	@ (80007ac <MX_ETH_Init+0x80>)
 800076e:	4a13      	ldr	r2, [pc, #76]	@ (80007bc <MX_ETH_Init+0x90>)
 8000770:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000772:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_ETH_Init+0x80>)
 8000774:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000778:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800077a:	480c      	ldr	r0, [pc, #48]	@ (80007ac <MX_ETH_Init+0x80>)
 800077c:	f000 ffe4 	bl	8001748 <HAL_ETH_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000786:	f000 fa87 	bl	8000c98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800078a:	2238      	movs	r2, #56	@ 0x38
 800078c:	2100      	movs	r1, #0
 800078e:	480c      	ldr	r0, [pc, #48]	@ (80007c0 <MX_ETH_Init+0x94>)
 8000790:	f005 fed4 	bl	800653c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_ETH_Init+0x94>)
 8000796:	2221      	movs	r2, #33	@ 0x21
 8000798:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_ETH_Init+0x94>)
 800079c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007a2:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_ETH_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	24000124 	.word	0x24000124
 80007b0:	40028000 	.word	0x40028000
 80007b4:	240003f8 	.word	0x240003f8
 80007b8:	24000070 	.word	0x24000070
 80007bc:	24000010 	.word	0x24000010
 80007c0:	240000ec 	.word	0x240000ec

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_I2C1_Init+0x78>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 80007ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000840 <MX_I2C1_Init+0x7c>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007d4:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007da:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007dc:	2201      	movs	r2, #1
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e0:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007e6:	4b14      	ldr	r3, [pc, #80]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ec:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007fe:	480e      	ldr	r0, [pc, #56]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000800:	f001 fd98 	bl	8002334 <HAL_I2C_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800080a:	f000 fa45 	bl	8000c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000812:	f001 fe2b 	bl	800246c <HAL_I2CEx_ConfigAnalogFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800081c:	f000 fa3c 	bl	8000c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000820:	2100      	movs	r1, #0
 8000822:	4805      	ldr	r0, [pc, #20]	@ (8000838 <MX_I2C1_Init+0x74>)
 8000824:	f001 fe6d 	bl	8002502 <HAL_I2CEx_ConfigDigitalFilter>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800082e:	f000 fa33 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	240001d4 	.word	0x240001d4
 800083c:	40005400 	.word	0x40005400
 8000840:	60404e72 	.word	0x60404e72

08000844 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000848:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <MX_I2C2_Init+0x74>)
 800084a:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <MX_I2C2_Init+0x78>)
 800084c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <MX_I2C2_Init+0x74>)
 8000850:	4a1b      	ldr	r2, [pc, #108]	@ (80008c0 <MX_I2C2_Init+0x7c>)
 8000852:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000854:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <MX_I2C2_Init+0x74>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085a:	4b17      	ldr	r3, [pc, #92]	@ (80008b8 <MX_I2C2_Init+0x74>)
 800085c:	2201      	movs	r2, #1
 800085e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_I2C2_Init+0x74>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800087e:	480e      	ldr	r0, [pc, #56]	@ (80008b8 <MX_I2C2_Init+0x74>)
 8000880:	f001 fd58 	bl	8002334 <HAL_I2C_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 fa05 	bl	8000c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800088e:	2100      	movs	r1, #0
 8000890:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <MX_I2C2_Init+0x74>)
 8000892:	f001 fdeb 	bl	800246c <HAL_I2CEx_ConfigAnalogFilter>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800089c:	f000 f9fc 	bl	8000c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_I2C2_Init+0x74>)
 80008a4:	f001 fe2d 	bl	8002502 <HAL_I2CEx_ConfigDigitalFilter>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ae:	f000 f9f3 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	24000228 	.word	0x24000228
 80008bc:	40005800 	.word	0x40005800
 80008c0:	60404e72 	.word	0x60404e72

080008c4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <MX_I2C4_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <MX_I2C4_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_I2C4_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_I2C4_Init+0x74>)
 8000900:	f001 fd18 	bl	8002334 <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 f9c5 	bl	8000c98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_I2C4_Init+0x74>)
 8000912:	f001 fdab 	bl	800246c <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 f9bc 	bl	8000c98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_I2C4_Init+0x74>)
 8000924:	f001 fded 	bl	8002502 <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 f9b3 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2400027c 	.word	0x2400027c
 800093c:	58001c00 	.word	0x58001c00
 8000940:	60404e72 	.word	0x60404e72

08000944 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000948:	4b22      	ldr	r3, [pc, #136]	@ (80009d4 <MX_UART5_Init+0x90>)
 800094a:	4a23      	ldr	r2, [pc, #140]	@ (80009d8 <MX_UART5_Init+0x94>)
 800094c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800094e:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <MX_UART5_Init+0x90>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <MX_UART5_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b1d      	ldr	r3, [pc, #116]	@ (80009d4 <MX_UART5_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <MX_UART5_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b1a      	ldr	r3, [pc, #104]	@ (80009d4 <MX_UART5_Init+0x90>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <MX_UART5_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_UART5_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_UART5_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_UART5_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <MX_UART5_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800098c:	4811      	ldr	r0, [pc, #68]	@ (80009d4 <MX_UART5_Init+0x90>)
 800098e:	f004 fb67 	bl	8005060 <HAL_UART_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8000998:	f000 f97e 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <MX_UART5_Init+0x90>)
 80009a0:	f005 fd01 	bl	80063a6 <HAL_UARTEx_SetTxFifoThreshold>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80009aa:	f000 f975 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ae:	2100      	movs	r1, #0
 80009b0:	4808      	ldr	r0, [pc, #32]	@ (80009d4 <MX_UART5_Init+0x90>)
 80009b2:	f005 fd36 	bl	8006422 <HAL_UARTEx_SetRxFifoThreshold>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80009bc:	f000 f96c 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_UART5_Init+0x90>)
 80009c2:	f005 fcb7 	bl	8006334 <HAL_UARTEx_DisableFifoMode>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 80009cc:	f000 f964 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	240002d0 	.word	0x240002d0
 80009d8:	40005000 	.word	0x40005000

080009dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e2:	4a23      	ldr	r2, [pc, #140]	@ (8000a70 <MX_USART3_UART_Init+0x94>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a24:	4811      	ldr	r0, [pc, #68]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a26:	f004 fb1b 	bl	8005060 <HAL_UART_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a30:	f000 f932 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a34:	2100      	movs	r1, #0
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a38:	f005 fcb5 	bl	80063a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a42:	f000 f929 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a46:	2100      	movs	r1, #0
 8000a48:	4808      	ldr	r0, [pc, #32]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a4a:	f005 fcea 	bl	8006422 <HAL_UARTEx_SetRxFifoThreshold>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a54:	f000 f920 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a58:	4804      	ldr	r0, [pc, #16]	@ (8000a6c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f005 fc6b 	bl	8006334 <HAL_UARTEx_DisableFifoMode>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a64:	f000 f918 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	24000364 	.word	0x24000364
 8000a70:	40004800 	.word	0x40004800

08000a74 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
	...

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08e      	sub	sp, #56	@ 0x38
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b78      	ldr	r3, [pc, #480]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa0:	4a76      	ldr	r2, [pc, #472]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000aa2:	f043 0304 	orr.w	r3, r3, #4
 8000aa6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aaa:	4b74      	ldr	r3, [pc, #464]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	623b      	str	r3, [r7, #32]
 8000ab6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab8:	4b70      	ldr	r3, [pc, #448]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	4a6f      	ldr	r2, [pc, #444]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000ac0:	f043 0320 	orr.w	r3, r3, #32
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac8:	4b6c      	ldr	r3, [pc, #432]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad6:	4b69      	ldr	r3, [pc, #420]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	4a67      	ldr	r2, [pc, #412]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae6:	4b65      	ldr	r3, [pc, #404]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af0:	61bb      	str	r3, [r7, #24]
 8000af2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b61      	ldr	r3, [pc, #388]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	4a60      	ldr	r2, [pc, #384]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b04:	4b5d      	ldr	r3, [pc, #372]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b5a      	ldr	r3, [pc, #360]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a58      	ldr	r2, [pc, #352]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b56      	ldr	r3, [pc, #344]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b30:	4b52      	ldr	r3, [pc, #328]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	4a51      	ldr	r2, [pc, #324]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b40:	4b4e      	ldr	r3, [pc, #312]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	f003 0308 	and.w	r3, r3, #8
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	4a49      	ldr	r2, [pc, #292]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5e:	4b47      	ldr	r3, [pc, #284]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6c:	4b43      	ldr	r3, [pc, #268]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a42      	ldr	r2, [pc, #264]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b74:	f043 0310 	orr.w	r3, r3, #16
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c7c <MX_GPIO_Init+0x1f8>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 0310 	and.w	r3, r3, #16
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b90:	483b      	ldr	r0, [pc, #236]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000b92:	f001 fbb5 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9c:	4839      	ldr	r0, [pc, #228]	@ (8000c84 <MX_GPIO_Init+0x200>)
 8000b9e:	f001 fbaf 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4838      	ldr	r0, [pc, #224]	@ (8000c88 <MX_GPIO_Init+0x204>)
 8000ba8:	f001 fbaa 	bl	8002300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4832      	ldr	r0, [pc, #200]	@ (8000c8c <MX_GPIO_Init+0x208>)
 8000bc2:	f001 f9f5 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000bc6:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4828      	ldr	r0, [pc, #160]	@ (8000c80 <MX_GPIO_Init+0x1fc>)
 8000be0:	f001 f9e6 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000be4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4821      	ldr	r0, [pc, #132]	@ (8000c84 <MX_GPIO_Init+0x200>)
 8000bfe:	f001 f9d7 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c02:	2380      	movs	r3, #128	@ 0x80
 8000c04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c06:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	4619      	mov	r1, r3
 8000c16:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <MX_GPIO_Init+0x20c>)
 8000c18:	f001 f9ca 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4818      	ldr	r0, [pc, #96]	@ (8000c94 <MX_GPIO_Init+0x210>)
 8000c32:	f001 f9bd 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c44:	2300      	movs	r3, #0
 8000c46:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c48:	230a      	movs	r3, #10
 8000c4a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4810      	ldr	r0, [pc, #64]	@ (8000c94 <MX_GPIO_Init+0x210>)
 8000c54:	f001 f9ac 	bl	8001fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	@ (8000c88 <MX_GPIO_Init+0x204>)
 8000c70:	f001 f99e 	bl	8001fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c74:	bf00      	nop
 8000c76:	3738      	adds	r7, #56	@ 0x38
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	58020400 	.word	0x58020400
 8000c84:	58020c00 	.word	0x58020c00
 8000c88:	58021000 	.word	0x58021000
 8000c8c:	58020800 	.word	0x58020800
 8000c90:	58021800 	.word	0x58021800
 8000c94:	58020000 	.word	0x58020000

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_MspInit+0x30>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb0:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x30>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x30>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	58024400 	.word	0x58024400

08000cd8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	@ 0x38
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a59      	ldr	r2, [pc, #356]	@ (8000e5c <HAL_ETH_MspInit+0x184>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	f040 80ab 	bne.w	8000e52 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cfc:	4b58      	ldr	r3, [pc, #352]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000cfe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d02:	4a57      	ldr	r2, [pc, #348]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d08:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d0c:	4b54      	ldr	r3, [pc, #336]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d16:	623b      	str	r3, [r7, #32]
 8000d18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d1a:	4b51      	ldr	r3, [pc, #324]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d20:	4a4f      	ldr	r2, [pc, #316]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d34:	61fb      	str	r3, [r7, #28]
 8000d36:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d38:	4b49      	ldr	r3, [pc, #292]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d3e:	4a48      	ldr	r2, [pc, #288]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d44:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d48:	4b45      	ldr	r3, [pc, #276]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b42      	ldr	r3, [pc, #264]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d5c:	4a40      	ldr	r2, [pc, #256]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d66:	4b3e      	ldr	r3, [pc, #248]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b3a      	ldr	r3, [pc, #232]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7a:	4a39      	ldr	r2, [pc, #228]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d84:	4b36      	ldr	r3, [pc, #216]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	4b33      	ldr	r3, [pc, #204]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d98:	4a31      	ldr	r2, [pc, #196]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000db8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc0:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dce:	2332      	movs	r3, #50	@ 0x32
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dde:	230b      	movs	r3, #11
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	481e      	ldr	r0, [pc, #120]	@ (8000e64 <HAL_ETH_MspInit+0x18c>)
 8000dea:	f001 f8e1 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dee:	2386      	movs	r3, #134	@ 0x86
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfe:	230b      	movs	r3, #11
 8000e00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	4817      	ldr	r0, [pc, #92]	@ (8000e68 <HAL_ETH_MspInit+0x190>)
 8000e0a:	f001 f8d1 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e20:	230b      	movs	r3, #11
 8000e22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4810      	ldr	r0, [pc, #64]	@ (8000e6c <HAL_ETH_MspInit+0x194>)
 8000e2c:	f001 f8c0 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e30:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e42:	230b      	movs	r3, #11
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4808      	ldr	r0, [pc, #32]	@ (8000e70 <HAL_ETH_MspInit+0x198>)
 8000e4e:	f001 f8af 	bl	8001fb0 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e52:	bf00      	nop
 8000e54:	3738      	adds	r7, #56	@ 0x38
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40028000 	.word	0x40028000
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58020800 	.word	0x58020800
 8000e68:	58020000 	.word	0x58020000
 8000e6c:	58020400 	.word	0x58020400
 8000e70:	58021800 	.word	0x58021800

08000e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0bc      	sub	sp, #240	@ 0xf0
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	22b8      	movs	r2, #184	@ 0xb8
 8000e92:	2100      	movs	r1, #0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 fb51 	bl	800653c <memset>
  if(hi2c->Instance==I2C1)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a73      	ldr	r2, [pc, #460]	@ (800106c <HAL_I2C_MspInit+0x1f8>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d146      	bne.n	8000f32 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ea4:	f04f 0208 	mov.w	r2, #8
 8000ea8:	f04f 0300 	mov.w	r3, #0
 8000eac:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f002 fb0e 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000ec6:	f7ff fee7 	bl	8000c98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eca:	4b69      	ldr	r3, [pc, #420]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	4a67      	ldr	r2, [pc, #412]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eda:	4b65      	ldr	r3, [pc, #404]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ee8:	23c0      	movs	r3, #192	@ 0xc0
 8000eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eee:	2312      	movs	r3, #18
 8000ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f00:	2304      	movs	r3, #4
 8000f02:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f06:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4859      	ldr	r0, [pc, #356]	@ (8001074 <HAL_I2C_MspInit+0x200>)
 8000f0e:	f001 f84f 	bl	8001fb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f12:	4b57      	ldr	r3, [pc, #348]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000f14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f18:	4a55      	ldr	r2, [pc, #340]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f22:	4b53      	ldr	r3, [pc, #332]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000f24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000f30:	e097      	b.n	8001062 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C2)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a50      	ldr	r2, [pc, #320]	@ (8001078 <HAL_I2C_MspInit+0x204>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d146      	bne.n	8000fca <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000f3c:	f04f 0208 	mov.w	r2, #8
 8000f40:	f04f 0300 	mov.w	r3, #0
 8000f44:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	4618      	mov	r0, r3
 8000f54:	f002 fac2 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8000f5e:	f7ff fe9b 	bl	8000c98 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f62:	4b43      	ldr	r3, [pc, #268]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a41      	ldr	r2, [pc, #260]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000f6a:	f043 0320 	orr.w	r3, r3, #32
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b3f      	ldr	r3, [pc, #252]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0320 	and.w	r3, r3, #32
 8000f7c:	617b      	str	r3, [r7, #20]
 8000f7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f86:	2312      	movs	r3, #18
 8000f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f9e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4835      	ldr	r0, [pc, #212]	@ (800107c <HAL_I2C_MspInit+0x208>)
 8000fa6:	f001 f803 	bl	8001fb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000faa:	4b31      	ldr	r3, [pc, #196]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000fb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fba:	4b2d      	ldr	r3, [pc, #180]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
}
 8000fc8:	e04b      	b.n	8001062 <HAL_I2C_MspInit+0x1ee>
  else if(hi2c->Instance==I2C4)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a2c      	ldr	r2, [pc, #176]	@ (8001080 <HAL_I2C_MspInit+0x20c>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d146      	bne.n	8001062 <HAL_I2C_MspInit+0x1ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000fd4:	f04f 0210 	mov.w	r2, #16
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fa76 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_I2C_MspInit+0x186>
      Error_Handler();
 8000ff6:	f7ff fe4f 	bl	8000c98 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8001002:	f043 0320 	orr.w	r3, r3, #32
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b19      	ldr	r3, [pc, #100]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0320 	and.w	r3, r3, #32
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001018:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800101c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001032:	2304      	movs	r3, #4
 8001034:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001038:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800103c:	4619      	mov	r1, r3
 800103e:	480f      	ldr	r0, [pc, #60]	@ (800107c <HAL_I2C_MspInit+0x208>)
 8001040:	f000 ffb6 	bl	8001fb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001044:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8001046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_I2C_MspInit+0x1fc>)
 8001056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800105a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
}
 8001062:	bf00      	nop
 8001064:	37f0      	adds	r7, #240	@ 0xf0
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40005400 	.word	0x40005400
 8001070:	58024400 	.word	0x58024400
 8001074:	58020400 	.word	0x58020400
 8001078:	40005800 	.word	0x40005800
 800107c:	58021400 	.word	0x58021400
 8001080:	58001c00 	.word	0x58001c00

08001084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b0bc      	sub	sp, #240	@ 0xf0
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109c:	f107 0320 	add.w	r3, r7, #32
 80010a0:	22b8      	movs	r2, #184	@ 0xb8
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f005 fa49 	bl	800653c <memset>
  if(huart->Instance==UART5)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a60      	ldr	r2, [pc, #384]	@ (8001230 <HAL_UART_MspInit+0x1ac>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d16c      	bne.n	800118e <HAL_UART_MspInit+0x10a>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80010b4:	f04f 0202 	mov.w	r2, #2
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	4618      	mov	r0, r3
 80010cc:	f002 fa06 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010d6:	f7ff fddf 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80010da:	4b56      	ldr	r3, [pc, #344]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010e0:	4a54      	ldr	r2, [pc, #336]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80010e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010ea:	4b52      	ldr	r3, [pc, #328]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010f4:	61fb      	str	r3, [r7, #28]
 80010f6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	4a4d      	ldr	r2, [pc, #308]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001108:	4b4a      	ldr	r3, [pc, #296]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
 8001114:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	4b47      	ldr	r3, [pc, #284]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	4a45      	ldr	r2, [pc, #276]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001126:	4b43      	ldr	r3, [pc, #268]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PC12     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001138:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800114e:	230e      	movs	r3, #14
 8001150:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001158:	4619      	mov	r1, r3
 800115a:	4837      	ldr	r0, [pc, #220]	@ (8001238 <HAL_UART_MspInit+0x1b4>)
 800115c:	f000 ff28 	bl	8001fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800117a:	2308      	movs	r3, #8
 800117c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001180:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001184:	4619      	mov	r1, r3
 8001186:	482d      	ldr	r0, [pc, #180]	@ (800123c <HAL_UART_MspInit+0x1b8>)
 8001188:	f000 ff12 	bl	8001fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800118c:	e04b      	b.n	8001226 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a2b      	ldr	r2, [pc, #172]	@ (8001240 <HAL_UART_MspInit+0x1bc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d146      	bne.n	8001226 <HAL_UART_MspInit+0x1a2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001198:	f04f 0202 	mov.w	r2, #2
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 f994 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_UART_MspInit+0x13a>
      Error_Handler();
 80011ba:	f7ff fd6d 	bl	8000c98 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80011c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80011c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011ca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80011d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e2:	4a14      	ldr	r2, [pc, #80]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80011e4:	f043 0308 	orr.w	r3, r3, #8
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <HAL_UART_MspInit+0x1b0>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80011fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001214:	2307      	movs	r3, #7
 8001216:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800121a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800121e:	4619      	mov	r1, r3
 8001220:	4808      	ldr	r0, [pc, #32]	@ (8001244 <HAL_UART_MspInit+0x1c0>)
 8001222:	f000 fec5 	bl	8001fb0 <HAL_GPIO_Init>
}
 8001226:	bf00      	nop
 8001228:	37f0      	adds	r7, #240	@ 0xf0
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40005000 	.word	0x40005000
 8001234:	58024400 	.word	0x58024400
 8001238:	58020400 	.word	0x58020400
 800123c:	58020800 	.word	0x58020800
 8001240:	40004800 	.word	0x40004800
 8001244:	58020c00 	.word	0x58020c00

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <NMI_Handler+0x4>

08001250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <HardFault_Handler+0x4>

08001258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <MemManage_Handler+0x4>

08001260 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <BusFault_Handler+0x4>

08001268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <UsageFault_Handler+0x4>

08001270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129e:	f000 f917 	bl	80014d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012ac:	4b32      	ldr	r3, [pc, #200]	@ (8001378 <SystemInit+0xd0>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a31      	ldr	r2, [pc, #196]	@ (8001378 <SystemInit+0xd0>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012bc:	4b2f      	ldr	r3, [pc, #188]	@ (800137c <SystemInit+0xd4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	d807      	bhi.n	80012d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c8:	4b2c      	ldr	r3, [pc, #176]	@ (800137c <SystemInit+0xd4>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f023 030f 	bic.w	r3, r3, #15
 80012d0:	4a2a      	ldr	r2, [pc, #168]	@ (800137c <SystemInit+0xd4>)
 80012d2:	f043 0307 	orr.w	r3, r3, #7
 80012d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d8:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <SystemInit+0xd8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a28      	ldr	r2, [pc, #160]	@ (8001380 <SystemInit+0xd8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012e4:	4b26      	ldr	r3, [pc, #152]	@ (8001380 <SystemInit+0xd8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <SystemInit+0xd8>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4924      	ldr	r1, [pc, #144]	@ (8001380 <SystemInit+0xd8>)
 80012f0:	4b24      	ldr	r3, [pc, #144]	@ (8001384 <SystemInit+0xdc>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012f6:	4b21      	ldr	r3, [pc, #132]	@ (800137c <SystemInit+0xd4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d007      	beq.n	8001312 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001302:	4b1e      	ldr	r3, [pc, #120]	@ (800137c <SystemInit+0xd4>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 030f 	bic.w	r3, r3, #15
 800130a:	4a1c      	ldr	r2, [pc, #112]	@ (800137c <SystemInit+0xd4>)
 800130c:	f043 0307 	orr.w	r3, r3, #7
 8001310:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <SystemInit+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <SystemInit+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800131e:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <SystemInit+0xd8>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <SystemInit+0xd8>)
 8001326:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <SystemInit+0xe0>)
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <SystemInit+0xd8>)
 800132c:	4a17      	ldr	r2, [pc, #92]	@ (800138c <SystemInit+0xe4>)
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <SystemInit+0xd8>)
 8001332:	4a17      	ldr	r2, [pc, #92]	@ (8001390 <SystemInit+0xe8>)
 8001334:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001336:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <SystemInit+0xd8>)
 8001338:	2200      	movs	r2, #0
 800133a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800133c:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <SystemInit+0xd8>)
 800133e:	4a14      	ldr	r2, [pc, #80]	@ (8001390 <SystemInit+0xe8>)
 8001340:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001342:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <SystemInit+0xd8>)
 8001344:	2200      	movs	r2, #0
 8001346:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001348:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <SystemInit+0xd8>)
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <SystemInit+0xe8>)
 800134c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <SystemInit+0xd8>)
 8001350:	2200      	movs	r2, #0
 8001352:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <SystemInit+0xd8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <SystemInit+0xd8>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800135e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <SystemInit+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001366:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <SystemInit+0xec>)
 8001368:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800136c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00
 800137c:	52002000 	.word	0x52002000
 8001380:	58024400 	.word	0x58024400
 8001384:	eaf6ed7f 	.word	0xeaf6ed7f
 8001388:	02020200 	.word	0x02020200
 800138c:	01ff0000 	.word	0x01ff0000
 8001390:	01010280 	.word	0x01010280
 8001394:	52004000 	.word	0x52004000

08001398 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800139c:	f7ff ff84 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480c      	ldr	r0, [pc, #48]	@ (80013d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013a2:	490d      	ldr	r1, [pc, #52]	@ (80013d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0a      	ldr	r2, [pc, #40]	@ (80013e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013b8:	4c0a      	ldr	r4, [pc, #40]	@ (80013e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013c6:	f005 f8c1 	bl	800654c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ca:	f7ff f917 	bl	80005fc <main>
  bx  lr
 80013ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80013d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80013d8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80013dc:	08006608 	.word	0x08006608
  ldr r2, =_sbss
 80013e0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80013e4:	24000404 	.word	0x24000404

080013e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e8:	e7fe      	b.n	80013e8 <ADC3_IRQHandler>
	...

080013ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f2:	2003      	movs	r0, #3
 80013f4:	f000 f976 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013f8:	f001 fe9a 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80013fc:	4602      	mov	r2, r0
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_Init+0x68>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	0a1b      	lsrs	r3, r3, #8
 8001404:	f003 030f 	and.w	r3, r3, #15
 8001408:	4913      	ldr	r1, [pc, #76]	@ (8001458 <HAL_Init+0x6c>)
 800140a:	5ccb      	ldrb	r3, [r1, r3]
 800140c:	f003 031f 	and.w	r3, r3, #31
 8001410:	fa22 f303 	lsr.w	r3, r2, r3
 8001414:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_Init+0x68>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	4a0e      	ldr	r2, [pc, #56]	@ (8001458 <HAL_Init+0x6c>)
 8001420:	5cd3      	ldrb	r3, [r2, r3]
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_Init+0x70>)
 800142e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001430:	4a0b      	ldr	r2, [pc, #44]	@ (8001460 <HAL_Init+0x74>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f814 	bl	8001464 <HAL_InitTick>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e002      	b.n	800144c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001446:	f7ff fc2d 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	58024400 	.word	0x58024400
 8001458:	080065c0 	.word	0x080065c0
 800145c:	24000004 	.word	0x24000004
 8001460:	24000000 	.word	0x24000000

08001464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_InitTick+0x60>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e021      	b.n	80014bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <HAL_InitTick+0x64>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_InitTick+0x60>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001486:	fbb3 f3f1 	udiv	r3, r3, r1
 800148a:	fbb2 f3f3 	udiv	r3, r2, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f000 f94d 	bl	800172e <HAL_SYSTICK_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e00e      	b.n	80014bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b0f      	cmp	r3, #15
 80014a2:	d80a      	bhi.n	80014ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a4:	2200      	movs	r2, #0
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014ac:	f000 f925 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014b0:	4a06      	ldr	r2, [pc, #24]	@ (80014cc <HAL_InitTick+0x68>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e000      	b.n	80014bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2400000c 	.word	0x2400000c
 80014c8:	24000000 	.word	0x24000000
 80014cc:	24000008 	.word	0x24000008

080014d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x20>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	461a      	mov	r2, r3
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_IncTick+0x24>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4413      	add	r3, r2
 80014e0:	4a04      	ldr	r2, [pc, #16]	@ (80014f4 <HAL_IncTick+0x24>)
 80014e2:	6013      	str	r3, [r2, #0]
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	2400000c 	.word	0x2400000c
 80014f4:	24000400 	.word	0x24000400

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	@ (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	24000400 	.word	0x24000400

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001528:	d005      	beq.n	8001536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b0a      	ldr	r3, [pc, #40]	@ (8001554 <HAL_Delay+0x44>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001536:	bf00      	nop
 8001538:	f7ff ffde 	bl	80014f8 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	429a      	cmp	r2, r3
 8001546:	d8f7      	bhi.n	8001538 <HAL_Delay+0x28>
  {
  }
}
 8001548:	bf00      	nop
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	2400000c 	.word	0x2400000c

08001558 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001560:	4b06      	ldr	r3, [pc, #24]	@ (800157c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001568:	4904      	ldr	r1, [pc, #16]	@ (800157c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	58000400 	.word	0x58000400

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0b      	ldr	r3, [pc, #44]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015a8:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	@ (80015c0 <__NVIC_SetPriorityGrouping+0x40>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	05fa0000 	.word	0x05fa0000

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	@ (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f1c3 0307 	rsb	r3, r3, #7
 8001652:	2b04      	cmp	r3, #4
 8001654:	bf28      	it	cs
 8001656:	2304      	movcs	r3, #4
 8001658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3304      	adds	r3, #4
 800165e:	2b06      	cmp	r3, #6
 8001660:	d902      	bls.n	8001668 <NVIC_EncodePriority+0x30>
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3b03      	subs	r3, #3
 8001666:	e000      	b.n	800166a <NVIC_EncodePriority+0x32>
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800166c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	401a      	ands	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001680:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	fa01 f303 	lsl.w	r3, r1, r3
 800168a:	43d9      	mvns	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001690:	4313      	orrs	r3, r2
         );
}
 8001692:	4618      	mov	r0, r3
 8001694:	3724      	adds	r7, #36	@ 0x24
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016c4:	f7ff ff8e 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff47 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff5e 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff90 	bl	8001638 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5f 	bl	80015e4 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff ffb2 	bl	80016a0 <SysTick_Config>
 800173c:	4603      	mov	r3, r0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0e3      	b.n	8001922 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001760:	2b00      	cmp	r3, #0
 8001762:	d106      	bne.n	8001772 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2223      	movs	r2, #35	@ 0x23
 8001768:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fab3 	bl	8000cd8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b6e      	ldr	r3, [pc, #440]	@ (800192c <HAL_ETH_Init+0x1e4>)
 8001774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001778:	4a6c      	ldr	r2, [pc, #432]	@ (800192c <HAL_ETH_Init+0x1e4>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001782:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <HAL_ETH_Init+0x1e4>)
 8001784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7a1b      	ldrb	r3, [r3, #8]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001798:	2000      	movs	r0, #0
 800179a:	f7ff fedd 	bl	8001558 <HAL_SYSCFG_ETHInterfaceSelect>
 800179e:	e003      	b.n	80017a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80017a0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80017a4:	f7ff fed8 	bl	8001558 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80017a8:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <HAL_ETH_Init+0x1e8>)
 80017aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017c4:	f7ff fe98 	bl	80014f8 <HAL_GetTick>
 80017c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017ca:	e011      	b.n	80017f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017cc:	f7ff fe94 	bl	80014f8 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017da:	d909      	bls.n	80017f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2204      	movs	r2, #4
 80017e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	22e0      	movs	r2, #224	@ 0xe0
 80017e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e098      	b.n	8001922 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1e4      	bne.n	80017cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f89e 	bl	8001944 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001808:	f001 fe0c 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800180c:	4603      	mov	r3, r0
 800180e:	4a49      	ldr	r2, [pc, #292]	@ (8001934 <HAL_ETH_Init+0x1ec>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	0c9a      	lsrs	r2, r3, #18
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3a01      	subs	r2, #1
 800181c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f000 fa81 	bl	8001d28 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001832:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800183e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001842:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	22e0      	movs	r2, #224	@ 0xe0
 800185e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e05d      	b.n	8001922 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001872:	4b31      	ldr	r3, [pc, #196]	@ (8001938 <HAL_ETH_Init+0x1f0>)
 8001874:	4013      	ands	r3, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6952      	ldr	r2, [r2, #20]
 800187a:	0051      	lsls	r1, r2, #1
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	430b      	orrs	r3, r1
 8001882:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001886:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 fae9 	bl	8001e62 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fb2f 	bl	8001ef4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	3305      	adds	r3, #5
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	021a      	lsls	r2, r3, #8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	3303      	adds	r3, #3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	061a      	lsls	r2, r3, #24
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	3302      	adds	r3, #2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	3301      	adds	r3, #1
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018e4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_ETH_Init+0x1f4>)
 80018f6:	430b      	orrs	r3, r1
 80018f8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b0d      	ldr	r3, [pc, #52]	@ (8001940 <HAL_ETH_Init+0x1f8>)
 800190a:	430b      	orrs	r3, r1
 800190c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2210      	movs	r2, #16
 800191c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	58024400 	.word	0x58024400
 8001930:	58000400 	.word	0x58000400
 8001934:	431bde83 	.word	0x431bde83
 8001938:	ffff8001 	.word	0xffff8001
 800193c:	0c020060 	.word	0x0c020060
 8001940:	0c20c000 	.word	0x0c20c000

08001944 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001954:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800195c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800195e:	f001 fd61 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8001962:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4a1a      	ldr	r2, [pc, #104]	@ (80019d0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d804      	bhi.n	8001976 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e022      	b.n	80019bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4a16      	ldr	r2, [pc, #88]	@ (80019d4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d204      	bcs.n	8001988 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e019      	b.n	80019bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	4a13      	ldr	r2, [pc, #76]	@ (80019d8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d915      	bls.n	80019bc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d804      	bhi.n	80019a2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e00c      	b.n	80019bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d804      	bhi.n	80019b4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	e003      	b.n	80019bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80019ba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	02160ebf 	.word	0x02160ebf
 80019d4:	03938700 	.word	0x03938700
 80019d8:	05f5e0ff 	.word	0x05f5e0ff
 80019dc:	08f0d17f 	.word	0x08f0d17f
 80019e0:	0ee6b27f 	.word	0x0ee6b27f

080019e4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	791b      	ldrb	r3, [r3, #4]
 80019fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	7b1b      	ldrb	r3, [r3, #12]
 8001a04:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	7b5b      	ldrb	r3, [r3, #13]
 8001a0c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	7b9b      	ldrb	r3, [r3, #14]
 8001a14:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	7bdb      	ldrb	r3, [r3, #15]
 8001a1c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	7c12      	ldrb	r2, [r2, #16]
 8001a24:	2a00      	cmp	r2, #0
 8001a26:	d102      	bne.n	8001a2e <ETH_SetMACConfig+0x4a>
 8001a28:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a2c:	e000      	b.n	8001a30 <ETH_SetMACConfig+0x4c>
 8001a2e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a30:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	7c52      	ldrb	r2, [r2, #17]
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d102      	bne.n	8001a40 <ETH_SetMACConfig+0x5c>
 8001a3a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a3e:	e000      	b.n	8001a42 <ETH_SetMACConfig+0x5e>
 8001a40:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	7c9b      	ldrb	r3, [r3, #18]
 8001a48:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a4a:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a50:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	7f1b      	ldrb	r3, [r3, #28]
 8001a5c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	7f5b      	ldrb	r3, [r3, #29]
 8001a64:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a66:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	7f92      	ldrb	r2, [r2, #30]
 8001a6c:	2a00      	cmp	r2, #0
 8001a6e:	d102      	bne.n	8001a76 <ETH_SetMACConfig+0x92>
 8001a70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a74:	e000      	b.n	8001a78 <ETH_SetMACConfig+0x94>
 8001a76:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a78:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	7fdb      	ldrb	r3, [r3, #31]
 8001a7e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a80:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a88:	2a00      	cmp	r2, #0
 8001a8a:	d102      	bne.n	8001a92 <ETH_SetMACConfig+0xae>
 8001a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a90:	e000      	b.n	8001a94 <ETH_SetMACConfig+0xb0>
 8001a92:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a94:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001aa2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001aa4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b56      	ldr	r3, [pc, #344]	@ (8001c10 <ETH_SetMACConfig+0x22c>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	68f9      	ldr	r1, [r7, #12]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ac6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ace:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ad0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ad8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ada:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001ae2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ae4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	d102      	bne.n	8001af6 <ETH_SetMACConfig+0x112>
 8001af0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001af4:	e000      	b.n	8001af8 <ETH_SetMACConfig+0x114>
 8001af6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001af8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001afe:	4313      	orrs	r3, r2
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	4b42      	ldr	r3, [pc, #264]	@ (8001c14 <ETH_SetMACConfig+0x230>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	430b      	orrs	r3, r1
 8001b14:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b1c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c18 <ETH_SetMACConfig+0x234>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	430b      	orrs	r3, r1
 8001b38:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b40:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b4e:	2a00      	cmp	r2, #0
 8001b50:	d101      	bne.n	8001b56 <ETH_SetMACConfig+0x172>
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	e000      	b.n	8001b58 <ETH_SetMACConfig+0x174>
 8001b56:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b58:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b60:	4313      	orrs	r3, r2
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b6a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001b80:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001b88:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b96:	f023 0103 	bic.w	r1, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001bae:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001bca:	2a00      	cmp	r2, #0
 8001bcc:	d101      	bne.n	8001bd2 <ETH_SetMACConfig+0x1ee>
 8001bce:	2240      	movs	r2, #64	@ 0x40
 8001bd0:	e000      	b.n	8001bd4 <ETH_SetMACConfig+0x1f0>
 8001bd2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001bd4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001bdc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001be6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001bf4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	00048083 	.word	0x00048083
 8001c14:	c0f88000 	.word	0xc0f88000
 8001c18:	fffffef0 	.word	0xfffffef0

08001c1c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b38      	ldr	r3, [pc, #224]	@ (8001d14 <ETH_SetDMAConfig+0xf8>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	6811      	ldr	r1, [r2, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	430b      	orrs	r3, r1
 8001c3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c42:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	791b      	ldrb	r3, [r3, #4]
 8001c48:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c4e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	7b1b      	ldrb	r3, [r3, #12]
 8001c54:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	4b2c      	ldr	r3, [pc, #176]	@ (8001d18 <ETH_SetDMAConfig+0xfc>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	68f9      	ldr	r1, [r7, #12]
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c74:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	7b5b      	ldrb	r3, [r3, #13]
 8001c7a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001c90:	4b22      	ldr	r3, [pc, #136]	@ (8001d1c <ETH_SetDMAConfig+0x100>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	68f9      	ldr	r1, [r7, #12]
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ca0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	7d1b      	ldrb	r3, [r3, #20]
 8001cac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	7f5b      	ldrb	r3, [r3, #29]
 8001cb4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <ETH_SetDMAConfig+0x104>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	68f9      	ldr	r1, [r7, #12]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cd6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	7f1b      	ldrb	r3, [r3, #28]
 8001cde:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cf0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <ETH_SetDMAConfig+0x108>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	68f9      	ldr	r1, [r7, #12]
 8001cfe:	430b      	orrs	r3, r1
 8001d00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d04:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	ffff87fd 	.word	0xffff87fd
 8001d18:	ffff2ffe 	.word	0xffff2ffe
 8001d1c:	fffec000 	.word	0xfffec000
 8001d20:	ffc0efef 	.word	0xffc0efef
 8001d24:	7fc0ffff 	.word	0x7fc0ffff

08001d28 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0a4      	sub	sp, #144	@ 0x90
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d36:	2300      	movs	r3, #0
 8001d38:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d52:	2301      	movs	r3, #1
 8001d54:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d68:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001d80:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001d84:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d90:	2301      	movs	r3, #1
 8001d92:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001da2:	2300      	movs	r3, #0
 8001da4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001daa:	2300      	movs	r3, #0
 8001dac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001dd2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001dd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ddc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e02:	2300      	movs	r3, #0
 8001e04:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e10:	4619      	mov	r1, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff fde6 	bl	80019e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e32:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e42:	2300      	movs	r3, #0
 8001e44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e48:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	4619      	mov	r1, r3
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff fee1 	bl	8001c1c <ETH_SetDMAConfig>
}
 8001e5a:	bf00      	nop
 8001e5c:	3790      	adds	r7, #144	@ 0x90
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	e01d      	b.n	8001eac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68d9      	ldr	r1, [r3, #12]
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	3206      	adds	r2, #6
 8001ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	d9de      	bls.n	8001e70 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ed4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ee4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	e023      	b.n	8001f4a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6919      	ldr	r1, [r3, #16]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	3212      	adds	r2, #18
 8001f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	3301      	adds	r3, #1
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d9d8      	bls.n	8001f02 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f76:	461a      	mov	r2, r3
 8001f78:	2303      	movs	r3, #3
 8001f7a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f8a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f9e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fbe:	4b86      	ldr	r3, [pc, #536]	@ (80021d8 <HAL_GPIO_Init+0x228>)
 8001fc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fc2:	e18c      	b.n	80022de <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 817e 	beq.w	80022d8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d005      	beq.n	8001ff4 <HAL_GPIO_Init+0x44>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d130      	bne.n	8002056 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4313      	orrs	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800202a:	2201      	movs	r2, #1
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	f003 0201 	and.w	r2, r3, #1
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b03      	cmp	r3, #3
 8002060:	d017      	beq.n	8002092 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2203      	movs	r2, #3
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4013      	ands	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d123      	bne.n	80020e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	220f      	movs	r2, #15
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0307 	and.w	r3, r3, #7
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	69b9      	ldr	r1, [r7, #24]
 80020e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2203      	movs	r2, #3
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0203 	and.w	r2, r3, #3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80d8 	beq.w	80022d8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002128:	4b2c      	ldr	r3, [pc, #176]	@ (80021dc <HAL_GPIO_Init+0x22c>)
 800212a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800212e:	4a2b      	ldr	r2, [pc, #172]	@ (80021dc <HAL_GPIO_Init+0x22c>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002138:	4b28      	ldr	r3, [pc, #160]	@ (80021dc <HAL_GPIO_Init+0x22c>)
 800213a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002146:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <HAL_GPIO_Init+0x230>)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	089b      	lsrs	r3, r3, #2
 800214c:	3302      	adds	r3, #2
 800214e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1d      	ldr	r2, [pc, #116]	@ (80021e4 <HAL_GPIO_Init+0x234>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d04a      	beq.n	8002208 <HAL_GPIO_Init+0x258>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <HAL_GPIO_Init+0x238>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a1b      	ldr	r2, [pc, #108]	@ (80021ec <HAL_GPIO_Init+0x23c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1a      	ldr	r2, [pc, #104]	@ (80021f0 <HAL_GPIO_Init+0x240>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x21a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <HAL_GPIO_Init+0x244>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x216>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a18      	ldr	r2, [pc, #96]	@ (80021f8 <HAL_GPIO_Init+0x248>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x212>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a17      	ldr	r2, [pc, #92]	@ (80021fc <HAL_GPIO_Init+0x24c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x20e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a16      	ldr	r2, [pc, #88]	@ (8002200 <HAL_GPIO_Init+0x250>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x20a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a15      	ldr	r2, [pc, #84]	@ (8002204 <HAL_GPIO_Init+0x254>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x206>
 80021b2:	2309      	movs	r3, #9
 80021b4:	e029      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021b6:	230a      	movs	r3, #10
 80021b8:	e027      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021ba:	2307      	movs	r3, #7
 80021bc:	e025      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021be:	2306      	movs	r3, #6
 80021c0:	e023      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021c2:	2305      	movs	r3, #5
 80021c4:	e021      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021c6:	2304      	movs	r3, #4
 80021c8:	e01f      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021ca:	2303      	movs	r3, #3
 80021cc:	e01d      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021ce:	2302      	movs	r3, #2
 80021d0:	e01b      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e019      	b.n	800220a <HAL_GPIO_Init+0x25a>
 80021d6:	bf00      	nop
 80021d8:	58000080 	.word	0x58000080
 80021dc:	58024400 	.word	0x58024400
 80021e0:	58000400 	.word	0x58000400
 80021e4:	58020000 	.word	0x58020000
 80021e8:	58020400 	.word	0x58020400
 80021ec:	58020800 	.word	0x58020800
 80021f0:	58020c00 	.word	0x58020c00
 80021f4:	58021000 	.word	0x58021000
 80021f8:	58021400 	.word	0x58021400
 80021fc:	58021800 	.word	0x58021800
 8002200:	58021c00 	.word	0x58021c00
 8002204:	58022400 	.word	0x58022400
 8002208:	2300      	movs	r3, #0
 800220a:	69fa      	ldr	r2, [r7, #28]
 800220c:	f002 0203 	and.w	r2, r2, #3
 8002210:	0092      	lsls	r2, r2, #2
 8002212:	4093      	lsls	r3, r2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221a:	4938      	ldr	r1, [pc, #224]	@ (80022fc <HAL_GPIO_Init+0x34c>)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	3302      	adds	r3, #2
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800224e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800227c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa22 f303 	lsr.w	r3, r2, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f47f ae6b 	bne.w	8001fc4 <HAL_GPIO_Init+0x14>
  }
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	3724      	adds	r7, #36	@ 0x24
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	58000400 	.word	0x58000400

08002300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	460b      	mov	r3, r1
 800230a:	807b      	strh	r3, [r7, #2]
 800230c:	4613      	mov	r3, r2
 800230e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002310:	787b      	ldrb	r3, [r7, #1]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002316:	887a      	ldrh	r2, [r7, #2]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800231c:	e003      	b.n	8002326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800231e:	887b      	ldrh	r3, [r7, #2]
 8002320:	041a      	lsls	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	619a      	str	r2, [r3, #24]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e08b      	b.n	800245e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7fe fd8a 	bl	8000e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	@ 0x24
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	e006      	b.n	80023bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80023ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d108      	bne.n	80023d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	e007      	b.n	80023e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b1d      	ldr	r3, [pc, #116]	@ (8002468 <HAL_I2C_Init+0x134>)
 80023f2:	430b      	orrs	r3, r1
 80023f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002404:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691a      	ldr	r2, [r3, #16]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69d9      	ldr	r1, [r3, #28]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0201 	orr.w	r2, r2, #1
 800243e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	02008000 	.word	0x02008000

0800246c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b20      	cmp	r3, #32
 8002480:	d138      	bne.n	80024f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800248c:	2302      	movs	r3, #2
 800248e:	e032      	b.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2224      	movs	r2, #36	@ 0x24
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80024be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b20      	cmp	r3, #32
 8002516:	d139      	bne.n	800258c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800251e:	2b01      	cmp	r3, #1
 8002520:	d101      	bne.n	8002526 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002522:	2302      	movs	r3, #2
 8002524:	e033      	b.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2224      	movs	r2, #36	@ 0x24
 8002532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0201 	bic.w	r2, r2, #1
 8002544:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002554:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0201 	orr.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	e000      	b.n	800258e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800258c:	2302      	movs	r3, #2
  }
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80025a4:	4b19      	ldr	r3, [pc, #100]	@ (800260c <HAL_PWREx_ConfigSupply+0x70>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d00a      	beq.n	80025c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025b0:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_PWREx_ConfigSupply+0x70>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d001      	beq.n	80025c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e01f      	b.n	8002602 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025c2:	2300      	movs	r3, #0
 80025c4:	e01d      	b.n	8002602 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025c6:	4b11      	ldr	r3, [pc, #68]	@ (800260c <HAL_PWREx_ConfigSupply+0x70>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f023 0207 	bic.w	r2, r3, #7
 80025ce:	490f      	ldr	r1, [pc, #60]	@ (800260c <HAL_PWREx_ConfigSupply+0x70>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025d6:	f7fe ff8f 	bl	80014f8 <HAL_GetTick>
 80025da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025dc:	e009      	b.n	80025f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025de:	f7fe ff8b 	bl	80014f8 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025ec:	d901      	bls.n	80025f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e007      	b.n	8002602 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025f2:	4b06      	ldr	r3, [pc, #24]	@ (800260c <HAL_PWREx_ConfigSupply+0x70>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025fe:	d1ee      	bne.n	80025de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	58024800 	.word	0x58024800

08002610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e3c8      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8087 	beq.w	800273e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002630:	4b88      	ldr	r3, [pc, #544]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002638:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800263a:	4b86      	ldr	r3, [pc, #536]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800263c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002642:	2b10      	cmp	r3, #16
 8002644:	d007      	beq.n	8002656 <HAL_RCC_OscConfig+0x46>
 8002646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002648:	2b18      	cmp	r3, #24
 800264a:	d110      	bne.n	800266e <HAL_RCC_OscConfig+0x5e>
 800264c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d10b      	bne.n	800266e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002656:	4b7f      	ldr	r3, [pc, #508]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d06c      	beq.n	800273c <HAL_RCC_OscConfig+0x12c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d168      	bne.n	800273c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e3a2      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002676:	d106      	bne.n	8002686 <HAL_RCC_OscConfig+0x76>
 8002678:	4b76      	ldr	r3, [pc, #472]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a75      	ldr	r2, [pc, #468]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800267e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002682:	6013      	str	r3, [r2, #0]
 8002684:	e02e      	b.n	80026e4 <HAL_RCC_OscConfig+0xd4>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x98>
 800268e:	4b71      	ldr	r3, [pc, #452]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a70      	ldr	r2, [pc, #448]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	4b6e      	ldr	r3, [pc, #440]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	e01d      	b.n	80026e4 <HAL_RCC_OscConfig+0xd4>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b0:	d10c      	bne.n	80026cc <HAL_RCC_OscConfig+0xbc>
 80026b2:	4b68      	ldr	r3, [pc, #416]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a67      	ldr	r2, [pc, #412]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	4b65      	ldr	r3, [pc, #404]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a64      	ldr	r2, [pc, #400]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCC_OscConfig+0xd4>
 80026cc:	4b61      	ldr	r3, [pc, #388]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a60      	ldr	r2, [pc, #384]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80026de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ec:	f7fe ff04 	bl	80014f8 <HAL_GetTick>
 80026f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f2:	e008      	b.n	8002706 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f4:	f7fe ff00 	bl	80014f8 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b64      	cmp	r3, #100	@ 0x64
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e356      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002706:	4b53      	ldr	r3, [pc, #332]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d0f0      	beq.n	80026f4 <HAL_RCC_OscConfig+0xe4>
 8002712:	e014      	b.n	800273e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe fef0 	bl	80014f8 <HAL_GetTick>
 8002718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800271c:	f7fe feec 	bl	80014f8 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b64      	cmp	r3, #100	@ 0x64
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e342      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800272e:	4b49      	ldr	r3, [pc, #292]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x10c>
 800273a:	e000      	b.n	800273e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800273c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 808c 	beq.w	8002864 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800274c:	4b41      	ldr	r3, [pc, #260]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002754:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002756:	4b3f      	ldr	r3, [pc, #252]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_RCC_OscConfig+0x162>
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	2b18      	cmp	r3, #24
 8002766:	d137      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c8>
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0303 	and.w	r3, r3, #3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d132      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002772:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d005      	beq.n	800278a <HAL_RCC_OscConfig+0x17a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e314      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800278a:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0219 	bic.w	r2, r3, #25
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	492f      	ldr	r1, [pc, #188]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002798:	4313      	orrs	r3, r2
 800279a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279c:	f7fe feac 	bl	80014f8 <HAL_GetTick>
 80027a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a4:	f7fe fea8 	bl	80014f8 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e2fe      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b6:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c2:	4b24      	ldr	r3, [pc, #144]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	061b      	lsls	r3, r3, #24
 80027d0:	4920      	ldr	r1, [pc, #128]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d6:	e045      	b.n	8002864 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d026      	beq.n	800282e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 0219 	bic.w	r2, r3, #25
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4919      	ldr	r1, [pc, #100]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f2:	f7fe fe81 	bl	80014f8 <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027fa:	f7fe fe7d 	bl	80014f8 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e2d3      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0304 	and.w	r3, r3, #4
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002818:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	490b      	ldr	r1, [pc, #44]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e01a      	b.n	8002864 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b09      	ldr	r3, [pc, #36]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a08      	ldr	r2, [pc, #32]	@ (8002854 <HAL_RCC_OscConfig+0x244>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fe5d 	bl	80014f8 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fe59 	bl	80014f8 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d903      	bls.n	8002858 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2af      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
 8002854:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002858:	4b96      	ldr	r3, [pc, #600]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1ee      	bne.n	8002842 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	2b00      	cmp	r3, #0
 800286e:	d06a      	beq.n	8002946 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002870:	4b90      	ldr	r3, [pc, #576]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002878:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800287a:	4b8e      	ldr	r3, [pc, #568]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 800287c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b08      	cmp	r3, #8
 8002884:	d007      	beq.n	8002896 <HAL_RCC_OscConfig+0x286>
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	2b18      	cmp	r3, #24
 800288a:	d11b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2b4>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d116      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002896:	4b87      	ldr	r3, [pc, #540]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_RCC_OscConfig+0x29e>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b80      	cmp	r3, #128	@ 0x80
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e282      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ae:	4b81      	ldr	r3, [pc, #516]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	497d      	ldr	r1, [pc, #500]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028c2:	e040      	b.n	8002946 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d023      	beq.n	8002914 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028cc:	4b79      	ldr	r3, [pc, #484]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a78      	ldr	r2, [pc, #480]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80028d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7fe fe0e 	bl	80014f8 <HAL_GetTick>
 80028dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028e0:	f7fe fe0a 	bl	80014f8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e260      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028f2:	4b70      	ldr	r3, [pc, #448]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028fe:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	4969      	ldr	r1, [pc, #420]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 800290e:	4313      	orrs	r3, r2
 8002910:	60cb      	str	r3, [r1, #12]
 8002912:	e018      	b.n	8002946 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002914:	4b67      	ldr	r3, [pc, #412]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a66      	ldr	r2, [pc, #408]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 800291a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800291e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe fdea 	bl	80014f8 <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002928:	f7fe fde6 	bl	80014f8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e23c      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800293a:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d036      	beq.n	80029c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d019      	beq.n	800298e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b56      	ldr	r3, [pc, #344]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 800295c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800295e:	4a55      	ldr	r2, [pc, #340]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe fdc7 	bl	80014f8 <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296e:	f7fe fdc3 	bl	80014f8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e219      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002980:	4b4c      	ldr	r3, [pc, #304]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x35e>
 800298c:	e018      	b.n	80029c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298e:	4b49      	ldr	r3, [pc, #292]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002992:	4a48      	ldr	r2, [pc, #288]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7fe fdad 	bl	80014f8 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a2:	f7fe fda9 	bl	80014f8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1ff      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80029b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0320 	and.w	r3, r3, #32
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d036      	beq.n	8002a3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d019      	beq.n	8002a08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029d4:	4b37      	ldr	r3, [pc, #220]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a36      	ldr	r2, [pc, #216]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80029da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e0:	f7fe fd8a 	bl	80014f8 <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029e8:	f7fe fd86 	bl	80014f8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e1dc      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029fa:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x3d8>
 8002a06:	e018      	b.n	8002a3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a08:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a29      	ldr	r2, [pc, #164]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002a0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a14:	f7fe fd70 	bl	80014f8 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a1c:	f7fe fd6c 	bl	80014f8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e1c2      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a2e:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 8086 	beq.w	8002b54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <HAL_RCC_OscConfig+0x4a8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab8 <HAL_RCC_OscConfig+0x4a8>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fd50 	bl	80014f8 <HAL_GetTick>
 8002a58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5c:	f7fe fd4c 	bl	80014f8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b64      	cmp	r3, #100	@ 0x64
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e1a2      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a6e:	4b12      	ldr	r3, [pc, #72]	@ (8002ab8 <HAL_RCC_OscConfig+0x4a8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f0      	beq.n	8002a5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d106      	bne.n	8002a90 <HAL_RCC_OscConfig+0x480>
 8002a82:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a86:	4a0b      	ldr	r2, [pc, #44]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002a88:	f043 0301 	orr.w	r3, r3, #1
 8002a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8e:	e032      	b.n	8002af6 <HAL_RCC_OscConfig+0x4e6>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d111      	bne.n	8002abc <HAL_RCC_OscConfig+0x4ac>
 8002a98:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a05      	ldr	r2, [pc, #20]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa4:	4b03      	ldr	r3, [pc, #12]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4a02      	ldr	r2, [pc, #8]	@ (8002ab4 <HAL_RCC_OscConfig+0x4a4>)
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab0:	e021      	b.n	8002af6 <HAL_RCC_OscConfig+0x4e6>
 8002ab2:	bf00      	nop
 8002ab4:	58024400 	.word	0x58024400
 8002ab8:	58024800 	.word	0x58024800
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCC_OscConfig+0x4ce>
 8002ac4:	4b83      	ldr	r3, [pc, #524]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac8:	4a82      	ldr	r2, [pc, #520]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad0:	4b80      	ldr	r3, [pc, #512]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	4a7f      	ldr	r2, [pc, #508]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0x4e6>
 8002ade:	4b7d      	ldr	r3, [pc, #500]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae2:	4a7c      	ldr	r2, [pc, #496]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aea:	4b7a      	ldr	r3, [pc, #488]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a79      	ldr	r2, [pc, #484]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d015      	beq.n	8002b2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afe:	f7fe fcfb 	bl	80014f8 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe fcf7 	bl	80014f8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e14b      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1c:	4b6d      	ldr	r3, [pc, #436]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0ee      	beq.n	8002b06 <HAL_RCC_OscConfig+0x4f6>
 8002b28:	e014      	b.n	8002b54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fce5 	bl	80014f8 <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fce1 	bl	80014f8 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e135      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b48:	4b62      	ldr	r3, [pc, #392]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1ee      	bne.n	8002b32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 812a 	beq.w	8002db2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b66:	2b18      	cmp	r3, #24
 8002b68:	f000 80ba 	beq.w	8002ce0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	f040 8095 	bne.w	8002ca0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b57      	ldr	r3, [pc, #348]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a56      	ldr	r2, [pc, #344]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fcb9 	bl	80014f8 <HAL_GetTick>
 8002b86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7fe fcb5 	bl	80014f8 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e10b      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1f0      	bne.n	8002b8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba8:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002baa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bac:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <HAL_RCC_OscConfig+0x6c8>)
 8002bae:	4013      	ands	r3, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bb8:	0112      	lsls	r2, r2, #4
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	4945      	ldr	r1, [pc, #276]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	628b      	str	r3, [r1, #40]	@ 0x28
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	025b      	lsls	r3, r3, #9
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bea:	3b01      	subs	r3, #1
 8002bec:	061b      	lsls	r3, r3, #24
 8002bee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bf2:	4938      	ldr	r1, [pc, #224]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bf8:	4b36      	ldr	r3, [pc, #216]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	4a35      	ldr	r2, [pc, #212]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c04:	4b33      	ldr	r3, [pc, #204]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c08:	4b34      	ldr	r3, [pc, #208]	@ (8002cdc <HAL_RCC_OscConfig+0x6cc>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c10:	00d2      	lsls	r2, r2, #3
 8002c12:	4930      	ldr	r1, [pc, #192]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c18:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	f023 020c 	bic.w	r2, r3, #12
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	492b      	ldr	r1, [pc, #172]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	f023 0202 	bic.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	4927      	ldr	r1, [pc, #156]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	4a24      	ldr	r2, [pc, #144]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c48:	4b22      	ldr	r3, [pc, #136]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	4a21      	ldr	r2, [pc, #132]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c58:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c60:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a18      	ldr	r2, [pc, #96]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fc3e 	bl	80014f8 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fc3a 	bl	80014f8 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e090      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x670>
 8002c9e:	e088      	b.n	8002db2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002ca6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cac:	f7fe fc24 	bl	80014f8 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe fc20 	bl	80014f8 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e076      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc6:	4b03      	ldr	r3, [pc, #12]	@ (8002cd4 <HAL_RCC_OscConfig+0x6c4>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f0      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x6a4>
 8002cd2:	e06e      	b.n	8002db2 <HAL_RCC_OscConfig+0x7a2>
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	fffffc0c 	.word	0xfffffc0c
 8002cdc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ce0:	4b36      	ldr	r3, [pc, #216]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ce6:	4b35      	ldr	r3, [pc, #212]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d031      	beq.n	8002d58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d12a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d122      	bne.n	8002d58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d11a      	bne.n	8002d58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	0a5b      	lsrs	r3, r3, #9
 8002d26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d111      	bne.n	8002d58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d108      	bne.n	8002d58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0e1b      	lsrs	r3, r3, #24
 8002d4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e02b      	b.n	8002db4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d5c:	4b17      	ldr	r3, [pc, #92]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d01f      	beq.n	8002db2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d72:	4b12      	ldr	r3, [pc, #72]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002d78:	f023 0301 	bic.w	r3, r3, #1
 8002d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d7e:	f7fe fbbb 	bl	80014f8 <HAL_GetTick>
 8002d82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d84:	bf00      	nop
 8002d86:	f7fe fbb7 	bl	80014f8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d0f9      	beq.n	8002d86 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d92:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <HAL_RCC_OscConfig+0x7b0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d9e:	00d2      	lsls	r2, r2, #3
 8002da0:	4906      	ldr	r1, [pc, #24]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002da6:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	4a04      	ldr	r2, [pc, #16]	@ (8002dbc <HAL_RCC_OscConfig+0x7ac>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3730      	adds	r7, #48	@ 0x30
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	ffff0007 	.word	0xffff0007

08002dc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e19c      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b87      	ldr	r3, [pc, #540]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020f 	bic.w	r2, r3, #15
 8002dee:	4985      	ldr	r1, [pc, #532]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b83      	ldr	r3, [pc, #524]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e184      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d010      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	4b7b      	ldr	r3, [pc, #492]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d908      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e24:	4b78      	ldr	r3, [pc, #480]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	4975      	ldr	r1, [pc, #468]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d010      	beq.n	8002e64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	695a      	ldr	r2, [r3, #20]
 8002e46:	4b70      	ldr	r3, [pc, #448]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d908      	bls.n	8002e64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e52:	4b6d      	ldr	r3, [pc, #436]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	496a      	ldr	r1, [pc, #424]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	699a      	ldr	r2, [r3, #24]
 8002e74:	4b64      	ldr	r3, [pc, #400]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d908      	bls.n	8002e92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e80:	4b61      	ldr	r3, [pc, #388]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	69db      	ldr	r3, [r3, #28]
 8002e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	495e      	ldr	r1, [pc, #376]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69da      	ldr	r2, [r3, #28]
 8002ea2:	4b59      	ldr	r3, [pc, #356]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d908      	bls.n	8002ec0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eae:	4b56      	ldr	r3, [pc, #344]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	4953      	ldr	r1, [pc, #332]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d908      	bls.n	8002eee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b4a      	ldr	r3, [pc, #296]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f023 020f 	bic.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4947      	ldr	r1, [pc, #284]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d055      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002efa:	4b43      	ldr	r3, [pc, #268]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4940      	ldr	r1, [pc, #256]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f14:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d121      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0f6      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b03      	cmp	r3, #3
 8002f2a:	d107      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f2c:	4b36      	ldr	r3, [pc, #216]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0ea      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f44:	4b30      	ldr	r3, [pc, #192]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e0de      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f54:	4b2c      	ldr	r3, [pc, #176]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0d6      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f64:	4b28      	ldr	r3, [pc, #160]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f023 0207 	bic.w	r2, r3, #7
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4925      	ldr	r1, [pc, #148]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f76:	f7fe fabf 	bl	80014f8 <HAL_GetTick>
 8002f7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7e:	f7fe fabb 	bl	80014f8 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0be      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f94:	4b1c      	ldr	r3, [pc, #112]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d1eb      	bne.n	8002f7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d010      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	4b14      	ldr	r3, [pc, #80]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d208      	bcs.n	8002fd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc2:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f023 020f 	bic.w	r2, r3, #15
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	490e      	ldr	r1, [pc, #56]	@ (8003008 <HAL_RCC_ClockConfig+0x244>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	683a      	ldr	r2, [r7, #0]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d214      	bcs.n	800300c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe2:	4b08      	ldr	r3, [pc, #32]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 020f 	bic.w	r2, r3, #15
 8002fea:	4906      	ldr	r1, [pc, #24]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <HAL_RCC_ClockConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e086      	b.n	8003112 <HAL_RCC_ClockConfig+0x34e>
 8003004:	52002000 	.word	0x52002000
 8003008:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	4b3f      	ldr	r3, [pc, #252]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003024:	429a      	cmp	r2, r3
 8003026:	d208      	bcs.n	800303a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003028:	4b3c      	ldr	r3, [pc, #240]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	4939      	ldr	r1, [pc, #228]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 8003036:	4313      	orrs	r3, r2
 8003038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d010      	beq.n	8003068 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	4b34      	ldr	r3, [pc, #208]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003052:	429a      	cmp	r2, r3
 8003054:	d208      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003056:	4b31      	ldr	r3, [pc, #196]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	492e      	ldr	r1, [pc, #184]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 8003064:	4313      	orrs	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d010      	beq.n	8003096 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699a      	ldr	r2, [r3, #24]
 8003078:	4b28      	ldr	r3, [pc, #160]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 800307a:	69db      	ldr	r3, [r3, #28]
 800307c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003080:	429a      	cmp	r2, r3
 8003082:	d208      	bcs.n	8003096 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003084:	4b25      	ldr	r3, [pc, #148]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	4922      	ldr	r1, [pc, #136]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 8003092:	4313      	orrs	r3, r2
 8003094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d010      	beq.n	80030c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	4b1d      	ldr	r3, [pc, #116]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d208      	bcs.n	80030c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030b2:	4b1a      	ldr	r3, [pc, #104]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	4917      	ldr	r1, [pc, #92]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030c4:	f000 f834 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b14      	ldr	r3, [pc, #80]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	4912      	ldr	r1, [pc, #72]	@ (8003120 <HAL_RCC_ClockConfig+0x35c>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	f003 031f 	and.w	r3, r3, #31
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030e2:	4b0e      	ldr	r3, [pc, #56]	@ (800311c <HAL_RCC_ClockConfig+0x358>)
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f003 030f 	and.w	r3, r3, #15
 80030ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003120 <HAL_RCC_ClockConfig+0x35c>)
 80030ec:	5cd3      	ldrb	r3, [r2, r3]
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
 80030f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <HAL_RCC_ClockConfig+0x360>)
 80030fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <HAL_RCC_ClockConfig+0x364>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003102:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x368>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fe f9ac 	bl	8001464 <HAL_InitTick>
 800310c:	4603      	mov	r3, r0
 800310e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	58024400 	.word	0x58024400
 8003120:	080065c0 	.word	0x080065c0
 8003124:	24000004 	.word	0x24000004
 8003128:	24000000 	.word	0x24000000
 800312c:	24000008 	.word	0x24000008

08003130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	@ 0x24
 8003134:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003136:	4bb3      	ldr	r3, [pc, #716]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800313e:	2b18      	cmp	r3, #24
 8003140:	f200 8155 	bhi.w	80033ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003144:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	080031b1 	.word	0x080031b1
 8003150:	080033ef 	.word	0x080033ef
 8003154:	080033ef 	.word	0x080033ef
 8003158:	080033ef 	.word	0x080033ef
 800315c:	080033ef 	.word	0x080033ef
 8003160:	080033ef 	.word	0x080033ef
 8003164:	080033ef 	.word	0x080033ef
 8003168:	080033ef 	.word	0x080033ef
 800316c:	080031d7 	.word	0x080031d7
 8003170:	080033ef 	.word	0x080033ef
 8003174:	080033ef 	.word	0x080033ef
 8003178:	080033ef 	.word	0x080033ef
 800317c:	080033ef 	.word	0x080033ef
 8003180:	080033ef 	.word	0x080033ef
 8003184:	080033ef 	.word	0x080033ef
 8003188:	080033ef 	.word	0x080033ef
 800318c:	080031dd 	.word	0x080031dd
 8003190:	080033ef 	.word	0x080033ef
 8003194:	080033ef 	.word	0x080033ef
 8003198:	080033ef 	.word	0x080033ef
 800319c:	080033ef 	.word	0x080033ef
 80031a0:	080033ef 	.word	0x080033ef
 80031a4:	080033ef 	.word	0x080033ef
 80031a8:	080033ef 	.word	0x080033ef
 80031ac:	080031e3 	.word	0x080031e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b0:	4b94      	ldr	r3, [pc, #592]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d009      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031bc:	4b91      	ldr	r3, [pc, #580]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	4a90      	ldr	r2, [pc, #576]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
 80031cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031ce:	e111      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d2:	61bb      	str	r3, [r7, #24]
      break;
 80031d4:	e10e      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031d6:	4b8d      	ldr	r3, [pc, #564]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031d8:	61bb      	str	r3, [r7, #24]
      break;
 80031da:	e10b      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031de:	61bb      	str	r3, [r7, #24]
      break;
 80031e0:	e108      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031e2:	4b88      	ldr	r3, [pc, #544]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031ec:	4b85      	ldr	r3, [pc, #532]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031f8:	4b82      	ldr	r3, [pc, #520]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003202:	4b80      	ldr	r3, [pc, #512]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	fb02 f303 	mul.w	r3, r2, r3
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80e1 	beq.w	80033e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b02      	cmp	r3, #2
 800322a:	f000 8083 	beq.w	8003334 <HAL_RCC_GetSysClockFreq+0x204>
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	f200 80a1 	bhi.w	8003378 <HAL_RCC_GetSysClockFreq+0x248>
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x114>
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d056      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003242:	e099      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003244:	4b6f      	ldr	r3, [pc, #444]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d02d      	beq.n	80032ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003250:	4b6c      	ldr	r3, [pc, #432]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	08db      	lsrs	r3, r3, #3
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	4a6b      	ldr	r2, [pc, #428]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	ee07 3a90 	vmov	s15, r3
 8003268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327a:	4b62      	ldr	r3, [pc, #392]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328a:	ed97 6a02 	vldr	s12, [r7, #8]
 800328e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800329e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032aa:	e087      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	ee07 3a90 	vmov	s15, r3
 80032b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032be:	4b51      	ldr	r3, [pc, #324]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ee:	e065      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800341c <HAL_RCC_GetSysClockFreq+0x2ec>
 80032fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003302:	4b40      	ldr	r3, [pc, #256]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003312:	ed97 6a02 	vldr	s12, [r7, #8]
 8003316:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800331e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003332:	e043      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	ee07 3a90 	vmov	s15, r3
 800333a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800333e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003420 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003346:	4b2f      	ldr	r3, [pc, #188]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003356:	ed97 6a02 	vldr	s12, [r7, #8]
 800335a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800335e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800336a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003376:	e021      	b.n	80033bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003382:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800341c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338a:	4b1e      	ldr	r3, [pc, #120]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339a:	ed97 6a02 	vldr	s12, [r7, #8]
 800339e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	0a5b      	lsrs	r3, r3, #9
 80033c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033c6:	3301      	adds	r3, #1
 80033c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80033d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e0:	ee17 3a90 	vmov	r3, s15
 80033e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61bb      	str	r3, [r7, #24]
      break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033ee:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f0:	61bb      	str	r3, [r7, #24]
      break;
 80033f2:	bf00      	nop
  }

  return sysclockfreq;
 80033f4:	69bb      	ldr	r3, [r7, #24]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	58024400 	.word	0x58024400
 8003408:	03d09000 	.word	0x03d09000
 800340c:	003d0900 	.word	0x003d0900
 8003410:	007a1200 	.word	0x007a1200
 8003414:	46000000 	.word	0x46000000
 8003418:	4c742400 	.word	0x4c742400
 800341c:	4a742400 	.word	0x4a742400
 8003420:	4af42400 	.word	0x4af42400

08003424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800342a:	f7ff fe81 	bl	8003130 <HAL_RCC_GetSysClockFreq>
 800342e:	4602      	mov	r2, r0
 8003430:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <HAL_RCC_GetHCLKFreq+0x50>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	490f      	ldr	r1, [pc, #60]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x54>)
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003448:	4b0a      	ldr	r3, [pc, #40]	@ (8003474 <HAL_RCC_GetHCLKFreq+0x50>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 030f 	and.w	r3, r3, #15
 8003450:	4a09      	ldr	r2, [pc, #36]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x54>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a07      	ldr	r2, [pc, #28]	@ (800347c <HAL_RCC_GetHCLKFreq+0x58>)
 8003460:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003462:	4a07      	ldr	r2, [pc, #28]	@ (8003480 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003468:	4b04      	ldr	r3, [pc, #16]	@ (800347c <HAL_RCC_GetHCLKFreq+0x58>)
 800346a:	681b      	ldr	r3, [r3, #0]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58024400 	.word	0x58024400
 8003478:	080065c0 	.word	0x080065c0
 800347c:	24000004 	.word	0x24000004
 8003480:	24000000 	.word	0x24000000

08003484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003488:	f7ff ffcc 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 800348c:	4602      	mov	r2, r0
 800348e:	4b06      	ldr	r3, [pc, #24]	@ (80034a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	091b      	lsrs	r3, r3, #4
 8003494:	f003 0307 	and.w	r3, r3, #7
 8003498:	4904      	ldr	r1, [pc, #16]	@ (80034ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800349a:	5ccb      	ldrb	r3, [r1, r3]
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	58024400 	.word	0x58024400
 80034ac:	080065c0 	.word	0x080065c0

080034b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034b4:	f7ff ffb6 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b06      	ldr	r3, [pc, #24]	@ (80034d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	0a1b      	lsrs	r3, r3, #8
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	4904      	ldr	r1, [pc, #16]	@ (80034d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80034c6:	5ccb      	ldrb	r3, [r1, r3]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	58024400 	.word	0x58024400
 80034d8:	080065c0 	.word	0x080065c0

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b0c6      	sub	sp, #280	@ 0x118
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034ee:	2300      	movs	r3, #0
 80034f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003500:	2500      	movs	r5, #0
 8003502:	ea54 0305 	orrs.w	r3, r4, r5
 8003506:	d049      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800350e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003512:	d02f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003514:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003518:	d828      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800351a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800351e:	d01a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003520:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003524:	d822      	bhi.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800352e:	d007      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003530:	e01c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003532:	4bab      	ldr	r3, [pc, #684]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003536:	4aaa      	ldr	r2, [pc, #680]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800353e:	e01a      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003544:	3308      	adds	r3, #8
 8003546:	2102      	movs	r1, #2
 8003548:	4618      	mov	r0, r3
 800354a:	f001 fc25 	bl	8004d98 <RCCEx_PLL2_Config>
 800354e:	4603      	mov	r3, r0
 8003550:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003554:	e00f      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800355a:	3328      	adds	r3, #40	@ 0x28
 800355c:	2102      	movs	r1, #2
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fccc 	bl	8004efc <RCCEx_PLL3_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800356a:	e004      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003572:	e000      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003576:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10a      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800357e:	4b98      	ldr	r3, [pc, #608]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800358a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800358c:	4a94      	ldr	r2, [pc, #592]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800358e:	430b      	orrs	r3, r1
 8003590:	6513      	str	r3, [r2, #80]	@ 0x50
 8003592:	e003      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003598:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800359c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80035a8:	f04f 0900 	mov.w	r9, #0
 80035ac:	ea58 0309 	orrs.w	r3, r8, r9
 80035b0:	d047      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d82a      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035bc:	a201      	add	r2, pc, #4	@ (adr r2, 80035c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	080035d9 	.word	0x080035d9
 80035c8:	080035e7 	.word	0x080035e7
 80035cc:	080035fd 	.word	0x080035fd
 80035d0:	0800361b 	.word	0x0800361b
 80035d4:	0800361b 	.word	0x0800361b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d8:	4b81      	ldr	r3, [pc, #516]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	4a80      	ldr	r2, [pc, #512]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e4:	e01a      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ea:	3308      	adds	r3, #8
 80035ec:	2100      	movs	r1, #0
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 fbd2 	bl	8004d98 <RCCEx_PLL2_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035fa:	e00f      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	3328      	adds	r3, #40	@ 0x28
 8003602:	2100      	movs	r1, #0
 8003604:	4618      	mov	r0, r3
 8003606:	f001 fc79 	bl	8004efc <RCCEx_PLL3_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003610:	e004      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003618:	e000      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800361a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800361c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003624:	4b6e      	ldr	r3, [pc, #440]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003628:	f023 0107 	bic.w	r1, r3, #7
 800362c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003632:	4a6b      	ldr	r2, [pc, #428]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003634:	430b      	orrs	r3, r1
 8003636:	6513      	str	r3, [r2, #80]	@ 0x50
 8003638:	e003      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800363e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800364e:	f04f 0b00 	mov.w	fp, #0
 8003652:	ea5a 030b 	orrs.w	r3, sl, fp
 8003656:	d05b      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003658:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800365c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003660:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003664:	d03b      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003666:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800366a:	d834      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800366c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003670:	d037      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003672:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003676:	d82e      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003678:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800367c:	d033      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800367e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003682:	d828      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003688:	d01a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800368a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800368e:	d822      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003694:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003698:	d007      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800369a:	e01c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369c:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	4a4f      	ldr	r2, [pc, #316]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036a8:	e01e      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036ae:	3308      	adds	r3, #8
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fb70 	bl	8004d98 <RCCEx_PLL2_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036be:	e013      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c4:	3328      	adds	r3, #40	@ 0x28
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fc17 	bl	8004efc <RCCEx_PLL3_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d4:	e008      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80036dc:	e004      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80036e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036f0:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80036f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003700:	4a37      	ldr	r2, [pc, #220]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003702:	430b      	orrs	r3, r1
 8003704:	6593      	str	r3, [r2, #88]	@ 0x58
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800370c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800371c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003726:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	d05d      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003734:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003738:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800373c:	d03b      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800373e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003742:	d834      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003744:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003748:	d037      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800374a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800374e:	d82e      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003750:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003754:	d033      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003756:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800375a:	d828      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800375c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003760:	d01a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8003762:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003766:	d822      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800376c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003770:	d007      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003772:	e01c      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4b1a      	ldr	r3, [pc, #104]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003778:	4a19      	ldr	r2, [pc, #100]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003780:	e01e      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003786:	3308      	adds	r3, #8
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fb04 	bl	8004d98 <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003796:	e013      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800379c:	3328      	adds	r3, #40	@ 0x28
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fbab 	bl	8004efc <RCCEx_PLL3_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ac:	e008      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037b4:	e004      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80037b6:	bf00      	nop
 80037b8:	e002      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80037ba:	bf00      	nop
 80037bc:	e000      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80037be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10d      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037c8:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80037d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037d8:	4a01      	ldr	r2, [pc, #4]	@ (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037da:	430b      	orrs	r3, r1
 80037dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80037de:	e005      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x310>
 80037e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80037ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80037f8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003802:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	d03a      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800380c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003812:	2b30      	cmp	r3, #48	@ 0x30
 8003814:	d01f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8003816:	2b30      	cmp	r3, #48	@ 0x30
 8003818:	d819      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800381a:	2b20      	cmp	r3, #32
 800381c:	d00c      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800381e:	2b20      	cmp	r3, #32
 8003820:	d815      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003822:	2b00      	cmp	r3, #0
 8003824:	d019      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003826:	2b10      	cmp	r3, #16
 8003828:	d111      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800382a:	4baa      	ldr	r3, [pc, #680]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	4aa9      	ldr	r2, [pc, #676]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003834:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003836:	e011      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800383c:	3308      	adds	r3, #8
 800383e:	2102      	movs	r1, #2
 8003840:	4618      	mov	r0, r3
 8003842:	f001 faa9 	bl	8004d98 <RCCEx_PLL2_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003864:	4b9b      	ldr	r3, [pc, #620]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003868:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800386c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003872:	4a98      	ldr	r2, [pc, #608]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003874:	430b      	orrs	r3, r1
 8003876:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800387e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003882:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800388e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003898:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d051      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038ac:	d035      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80038ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038b2:	d82e      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80038b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038b8:	d031      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80038ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038be:	d828      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80038c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c4:	d01a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x420>
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ca:	d822      	bhi.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d003      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038d4:	d007      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80038d6:	e01c      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038d8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038dc:	4a7d      	ldr	r2, [pc, #500]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038e4:	e01c      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ea:	3308      	adds	r3, #8
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 fa52 	bl	8004d98 <RCCEx_PLL2_Config>
 80038f4:	4603      	mov	r3, r0
 80038f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038fa:	e011      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003900:	3328      	adds	r3, #40	@ 0x28
 8003902:	2100      	movs	r1, #0
 8003904:	4618      	mov	r0, r3
 8003906:	f001 faf9 	bl	8004efc <RCCEx_PLL3_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003910:	e006      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003918:	e002      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800391a:	bf00      	nop
 800391c:	e000      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800391e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003928:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800392a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800392c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	4a67      	ldr	r2, [pc, #412]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003938:	430b      	orrs	r3, r1
 800393a:	6513      	str	r3, [r2, #80]	@ 0x50
 800393c:	e003      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003942:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003952:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003956:	2300      	movs	r3, #0
 8003958:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800395c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003960:	460b      	mov	r3, r1
 8003962:	4313      	orrs	r3, r2
 8003964:	d053      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800396a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003970:	d033      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8003972:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003976:	d82c      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003978:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800397c:	d02f      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x502>
 800397e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003982:	d826      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003988:	d02b      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800398a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800398e:	d820      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003994:	d012      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800399a:	d81a      	bhi.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d022      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80039a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039a4:	d115      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039aa:	3308      	adds	r3, #8
 80039ac:	2101      	movs	r1, #1
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f9f2 	bl	8004d98 <RCCEx_PLL2_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039ba:	e015      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039c0:	3328      	adds	r3, #40	@ 0x28
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f001 fa99 	bl	8004efc <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039d0:	e00a      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039d8:	e006      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039da:	bf00      	nop
 80039dc:	e004      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80039e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039f0:	4b38      	ldr	r3, [pc, #224]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80039f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80039f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fe:	4a35      	ldr	r2, [pc, #212]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a0a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003a24:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	d058      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a3a:	d033      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a40:	d82c      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a46:	d02f      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4c:	d826      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a52:	d02b      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003a54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a58:	d820      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a5e:	d012      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003a60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a64:	d81a      	bhi.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d022      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a6e:	d115      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a74:	3308      	adds	r3, #8
 8003a76:	2101      	movs	r1, #1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 f98d 	bl	8004d98 <RCCEx_PLL2_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a84:	e015      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8a:	3328      	adds	r3, #40	@ 0x28
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fa34 	bl	8004efc <RCCEx_PLL3_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aa2:	e006      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003aa4:	bf00      	nop
 8003aa6:	e004      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003aa8:	bf00      	nop
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003aac:	bf00      	nop
 8003aae:	e000      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003abe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003aca:	4a02      	ldr	r2, [pc, #8]	@ (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad0:	e006      	b.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003ad2:	bf00      	nop
 8003ad4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003af6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4313      	orrs	r3, r2
 8003afe:	d037      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0a:	d00e      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b10:	d816      	bhi.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b1a:	d111      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1c:	4bc4      	ldr	r3, [pc, #784]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	4ac3      	ldr	r2, [pc, #780]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b28:	e00f      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 f930 	bl	8004d98 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b3e:	e004      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b46:	e000      	b.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b52:	4bb7      	ldr	r3, [pc, #732]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b60:	4ab3      	ldr	r2, [pc, #716]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b62:	430b      	orrs	r3, r1
 8003b64:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b66:	e003      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b80:	2300      	movs	r3, #0
 8003b82:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b86:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	d039      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d81c      	bhi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba0:	08003bdd 	.word	0x08003bdd
 8003ba4:	08003bb1 	.word	0x08003bb1
 8003ba8:	08003bbf 	.word	0x08003bbf
 8003bac:	08003bdd 	.word	0x08003bdd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb0:	4b9f      	ldr	r3, [pc, #636]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb4:	4a9e      	ldr	r2, [pc, #632]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bbc:	e00f      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc2:	3308      	adds	r3, #8
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 f8e6 	bl	8004d98 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bd2:	e004      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003bda:	e000      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003bdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10a      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003be6:	4b92      	ldr	r3, [pc, #584]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bea:	f023 0103 	bic.w	r1, r3, #3
 8003bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf4:	4a8e      	ldr	r2, [pc, #568]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bfa:	e003      	b.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f000 8099 	beq.w	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c26:	4b83      	ldr	r3, [pc, #524]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a82      	ldr	r2, [pc, #520]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c32:	f7fd fc61 	bl	80014f8 <HAL_GetTick>
 8003c36:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c3a:	e00b      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3c:	f7fd fc5c 	bl	80014f8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b64      	cmp	r3, #100	@ 0x64
 8003c4a:	d903      	bls.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003c52:	e005      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c54:	4b77      	ldr	r3, [pc, #476]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0ed      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003c60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d173      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c68:	4b71      	ldr	r3, [pc, #452]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c74:	4053      	eors	r3, r2
 8003c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d015      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c7e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c86:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c8a:	4b69      	ldr	r3, [pc, #420]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c8e:	4a68      	ldr	r2, [pc, #416]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c96:	4b66      	ldr	r3, [pc, #408]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9a:	4a65      	ldr	r2, [pc, #404]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ca2:	4a63      	ldr	r2, [pc, #396]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ca4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ca8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cb6:	d118      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fc1e 	bl	80014f8 <HAL_GetTick>
 8003cbc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc0:	e00d      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fd fc19 	bl	80014f8 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003ccc:	1ad2      	subs	r2, r2, r3
 8003cce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d903      	bls.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003cdc:	e005      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cde:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0eb      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003cea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d129      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d02:	d10e      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003d04:	4b4a      	ldr	r3, [pc, #296]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d14:	091a      	lsrs	r2, r3, #4
 8003d16:	4b48      	ldr	r3, [pc, #288]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	4a45      	ldr	r2, [pc, #276]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6113      	str	r3, [r2, #16]
 8003d20:	e005      	b.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003d22:	4b43      	ldr	r3, [pc, #268]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	4a42      	ldr	r2, [pc, #264]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d2c:	6113      	str	r3, [r2, #16]
 8003d2e:	4b40      	ldr	r3, [pc, #256]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d44:	e008      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f002 0301 	and.w	r3, r2, #1
 8003d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003d6e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003d72:	460b      	mov	r3, r1
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f000 808f 	beq.w	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d80:	2b28      	cmp	r3, #40	@ 0x28
 8003d82:	d871      	bhi.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003d84:	a201      	add	r2, pc, #4	@ (adr r2, 8003d8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003e71 	.word	0x08003e71
 8003d90:	08003e69 	.word	0x08003e69
 8003d94:	08003e69 	.word	0x08003e69
 8003d98:	08003e69 	.word	0x08003e69
 8003d9c:	08003e69 	.word	0x08003e69
 8003da0:	08003e69 	.word	0x08003e69
 8003da4:	08003e69 	.word	0x08003e69
 8003da8:	08003e69 	.word	0x08003e69
 8003dac:	08003e3d 	.word	0x08003e3d
 8003db0:	08003e69 	.word	0x08003e69
 8003db4:	08003e69 	.word	0x08003e69
 8003db8:	08003e69 	.word	0x08003e69
 8003dbc:	08003e69 	.word	0x08003e69
 8003dc0:	08003e69 	.word	0x08003e69
 8003dc4:	08003e69 	.word	0x08003e69
 8003dc8:	08003e69 	.word	0x08003e69
 8003dcc:	08003e53 	.word	0x08003e53
 8003dd0:	08003e69 	.word	0x08003e69
 8003dd4:	08003e69 	.word	0x08003e69
 8003dd8:	08003e69 	.word	0x08003e69
 8003ddc:	08003e69 	.word	0x08003e69
 8003de0:	08003e69 	.word	0x08003e69
 8003de4:	08003e69 	.word	0x08003e69
 8003de8:	08003e69 	.word	0x08003e69
 8003dec:	08003e71 	.word	0x08003e71
 8003df0:	08003e69 	.word	0x08003e69
 8003df4:	08003e69 	.word	0x08003e69
 8003df8:	08003e69 	.word	0x08003e69
 8003dfc:	08003e69 	.word	0x08003e69
 8003e00:	08003e69 	.word	0x08003e69
 8003e04:	08003e69 	.word	0x08003e69
 8003e08:	08003e69 	.word	0x08003e69
 8003e0c:	08003e71 	.word	0x08003e71
 8003e10:	08003e69 	.word	0x08003e69
 8003e14:	08003e69 	.word	0x08003e69
 8003e18:	08003e69 	.word	0x08003e69
 8003e1c:	08003e69 	.word	0x08003e69
 8003e20:	08003e69 	.word	0x08003e69
 8003e24:	08003e69 	.word	0x08003e69
 8003e28:	08003e69 	.word	0x08003e69
 8003e2c:	08003e71 	.word	0x08003e71
 8003e30:	58024400 	.word	0x58024400
 8003e34:	58024800 	.word	0x58024800
 8003e38:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e40:	3308      	adds	r3, #8
 8003e42:	2101      	movs	r1, #1
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 ffa7 	bl	8004d98 <RCCEx_PLL2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e50:	e00f      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e56:	3328      	adds	r3, #40	@ 0x28
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f001 f84e 	bl	8004efc <RCCEx_PLL3_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e66:	e004      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10a      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e7a:	4bbf      	ldr	r3, [pc, #764]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e88:	4abb      	ldr	r2, [pc, #748]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e8a:	430b      	orrs	r3, r1
 8003e8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e8e:	e003      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea0:	f002 0302 	and.w	r3, r2, #2
 8003ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003eae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	d041      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	2b05      	cmp	r3, #5
 8003ec0:	d824      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003ec2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003ef7 	.word	0x08003ef7
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f15 	.word	0x08003f15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 ff55 	bl	8004d98 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fffc 	bl	8004efc <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10a      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f1e:	4b96      	ldr	r3, [pc, #600]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f22:	f023 0107 	bic.w	r1, r3, #7
 8003f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f2c:	4a92      	ldr	r2, [pc, #584]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f2e:	430b      	orrs	r3, r1
 8003f30:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f32:	e003      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f002 0304 	and.w	r3, r2, #4
 8003f48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f52:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d044      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f64:	2b05      	cmp	r3, #5
 8003f66:	d825      	bhi.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003f68:	a201      	add	r2, pc, #4	@ (adr r2, 8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003fbd 	.word	0x08003fbd
 8003f74:	08003f89 	.word	0x08003f89
 8003f78:	08003f9f 	.word	0x08003f9f
 8003f7c:	08003fbd 	.word	0x08003fbd
 8003f80:	08003fbd 	.word	0x08003fbd
 8003f84:	08003fbd 	.word	0x08003fbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	2101      	movs	r1, #1
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 ff01 	bl	8004d98 <RCCEx_PLL2_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00f      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa2:	3328      	adds	r3, #40	@ 0x28
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 ffa8 	bl	8004efc <RCCEx_PLL3_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fb2:	e004      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fba:	e000      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc6:	4b6c      	ldr	r3, [pc, #432]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fca:	f023 0107 	bic.w	r1, r3, #7
 8003fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	4a68      	ldr	r2, [pc, #416]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fd8:	430b      	orrs	r3, r1
 8003fda:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fdc:	e003      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f002 0320 	and.w	r3, r2, #32
 8003ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ffc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004000:	460b      	mov	r3, r1
 8004002:	4313      	orrs	r3, r2
 8004004:	d055      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800400e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004012:	d033      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004018:	d82c      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401e:	d02f      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004024:	d826      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004026:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800402a:	d02b      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800402c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004030:	d820      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004036:	d012      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800403c:	d81a      	bhi.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d022      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004046:	d115      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800404c:	3308      	adds	r3, #8
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fea1 	bl	8004d98 <RCCEx_PLL2_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800405c:	e015      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800405e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004062:	3328      	adds	r3, #40	@ 0x28
 8004064:	2102      	movs	r1, #2
 8004066:	4618      	mov	r0, r3
 8004068:	f000 ff48 	bl	8004efc <RCCEx_PLL3_Config>
 800406c:	4603      	mov	r3, r0
 800406e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004072:	e00a      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800407a:	e006      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800407c:	bf00      	nop
 800407e:	e004      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004080:	bf00      	nop
 8004082:	e002      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004084:	bf00      	nop
 8004086:	e000      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800408a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10b      	bne.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004092:	4b39      	ldr	r3, [pc, #228]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004096:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800409a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800409e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040a2:	4a35      	ldr	r2, [pc, #212]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040a4:	430b      	orrs	r3, r1
 80040a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80040a8:	e003      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80040be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80040c2:	2300      	movs	r3, #0
 80040c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80040c8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80040cc:	460b      	mov	r3, r1
 80040ce:	4313      	orrs	r3, r2
 80040d0:	d058      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040de:	d033      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80040e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040e4:	d82c      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ea:	d02f      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f0:	d826      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040f6:	d02b      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80040f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040fc:	d820      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80040fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004102:	d012      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004108:	d81a      	bhi.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d022      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800410e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004112:	d115      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004118:	3308      	adds	r3, #8
 800411a:	2100      	movs	r1, #0
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fe3b 	bl	8004d98 <RCCEx_PLL2_Config>
 8004122:	4603      	mov	r3, r0
 8004124:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004128:	e015      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412e:	3328      	adds	r3, #40	@ 0x28
 8004130:	2102      	movs	r1, #2
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fee2 	bl	8004efc <RCCEx_PLL3_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800413e:	e00a      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004146:	e006      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004148:	bf00      	nop
 800414a:	e004      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800414c:	bf00      	nop
 800414e:	e002      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004150:	bf00      	nop
 8004152:	e000      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004156:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10e      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800415e:	4b06      	ldr	r3, [pc, #24]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800416e:	4a02      	ldr	r2, [pc, #8]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004170:	430b      	orrs	r3, r1
 8004172:	6593      	str	r3, [r2, #88]	@ 0x58
 8004174:	e006      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004176:	bf00      	nop
 8004178:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004180:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004190:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800419a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d055      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041b0:	d033      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80041b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041b6:	d82c      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041bc:	d02f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80041be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041c2:	d826      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041c8:	d02b      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80041ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041ce:	d820      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041d4:	d012      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80041d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041da:	d81a      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d022      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041e4:	d115      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ea:	3308      	adds	r3, #8
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fdd2 	bl	8004d98 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041fa:	e015      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004200:	3328      	adds	r3, #40	@ 0x28
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fe79 	bl	8004efc <RCCEx_PLL3_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004210:	e00a      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004230:	4ba0      	ldr	r3, [pc, #640]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004234:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004238:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800423c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004240:	4a9c      	ldr	r2, [pc, #624]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004242:	430b      	orrs	r3, r1
 8004244:	6593      	str	r3, [r2, #88]	@ 0x58
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f002 0308 	and.w	r3, r2, #8
 800425c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004266:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d01e      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004278:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800427e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 fe38 	bl	8004efc <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004298:	4b86      	ldr	r3, [pc, #536]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800429a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800429c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042a8:	4a82      	ldr	r2, [pc, #520]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f002 0310 	and.w	r3, r2, #16
 80042ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042be:	2300      	movs	r3, #0
 80042c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042c4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80042c8:	460b      	mov	r3, r1
 80042ca:	4313      	orrs	r3, r2
 80042cc:	d01e      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042da:	d10c      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042e0:	3328      	adds	r3, #40	@ 0x28
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fe09 	bl	8004efc <RCCEx_PLL3_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042f6:	4b6f      	ldr	r3, [pc, #444]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004306:	4a6b      	ldr	r2, [pc, #428]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004308:	430b      	orrs	r3, r1
 800430a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004318:	67bb      	str	r3, [r7, #120]	@ 0x78
 800431a:	2300      	movs	r3, #0
 800431c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800431e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004322:	460b      	mov	r3, r1
 8004324:	4313      	orrs	r3, r2
 8004326:	d03e      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800432c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004334:	d022      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800433a:	d81b      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004344:	d00b      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004346:	e015      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004348:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434c:	3308      	adds	r3, #8
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fd21 	bl	8004d98 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800435c:	e00f      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800435e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004362:	3328      	adds	r3, #40	@ 0x28
 8004364:	2102      	movs	r1, #2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fdc8 	bl	8004efc <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004372:	e004      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10b      	bne.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004386:	4b4b      	ldr	r3, [pc, #300]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800438e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004396:	4a47      	ldr	r2, [pc, #284]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004398:	430b      	orrs	r3, r1
 800439a:	6593      	str	r3, [r2, #88]	@ 0x58
 800439c:	e003      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80043b4:	2300      	movs	r3, #0
 80043b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80043b8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d03b      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043ce:	d01f      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80043d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043d4:	d818      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80043d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043da:	d003      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80043dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043e0:	d007      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80043e2:	e011      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043e4:	4b33      	ldr	r3, [pc, #204]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	4a32      	ldr	r2, [pc, #200]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043f0:	e00f      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043f6:	3328      	adds	r3, #40	@ 0x28
 80043f8:	2101      	movs	r1, #1
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fd7e 	bl	8004efc <RCCEx_PLL3_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8004406:	e004      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800440e:	e000      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800441a:	4b26      	ldr	r3, [pc, #152]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800442a:	4a22      	ldr	r2, [pc, #136]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800442c:	430b      	orrs	r3, r1
 800442e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800443a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004446:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004448:	2300      	movs	r3, #0
 800444a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800444c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d034      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445c:	2b00      	cmp	r3, #0
 800445e:	d003      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004464:	d007      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004466:	e011      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004468:	4b12      	ldr	r3, [pc, #72]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	4a11      	ldr	r2, [pc, #68]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800446e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004474:	e00e      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800447a:	3308      	adds	r3, #8
 800447c:	2102      	movs	r1, #2
 800447e:	4618      	mov	r0, r3
 8004480:	f000 fc8a 	bl	8004d98 <RCCEx_PLL2_Config>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800448a:	e003      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10d      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800449e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044aa:	4a02      	ldr	r2, [pc, #8]	@ (80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80044ac:	430b      	orrs	r3, r1
 80044ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b0:	e006      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80044b2:	bf00      	nop
 80044b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80044cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80044ce:	2300      	movs	r3, #0
 80044d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80044d2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80044d6:	460b      	mov	r3, r1
 80044d8:	4313      	orrs	r3, r2
 80044da:	d00c      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044e0:	3328      	adds	r3, #40	@ 0x28
 80044e2:	2102      	movs	r1, #2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fd09 	bl	8004efc <RCCEx_PLL3_Config>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004502:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004504:	2300      	movs	r3, #0
 8004506:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004508:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d036      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004516:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004518:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800451c:	d018      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800451e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004522:	d811      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004528:	d014      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800452a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800452e:	d80b      	bhi.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004534:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004538:	d106      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800453a:	4bb7      	ldr	r3, [pc, #732]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	4ab6      	ldr	r2, [pc, #728]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004550:	bf00      	nop
 8004552:	e002      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004554:	bf00      	nop
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004562:	4bad      	ldr	r3, [pc, #692]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800456a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800456e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004570:	4aa9      	ldr	r2, [pc, #676]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004572:	430b      	orrs	r3, r1
 8004574:	6553      	str	r3, [r2, #84]	@ 0x54
 8004576:	e003      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800457c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800458c:	653b      	str	r3, [r7, #80]	@ 0x50
 800458e:	2300      	movs	r3, #0
 8004590:	657b      	str	r3, [r7, #84]	@ 0x54
 8004592:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004596:	460b      	mov	r3, r1
 8004598:	4313      	orrs	r3, r2
 800459a:	d009      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800459c:	4b9e      	ldr	r3, [pc, #632]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800459e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045aa:	4a9b      	ldr	r2, [pc, #620]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045ac:	430b      	orrs	r3, r1
 80045ae:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80045bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045be:	2300      	movs	r3, #0
 80045c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80045c6:	460b      	mov	r3, r1
 80045c8:	4313      	orrs	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045cc:	4b92      	ldr	r3, [pc, #584]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045da:	4a8f      	ldr	r2, [pc, #572]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80045ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ee:	2300      	movs	r3, #0
 80045f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045f2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80045f6:	460b      	mov	r3, r1
 80045f8:	4313      	orrs	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045fc:	4b86      	ldr	r3, [pc, #536]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	4a85      	ldr	r2, [pc, #532]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004602:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004606:	6113      	str	r3, [r2, #16]
 8004608:	4b83      	ldr	r3, [pc, #524]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800460a:	6919      	ldr	r1, [r3, #16]
 800460c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004610:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004614:	4a80      	ldr	r2, [pc, #512]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004616:	430b      	orrs	r3, r1
 8004618:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800461a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004622:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004626:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004628:	2300      	movs	r3, #0
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800462c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004630:	460b      	mov	r3, r1
 8004632:	4313      	orrs	r3, r2
 8004634:	d009      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004636:	4b78      	ldr	r3, [pc, #480]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800463e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004644:	4a74      	ldr	r2, [pc, #464]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004646:	430b      	orrs	r3, r1
 8004648:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800464a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004652:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004656:	633b      	str	r3, [r7, #48]	@ 0x30
 8004658:	2300      	movs	r3, #0
 800465a:	637b      	str	r3, [r7, #52]	@ 0x34
 800465c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004660:	460b      	mov	r3, r1
 8004662:	4313      	orrs	r3, r2
 8004664:	d00a      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004666:	4b6c      	ldr	r3, [pc, #432]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800466a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800466e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004676:	4a68      	ldr	r2, [pc, #416]	@ (8004818 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004678:	430b      	orrs	r3, r1
 800467a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800467c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	2100      	movs	r1, #0
 8004686:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800468e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004692:	460b      	mov	r3, r1
 8004694:	4313      	orrs	r3, r2
 8004696:	d011      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800469c:	3308      	adds	r3, #8
 800469e:	2100      	movs	r1, #0
 80046a0:	4618      	mov	r0, r3
 80046a2:	f000 fb79 	bl	8004d98 <RCCEx_PLL2_Config>
 80046a6:	4603      	mov	r3, r0
 80046a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	2100      	movs	r1, #0
 80046c6:	6239      	str	r1, [r7, #32]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ce:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d011      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046dc:	3308      	adds	r3, #8
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 fb59 	bl	8004d98 <RCCEx_PLL2_Config>
 80046e6:	4603      	mov	r3, r0
 80046e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80046fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	2100      	movs	r1, #0
 8004706:	61b9      	str	r1, [r7, #24]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004712:	460b      	mov	r3, r1
 8004714:	4313      	orrs	r3, r2
 8004716:	d011      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471c:	3308      	adds	r3, #8
 800471e:	2102      	movs	r1, #2
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fb39 	bl	8004d98 <RCCEx_PLL2_Config>
 8004726:	4603      	mov	r3, r0
 8004728:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800472c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004738:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004744:	2100      	movs	r1, #0
 8004746:	6139      	str	r1, [r7, #16]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004752:	460b      	mov	r3, r1
 8004754:	4313      	orrs	r3, r2
 8004756:	d011      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800475c:	3328      	adds	r3, #40	@ 0x28
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fbcb 	bl	8004efc <RCCEx_PLL3_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800476c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004778:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800477c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	2100      	movs	r1, #0
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004792:	460b      	mov	r3, r1
 8004794:	4313      	orrs	r3, r2
 8004796:	d011      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800479c:	3328      	adds	r3, #40	@ 0x28
 800479e:	2101      	movs	r1, #1
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fbab 	bl	8004efc <RCCEx_PLL3_Config>
 80047a6:	4603      	mov	r3, r0
 80047a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80047ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c4:	2100      	movs	r1, #0
 80047c6:	6039      	str	r1, [r7, #0]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047d2:	460b      	mov	r3, r1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	d011      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047dc:	3328      	adds	r3, #40	@ 0x28
 80047de:	2102      	movs	r1, #2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fb8b 	bl	8004efc <RCCEx_PLL3_Config>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80047ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80047fc:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
}
 800480a:	4618      	mov	r0, r3
 800480c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004810:	46bd      	mov	sp, r7
 8004812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004816:	bf00      	nop
 8004818:	58024400 	.word	0x58024400

0800481c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004820:	f7fe fe00 	bl	8003424 <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b06      	ldr	r3, [pc, #24]	@ (8004840 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	091b      	lsrs	r3, r3, #4
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4904      	ldr	r1, [pc, #16]	@ (8004844 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	f003 031f 	and.w	r3, r3, #31
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	58024400 	.word	0x58024400
 8004844:	080065c0 	.word	0x080065c0

08004848 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004848:	b480      	push	{r7}
 800484a:	b089      	sub	sp, #36	@ 0x24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004850:	4ba1      	ldr	r3, [pc, #644]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800485a:	4b9f      	ldr	r3, [pc, #636]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485e:	0b1b      	lsrs	r3, r3, #12
 8004860:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004864:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004866:	4b9c      	ldr	r3, [pc, #624]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	091b      	lsrs	r3, r3, #4
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004872:	4b99      	ldr	r3, [pc, #612]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004876:	08db      	lsrs	r3, r3, #3
 8004878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	fb02 f303 	mul.w	r3, r2, r3
 8004882:	ee07 3a90 	vmov	s15, r3
 8004886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8111 	beq.w	8004ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b02      	cmp	r3, #2
 800489a:	f000 8083 	beq.w	80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	f200 80a1 	bhi.w	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d056      	beq.n	8004960 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80048b2:	e099      	b.n	80049e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b4:	4b88      	ldr	r3, [pc, #544]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0320 	and.w	r3, r3, #32
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d02d      	beq.n	800491c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048c0:	4b85      	ldr	r3, [pc, #532]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	08db      	lsrs	r3, r3, #3
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	4a84      	ldr	r2, [pc, #528]	@ (8004adc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048cc:	fa22 f303 	lsr.w	r3, r2, r3
 80048d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	ee07 3a90 	vmov	s15, r3
 80048e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ea:	4b7b      	ldr	r3, [pc, #492]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800490e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004916:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800491a:	e087      	b.n	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	ee07 3a90 	vmov	s15, r3
 8004922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004926:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800492a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004936:	ee07 3a90 	vmov	s15, r3
 800493a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004942:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800494e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800495e:	e065      	b.n	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800496e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004972:	4b59      	ldr	r3, [pc, #356]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004982:	ed97 6a03 	vldr	s12, [r7, #12]
 8004986:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800498a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004992:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049a2:	e043      	b.n	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004aec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80049b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b6:	4b48      	ldr	r3, [pc, #288]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049e6:	e021      	b.n	8004a2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b37      	ldr	r3, [pc, #220]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a30:	0a5b      	lsrs	r3, r3, #9
 8004a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a52:	ee17 2a90 	vmov	r2, s15
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5e:	0c1b      	lsrs	r3, r3, #16
 8004a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a64:	ee07 3a90 	vmov	s15, r3
 8004a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a80:	ee17 2a90 	vmov	r2, s15
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a88:	4b13      	ldr	r3, [pc, #76]	@ (8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	0e1b      	lsrs	r3, r3, #24
 8004a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aae:	ee17 2a90 	vmov	r2, s15
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ab6:	e008      	b.n	8004aca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
}
 8004aca:	bf00      	nop
 8004acc:	3724      	adds	r7, #36	@ 0x24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	03d09000 	.word	0x03d09000
 8004ae0:	46000000 	.word	0x46000000
 8004ae4:	4c742400 	.word	0x4c742400
 8004ae8:	4a742400 	.word	0x4a742400
 8004aec:	4af42400 	.word	0x4af42400

08004af0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	@ 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004af8:	4ba1      	ldr	r3, [pc, #644]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b02:	4b9f      	ldr	r3, [pc, #636]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	0d1b      	lsrs	r3, r3, #20
 8004b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b0e:	4b9c      	ldr	r3, [pc, #624]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	0a1b      	lsrs	r3, r3, #8
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b1a:	4b99      	ldr	r3, [pc, #612]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b1e:	08db      	lsrs	r3, r3, #3
 8004b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	ee07 3a90 	vmov	s15, r3
 8004b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8111 	beq.w	8004d60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	f000 8083 	beq.w	8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	f200 80a1 	bhi.w	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d003      	beq.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d056      	beq.n	8004c08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b5a:	e099      	b.n	8004c90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b5c:	4b88      	ldr	r3, [pc, #544]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0320 	and.w	r3, r3, #32
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d02d      	beq.n	8004bc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b68:	4b85      	ldr	r3, [pc, #532]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	08db      	lsrs	r3, r3, #3
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	4a84      	ldr	r2, [pc, #528]	@ (8004d84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
 8004b78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b7b      	ldr	r3, [pc, #492]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004bc2:	e087      	b.n	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c06:	e065      	b.n	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b59      	ldr	r3, [pc, #356]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4a:	e043      	b.n	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5e:	4b48      	ldr	r3, [pc, #288]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c8e:	e021      	b.n	8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca2:	4b37      	ldr	r3, [pc, #220]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	0a5b      	lsrs	r3, r3, #9
 8004cda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cee:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cfa:	ee17 2a90 	vmov	r2, s15
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d02:	4b1f      	ldr	r3, [pc, #124]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d06:	0c1b      	lsrs	r3, r3, #16
 8004d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d28:	ee17 2a90 	vmov	r2, s15
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d30:	4b13      	ldr	r3, [pc, #76]	@ (8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	0e1b      	lsrs	r3, r3, #24
 8004d36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d56:	ee17 2a90 	vmov	r2, s15
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d5e:	e008      	b.n	8004d72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	609a      	str	r2, [r3, #8]
}
 8004d72:	bf00      	nop
 8004d74:	3724      	adds	r7, #36	@ 0x24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	58024400 	.word	0x58024400
 8004d84:	03d09000 	.word	0x03d09000
 8004d88:	46000000 	.word	0x46000000
 8004d8c:	4c742400 	.word	0x4c742400
 8004d90:	4a742400 	.word	0x4a742400
 8004d94:	4af42400 	.word	0x4af42400

08004d98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004da6:	4b53      	ldr	r3, [pc, #332]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d101      	bne.n	8004db6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e099      	b.n	8004eea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004db6:	4b4f      	ldr	r3, [pc, #316]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a4e      	ldr	r2, [pc, #312]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc2:	f7fc fb99 	bl	80014f8 <HAL_GetTick>
 8004dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dc8:	e008      	b.n	8004ddc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dca:	f7fc fb95 	bl	80014f8 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d901      	bls.n	8004ddc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e086      	b.n	8004eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ddc:	4b45      	ldr	r3, [pc, #276]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f0      	bne.n	8004dca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004de8:	4b42      	ldr	r3, [pc, #264]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	031b      	lsls	r3, r3, #12
 8004df6:	493f      	ldr	r1, [pc, #252]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	3b01      	subs	r3, #1
 8004e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	025b      	lsls	r3, r3, #9
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	3b01      	subs	r3, #1
 8004e18:	041b      	lsls	r3, r3, #16
 8004e1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	061b      	lsls	r3, r3, #24
 8004e28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e2c:	4931      	ldr	r1, [pc, #196]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e32:	4b30      	ldr	r3, [pc, #192]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	492d      	ldr	r1, [pc, #180]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e44:	4b2b      	ldr	r3, [pc, #172]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	f023 0220 	bic.w	r2, r3, #32
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	4928      	ldr	r1, [pc, #160]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e56:	4b27      	ldr	r3, [pc, #156]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	4a26      	ldr	r2, [pc, #152]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e5c:	f023 0310 	bic.w	r3, r3, #16
 8004e60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e62:	4b24      	ldr	r3, [pc, #144]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e66:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <RCCEx_PLL2_Config+0x160>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	69d2      	ldr	r2, [r2, #28]
 8004e6e:	00d2      	lsls	r2, r2, #3
 8004e70:	4920      	ldr	r1, [pc, #128]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e76:	4b1f      	ldr	r3, [pc, #124]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	f043 0310 	orr.w	r3, r3, #16
 8004e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e88:	4b1a      	ldr	r3, [pc, #104]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8c:	4a19      	ldr	r2, [pc, #100]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e8e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e94:	e00f      	b.n	8004eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d106      	bne.n	8004eaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e9c:	4b15      	ldr	r3, [pc, #84]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea0:	4a14      	ldr	r2, [pc, #80]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004ea2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ea6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ea8:	e005      	b.n	8004eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004eaa:	4b12      	ldr	r3, [pc, #72]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eae:	4a11      	ldr	r2, [pc, #68]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004ebc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fb19 	bl	80014f8 <HAL_GetTick>
 8004ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ec8:	e008      	b.n	8004edc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eca:	f7fc fb15 	bl	80014f8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e006      	b.n	8004eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004edc:	4b05      	ldr	r3, [pc, #20]	@ (8004ef4 <RCCEx_PLL2_Config+0x15c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0f0      	beq.n	8004eca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	58024400 	.word	0x58024400
 8004ef8:	ffff0007 	.word	0xffff0007

08004efc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f0a:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0e:	f003 0303 	and.w	r3, r3, #3
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d101      	bne.n	8004f1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e099      	b.n	800504e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f1a:	4b4f      	ldr	r3, [pc, #316]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a4e      	ldr	r2, [pc, #312]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f26:	f7fc fae7 	bl	80014f8 <HAL_GetTick>
 8004f2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f2c:	e008      	b.n	8004f40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f2e:	f7fc fae3 	bl	80014f8 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e086      	b.n	800504e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f40:	4b45      	ldr	r3, [pc, #276]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1f0      	bne.n	8004f2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f4c:	4b42      	ldr	r3, [pc, #264]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	051b      	lsls	r3, r3, #20
 8004f5a:	493f      	ldr	r1, [pc, #252]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	3b01      	subs	r3, #1
 8004f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	025b      	lsls	r3, r3, #9
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	431a      	orrs	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	061b      	lsls	r3, r3, #24
 8004f8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f90:	4931      	ldr	r1, [pc, #196]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f96:	4b30      	ldr	r3, [pc, #192]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	492d      	ldr	r1, [pc, #180]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	4928      	ldr	r1, [pc, #160]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fba:	4b27      	ldr	r3, [pc, #156]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	4a26      	ldr	r2, [pc, #152]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fc6:	4b24      	ldr	r3, [pc, #144]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fca:	4b24      	ldr	r3, [pc, #144]	@ (800505c <RCCEx_PLL3_Config+0x160>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	69d2      	ldr	r2, [r2, #28]
 8004fd2:	00d2      	lsls	r2, r2, #3
 8004fd4:	4920      	ldr	r1, [pc, #128]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fda:	4b1f      	ldr	r3, [pc, #124]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	4a1e      	ldr	r2, [pc, #120]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d106      	bne.n	8004ffa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fec:	4b1a      	ldr	r3, [pc, #104]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	4a19      	ldr	r2, [pc, #100]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8004ff2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ff8:	e00f      	b.n	800501a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d106      	bne.n	800500e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005000:	4b15      	ldr	r3, [pc, #84]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8005002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005004:	4a14      	ldr	r2, [pc, #80]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8005006:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800500a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800500c:	e005      	b.n	800501a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800500e:	4b12      	ldr	r3, [pc, #72]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	4a11      	ldr	r2, [pc, #68]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8005014:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005018:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800501a:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a0e      	ldr	r2, [pc, #56]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8005020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005026:	f7fc fa67 	bl	80014f8 <HAL_GetTick>
 800502a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800502c:	e008      	b.n	8005040 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800502e:	f7fc fa63 	bl	80014f8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e006      	b.n	800504e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005040:	4b05      	ldr	r3, [pc, #20]	@ (8005058 <RCCEx_PLL3_Config+0x15c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0f0      	beq.n	800502e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	58024400 	.word	0x58024400
 800505c:	ffff0007 	.word	0xffff0007

08005060 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e042      	b.n	80050f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	2b00      	cmp	r3, #0
 800507a:	d106      	bne.n	800508a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7fb fffd 	bl	8001084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2224      	movs	r2, #36	@ 0x24
 800508e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f022 0201 	bic.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 ff22 	bl	8005ef4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f8b3 	bl	800521c <UART_SetConfig>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e01b      	b.n	80050f8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	685a      	ldr	r2, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 ffa1 	bl	8006038 <UART_CheckIdleState>
 80050f6:	4603      	mov	r3, r0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af02      	add	r7, sp, #8
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005116:	2b20      	cmp	r3, #32
 8005118:	d17b      	bne.n	8005212 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_UART_Transmit+0x26>
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e074      	b.n	8005214 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2221      	movs	r2, #33	@ 0x21
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513a:	f7fc f9dd 	bl	80014f8 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005158:	d108      	bne.n	800516c <HAL_UART_Transmit+0x6c>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e003      	b.n	8005174 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005174:	e030      	b.n	80051d8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	2180      	movs	r1, #128	@ 0x80
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f001 f803 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e03d      	b.n	8005214 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	3302      	adds	r3, #2
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e007      	b.n	80051c6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1c8      	bne.n	8005176 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2140      	movs	r1, #64	@ 0x40
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 ffcc 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e006      	b.n	8005214 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	e000      	b.n	8005214 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005212:	2302      	movs	r3, #2
  }
}
 8005214:	4618      	mov	r0, r3
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800521c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005220:	b092      	sub	sp, #72	@ 0x48
 8005222:	af00      	add	r7, sp, #0
 8005224:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	691b      	ldr	r3, [r3, #16]
 8005234:	431a      	orrs	r2, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	431a      	orrs	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	69db      	ldr	r3, [r3, #28]
 8005240:	4313      	orrs	r3, r2
 8005242:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	4bbe      	ldr	r3, [pc, #760]	@ (8005544 <UART_SetConfig+0x328>)
 800524c:	4013      	ands	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005254:	430b      	orrs	r3, r1
 8005256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4ab3      	ldr	r2, [pc, #716]	@ (8005548 <UART_SetConfig+0x32c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d004      	beq.n	8005288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005284:	4313      	orrs	r3, r2
 8005286:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	4baf      	ldr	r3, [pc, #700]	@ (800554c <UART_SetConfig+0x330>)
 8005290:	4013      	ands	r3, r2
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	6812      	ldr	r2, [r2, #0]
 8005296:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005298:	430b      	orrs	r3, r1
 800529a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	f023 010f 	bic.w	r1, r3, #15
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4aa6      	ldr	r2, [pc, #664]	@ (8005550 <UART_SetConfig+0x334>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d177      	bne.n	80053ac <UART_SetConfig+0x190>
 80052bc:	4ba5      	ldr	r3, [pc, #660]	@ (8005554 <UART_SetConfig+0x338>)
 80052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052c4:	2b28      	cmp	r3, #40	@ 0x28
 80052c6:	d86d      	bhi.n	80053a4 <UART_SetConfig+0x188>
 80052c8:	a201      	add	r2, pc, #4	@ (adr r2, 80052d0 <UART_SetConfig+0xb4>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	08005375 	.word	0x08005375
 80052d4:	080053a5 	.word	0x080053a5
 80052d8:	080053a5 	.word	0x080053a5
 80052dc:	080053a5 	.word	0x080053a5
 80052e0:	080053a5 	.word	0x080053a5
 80052e4:	080053a5 	.word	0x080053a5
 80052e8:	080053a5 	.word	0x080053a5
 80052ec:	080053a5 	.word	0x080053a5
 80052f0:	0800537d 	.word	0x0800537d
 80052f4:	080053a5 	.word	0x080053a5
 80052f8:	080053a5 	.word	0x080053a5
 80052fc:	080053a5 	.word	0x080053a5
 8005300:	080053a5 	.word	0x080053a5
 8005304:	080053a5 	.word	0x080053a5
 8005308:	080053a5 	.word	0x080053a5
 800530c:	080053a5 	.word	0x080053a5
 8005310:	08005385 	.word	0x08005385
 8005314:	080053a5 	.word	0x080053a5
 8005318:	080053a5 	.word	0x080053a5
 800531c:	080053a5 	.word	0x080053a5
 8005320:	080053a5 	.word	0x080053a5
 8005324:	080053a5 	.word	0x080053a5
 8005328:	080053a5 	.word	0x080053a5
 800532c:	080053a5 	.word	0x080053a5
 8005330:	0800538d 	.word	0x0800538d
 8005334:	080053a5 	.word	0x080053a5
 8005338:	080053a5 	.word	0x080053a5
 800533c:	080053a5 	.word	0x080053a5
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080053a5 	.word	0x080053a5
 8005348:	080053a5 	.word	0x080053a5
 800534c:	080053a5 	.word	0x080053a5
 8005350:	08005395 	.word	0x08005395
 8005354:	080053a5 	.word	0x080053a5
 8005358:	080053a5 	.word	0x080053a5
 800535c:	080053a5 	.word	0x080053a5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053a5 	.word	0x080053a5
 8005368:	080053a5 	.word	0x080053a5
 800536c:	080053a5 	.word	0x080053a5
 8005370:	0800539d 	.word	0x0800539d
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537a:	e326      	b.n	80059ca <UART_SetConfig+0x7ae>
 800537c:	2304      	movs	r3, #4
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005382:	e322      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005384:	2308      	movs	r3, #8
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e31e      	b.n	80059ca <UART_SetConfig+0x7ae>
 800538c:	2310      	movs	r3, #16
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e31a      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005394:	2320      	movs	r3, #32
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e316      	b.n	80059ca <UART_SetConfig+0x7ae>
 800539c:	2340      	movs	r3, #64	@ 0x40
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e312      	b.n	80059ca <UART_SetConfig+0x7ae>
 80053a4:	2380      	movs	r3, #128	@ 0x80
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e30e      	b.n	80059ca <UART_SetConfig+0x7ae>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a69      	ldr	r2, [pc, #420]	@ (8005558 <UART_SetConfig+0x33c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d130      	bne.n	8005418 <UART_SetConfig+0x1fc>
 80053b6:	4b67      	ldr	r3, [pc, #412]	@ (8005554 <UART_SetConfig+0x338>)
 80053b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2b05      	cmp	r3, #5
 80053c0:	d826      	bhi.n	8005410 <UART_SetConfig+0x1f4>
 80053c2:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <UART_SetConfig+0x1ac>)
 80053c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053e9 	.word	0x080053e9
 80053d0:	080053f1 	.word	0x080053f1
 80053d4:	080053f9 	.word	0x080053f9
 80053d8:	08005401 	.word	0x08005401
 80053dc:	08005409 	.word	0x08005409
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e6:	e2f0      	b.n	80059ca <UART_SetConfig+0x7ae>
 80053e8:	2304      	movs	r3, #4
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ee:	e2ec      	b.n	80059ca <UART_SetConfig+0x7ae>
 80053f0:	2308      	movs	r3, #8
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f6:	e2e8      	b.n	80059ca <UART_SetConfig+0x7ae>
 80053f8:	2310      	movs	r3, #16
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e2e4      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005400:	2320      	movs	r3, #32
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e2e0      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005408:	2340      	movs	r3, #64	@ 0x40
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e2dc      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005410:	2380      	movs	r3, #128	@ 0x80
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e2d8      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a4f      	ldr	r2, [pc, #316]	@ (800555c <UART_SetConfig+0x340>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d130      	bne.n	8005484 <UART_SetConfig+0x268>
 8005422:	4b4c      	ldr	r3, [pc, #304]	@ (8005554 <UART_SetConfig+0x338>)
 8005424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	2b05      	cmp	r3, #5
 800542c:	d826      	bhi.n	800547c <UART_SetConfig+0x260>
 800542e:	a201      	add	r2, pc, #4	@ (adr r2, 8005434 <UART_SetConfig+0x218>)
 8005430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005434:	0800544d 	.word	0x0800544d
 8005438:	08005455 	.word	0x08005455
 800543c:	0800545d 	.word	0x0800545d
 8005440:	08005465 	.word	0x08005465
 8005444:	0800546d 	.word	0x0800546d
 8005448:	08005475 	.word	0x08005475
 800544c:	2300      	movs	r3, #0
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005452:	e2ba      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005454:	2304      	movs	r3, #4
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e2b6      	b.n	80059ca <UART_SetConfig+0x7ae>
 800545c:	2308      	movs	r3, #8
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e2b2      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005464:	2310      	movs	r3, #16
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e2ae      	b.n	80059ca <UART_SetConfig+0x7ae>
 800546c:	2320      	movs	r3, #32
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e2aa      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005474:	2340      	movs	r3, #64	@ 0x40
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e2a6      	b.n	80059ca <UART_SetConfig+0x7ae>
 800547c:	2380      	movs	r3, #128	@ 0x80
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e2a2      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a35      	ldr	r2, [pc, #212]	@ (8005560 <UART_SetConfig+0x344>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d130      	bne.n	80054f0 <UART_SetConfig+0x2d4>
 800548e:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <UART_SetConfig+0x338>)
 8005490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	2b05      	cmp	r3, #5
 8005498:	d826      	bhi.n	80054e8 <UART_SetConfig+0x2cc>
 800549a:	a201      	add	r2, pc, #4	@ (adr r2, 80054a0 <UART_SetConfig+0x284>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054b9 	.word	0x080054b9
 80054a4:	080054c1 	.word	0x080054c1
 80054a8:	080054c9 	.word	0x080054c9
 80054ac:	080054d1 	.word	0x080054d1
 80054b0:	080054d9 	.word	0x080054d9
 80054b4:	080054e1 	.word	0x080054e1
 80054b8:	2300      	movs	r3, #0
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e284      	b.n	80059ca <UART_SetConfig+0x7ae>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e280      	b.n	80059ca <UART_SetConfig+0x7ae>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e27c      	b.n	80059ca <UART_SetConfig+0x7ae>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d6:	e278      	b.n	80059ca <UART_SetConfig+0x7ae>
 80054d8:	2320      	movs	r3, #32
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054de:	e274      	b.n	80059ca <UART_SetConfig+0x7ae>
 80054e0:	2340      	movs	r3, #64	@ 0x40
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e6:	e270      	b.n	80059ca <UART_SetConfig+0x7ae>
 80054e8:	2380      	movs	r3, #128	@ 0x80
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e26c      	b.n	80059ca <UART_SetConfig+0x7ae>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <UART_SetConfig+0x348>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d142      	bne.n	8005580 <UART_SetConfig+0x364>
 80054fa:	4b16      	ldr	r3, [pc, #88]	@ (8005554 <UART_SetConfig+0x338>)
 80054fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	2b05      	cmp	r3, #5
 8005504:	d838      	bhi.n	8005578 <UART_SetConfig+0x35c>
 8005506:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <UART_SetConfig+0x2f0>)
 8005508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550c:	08005525 	.word	0x08005525
 8005510:	0800552d 	.word	0x0800552d
 8005514:	08005535 	.word	0x08005535
 8005518:	0800553d 	.word	0x0800553d
 800551c:	08005569 	.word	0x08005569
 8005520:	08005571 	.word	0x08005571
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e24e      	b.n	80059ca <UART_SetConfig+0x7ae>
 800552c:	2304      	movs	r3, #4
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e24a      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005534:	2308      	movs	r3, #8
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e246      	b.n	80059ca <UART_SetConfig+0x7ae>
 800553c:	2310      	movs	r3, #16
 800553e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005542:	e242      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005544:	cfff69f3 	.word	0xcfff69f3
 8005548:	58000c00 	.word	0x58000c00
 800554c:	11fff4ff 	.word	0x11fff4ff
 8005550:	40011000 	.word	0x40011000
 8005554:	58024400 	.word	0x58024400
 8005558:	40004400 	.word	0x40004400
 800555c:	40004800 	.word	0x40004800
 8005560:	40004c00 	.word	0x40004c00
 8005564:	40005000 	.word	0x40005000
 8005568:	2320      	movs	r3, #32
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e22c      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005570:	2340      	movs	r3, #64	@ 0x40
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005576:	e228      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005578:	2380      	movs	r3, #128	@ 0x80
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557e:	e224      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4ab1      	ldr	r2, [pc, #708]	@ (800584c <UART_SetConfig+0x630>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d176      	bne.n	8005678 <UART_SetConfig+0x45c>
 800558a:	4bb1      	ldr	r3, [pc, #708]	@ (8005850 <UART_SetConfig+0x634>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005592:	2b28      	cmp	r3, #40	@ 0x28
 8005594:	d86c      	bhi.n	8005670 <UART_SetConfig+0x454>
 8005596:	a201      	add	r2, pc, #4	@ (adr r2, 800559c <UART_SetConfig+0x380>)
 8005598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559c:	08005641 	.word	0x08005641
 80055a0:	08005671 	.word	0x08005671
 80055a4:	08005671 	.word	0x08005671
 80055a8:	08005671 	.word	0x08005671
 80055ac:	08005671 	.word	0x08005671
 80055b0:	08005671 	.word	0x08005671
 80055b4:	08005671 	.word	0x08005671
 80055b8:	08005671 	.word	0x08005671
 80055bc:	08005649 	.word	0x08005649
 80055c0:	08005671 	.word	0x08005671
 80055c4:	08005671 	.word	0x08005671
 80055c8:	08005671 	.word	0x08005671
 80055cc:	08005671 	.word	0x08005671
 80055d0:	08005671 	.word	0x08005671
 80055d4:	08005671 	.word	0x08005671
 80055d8:	08005671 	.word	0x08005671
 80055dc:	08005651 	.word	0x08005651
 80055e0:	08005671 	.word	0x08005671
 80055e4:	08005671 	.word	0x08005671
 80055e8:	08005671 	.word	0x08005671
 80055ec:	08005671 	.word	0x08005671
 80055f0:	08005671 	.word	0x08005671
 80055f4:	08005671 	.word	0x08005671
 80055f8:	08005671 	.word	0x08005671
 80055fc:	08005659 	.word	0x08005659
 8005600:	08005671 	.word	0x08005671
 8005604:	08005671 	.word	0x08005671
 8005608:	08005671 	.word	0x08005671
 800560c:	08005671 	.word	0x08005671
 8005610:	08005671 	.word	0x08005671
 8005614:	08005671 	.word	0x08005671
 8005618:	08005671 	.word	0x08005671
 800561c:	08005661 	.word	0x08005661
 8005620:	08005671 	.word	0x08005671
 8005624:	08005671 	.word	0x08005671
 8005628:	08005671 	.word	0x08005671
 800562c:	08005671 	.word	0x08005671
 8005630:	08005671 	.word	0x08005671
 8005634:	08005671 	.word	0x08005671
 8005638:	08005671 	.word	0x08005671
 800563c:	08005669 	.word	0x08005669
 8005640:	2301      	movs	r3, #1
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e1c0      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005648:	2304      	movs	r3, #4
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e1bc      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005650:	2308      	movs	r3, #8
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005656:	e1b8      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005658:	2310      	movs	r3, #16
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e1b4      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005660:	2320      	movs	r3, #32
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e1b0      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005668:	2340      	movs	r3, #64	@ 0x40
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e1ac      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005670:	2380      	movs	r3, #128	@ 0x80
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e1a8      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a75      	ldr	r2, [pc, #468]	@ (8005854 <UART_SetConfig+0x638>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d130      	bne.n	80056e4 <UART_SetConfig+0x4c8>
 8005682:	4b73      	ldr	r3, [pc, #460]	@ (8005850 <UART_SetConfig+0x634>)
 8005684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b05      	cmp	r3, #5
 800568c:	d826      	bhi.n	80056dc <UART_SetConfig+0x4c0>
 800568e:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0x478>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056ad 	.word	0x080056ad
 8005698:	080056b5 	.word	0x080056b5
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cd 	.word	0x080056cd
 80056a8:	080056d5 	.word	0x080056d5
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e18a      	b.n	80059ca <UART_SetConfig+0x7ae>
 80056b4:	2304      	movs	r3, #4
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ba:	e186      	b.n	80059ca <UART_SetConfig+0x7ae>
 80056bc:	2308      	movs	r3, #8
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c2:	e182      	b.n	80059ca <UART_SetConfig+0x7ae>
 80056c4:	2310      	movs	r3, #16
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ca:	e17e      	b.n	80059ca <UART_SetConfig+0x7ae>
 80056cc:	2320      	movs	r3, #32
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d2:	e17a      	b.n	80059ca <UART_SetConfig+0x7ae>
 80056d4:	2340      	movs	r3, #64	@ 0x40
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056da:	e176      	b.n	80059ca <UART_SetConfig+0x7ae>
 80056dc:	2380      	movs	r3, #128	@ 0x80
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e2:	e172      	b.n	80059ca <UART_SetConfig+0x7ae>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a5b      	ldr	r2, [pc, #364]	@ (8005858 <UART_SetConfig+0x63c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d130      	bne.n	8005750 <UART_SetConfig+0x534>
 80056ee:	4b58      	ldr	r3, [pc, #352]	@ (8005850 <UART_SetConfig+0x634>)
 80056f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	2b05      	cmp	r3, #5
 80056f8:	d826      	bhi.n	8005748 <UART_SetConfig+0x52c>
 80056fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005700 <UART_SetConfig+0x4e4>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005719 	.word	0x08005719
 8005704:	08005721 	.word	0x08005721
 8005708:	08005729 	.word	0x08005729
 800570c:	08005731 	.word	0x08005731
 8005710:	08005739 	.word	0x08005739
 8005714:	08005741 	.word	0x08005741
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e154      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005720:	2304      	movs	r3, #4
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e150      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005728:	2308      	movs	r3, #8
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e14c      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005730:	2310      	movs	r3, #16
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e148      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005738:	2320      	movs	r3, #32
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e144      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005740:	2340      	movs	r3, #64	@ 0x40
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005746:	e140      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574e:	e13c      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a41      	ldr	r2, [pc, #260]	@ (800585c <UART_SetConfig+0x640>)
 8005756:	4293      	cmp	r3, r2
 8005758:	f040 8082 	bne.w	8005860 <UART_SetConfig+0x644>
 800575c:	4b3c      	ldr	r3, [pc, #240]	@ (8005850 <UART_SetConfig+0x634>)
 800575e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005760:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005764:	2b28      	cmp	r3, #40	@ 0x28
 8005766:	d86d      	bhi.n	8005844 <UART_SetConfig+0x628>
 8005768:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <UART_SetConfig+0x554>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005815 	.word	0x08005815
 8005774:	08005845 	.word	0x08005845
 8005778:	08005845 	.word	0x08005845
 800577c:	08005845 	.word	0x08005845
 8005780:	08005845 	.word	0x08005845
 8005784:	08005845 	.word	0x08005845
 8005788:	08005845 	.word	0x08005845
 800578c:	08005845 	.word	0x08005845
 8005790:	0800581d 	.word	0x0800581d
 8005794:	08005845 	.word	0x08005845
 8005798:	08005845 	.word	0x08005845
 800579c:	08005845 	.word	0x08005845
 80057a0:	08005845 	.word	0x08005845
 80057a4:	08005845 	.word	0x08005845
 80057a8:	08005845 	.word	0x08005845
 80057ac:	08005845 	.word	0x08005845
 80057b0:	08005825 	.word	0x08005825
 80057b4:	08005845 	.word	0x08005845
 80057b8:	08005845 	.word	0x08005845
 80057bc:	08005845 	.word	0x08005845
 80057c0:	08005845 	.word	0x08005845
 80057c4:	08005845 	.word	0x08005845
 80057c8:	08005845 	.word	0x08005845
 80057cc:	08005845 	.word	0x08005845
 80057d0:	0800582d 	.word	0x0800582d
 80057d4:	08005845 	.word	0x08005845
 80057d8:	08005845 	.word	0x08005845
 80057dc:	08005845 	.word	0x08005845
 80057e0:	08005845 	.word	0x08005845
 80057e4:	08005845 	.word	0x08005845
 80057e8:	08005845 	.word	0x08005845
 80057ec:	08005845 	.word	0x08005845
 80057f0:	08005835 	.word	0x08005835
 80057f4:	08005845 	.word	0x08005845
 80057f8:	08005845 	.word	0x08005845
 80057fc:	08005845 	.word	0x08005845
 8005800:	08005845 	.word	0x08005845
 8005804:	08005845 	.word	0x08005845
 8005808:	08005845 	.word	0x08005845
 800580c:	08005845 	.word	0x08005845
 8005810:	0800583d 	.word	0x0800583d
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800581a:	e0d6      	b.n	80059ca <UART_SetConfig+0x7ae>
 800581c:	2304      	movs	r3, #4
 800581e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005822:	e0d2      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005824:	2308      	movs	r3, #8
 8005826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800582a:	e0ce      	b.n	80059ca <UART_SetConfig+0x7ae>
 800582c:	2310      	movs	r3, #16
 800582e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005832:	e0ca      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005834:	2320      	movs	r3, #32
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800583a:	e0c6      	b.n	80059ca <UART_SetConfig+0x7ae>
 800583c:	2340      	movs	r3, #64	@ 0x40
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005842:	e0c2      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005844:	2380      	movs	r3, #128	@ 0x80
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584a:	e0be      	b.n	80059ca <UART_SetConfig+0x7ae>
 800584c:	40011400 	.word	0x40011400
 8005850:	58024400 	.word	0x58024400
 8005854:	40007800 	.word	0x40007800
 8005858:	40007c00 	.word	0x40007c00
 800585c:	40011800 	.word	0x40011800
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4aad      	ldr	r2, [pc, #692]	@ (8005b1c <UART_SetConfig+0x900>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d176      	bne.n	8005958 <UART_SetConfig+0x73c>
 800586a:	4bad      	ldr	r3, [pc, #692]	@ (8005b20 <UART_SetConfig+0x904>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005872:	2b28      	cmp	r3, #40	@ 0x28
 8005874:	d86c      	bhi.n	8005950 <UART_SetConfig+0x734>
 8005876:	a201      	add	r2, pc, #4	@ (adr r2, 800587c <UART_SetConfig+0x660>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005921 	.word	0x08005921
 8005880:	08005951 	.word	0x08005951
 8005884:	08005951 	.word	0x08005951
 8005888:	08005951 	.word	0x08005951
 800588c:	08005951 	.word	0x08005951
 8005890:	08005951 	.word	0x08005951
 8005894:	08005951 	.word	0x08005951
 8005898:	08005951 	.word	0x08005951
 800589c:	08005929 	.word	0x08005929
 80058a0:	08005951 	.word	0x08005951
 80058a4:	08005951 	.word	0x08005951
 80058a8:	08005951 	.word	0x08005951
 80058ac:	08005951 	.word	0x08005951
 80058b0:	08005951 	.word	0x08005951
 80058b4:	08005951 	.word	0x08005951
 80058b8:	08005951 	.word	0x08005951
 80058bc:	08005931 	.word	0x08005931
 80058c0:	08005951 	.word	0x08005951
 80058c4:	08005951 	.word	0x08005951
 80058c8:	08005951 	.word	0x08005951
 80058cc:	08005951 	.word	0x08005951
 80058d0:	08005951 	.word	0x08005951
 80058d4:	08005951 	.word	0x08005951
 80058d8:	08005951 	.word	0x08005951
 80058dc:	08005939 	.word	0x08005939
 80058e0:	08005951 	.word	0x08005951
 80058e4:	08005951 	.word	0x08005951
 80058e8:	08005951 	.word	0x08005951
 80058ec:	08005951 	.word	0x08005951
 80058f0:	08005951 	.word	0x08005951
 80058f4:	08005951 	.word	0x08005951
 80058f8:	08005951 	.word	0x08005951
 80058fc:	08005941 	.word	0x08005941
 8005900:	08005951 	.word	0x08005951
 8005904:	08005951 	.word	0x08005951
 8005908:	08005951 	.word	0x08005951
 800590c:	08005951 	.word	0x08005951
 8005910:	08005951 	.word	0x08005951
 8005914:	08005951 	.word	0x08005951
 8005918:	08005951 	.word	0x08005951
 800591c:	08005949 	.word	0x08005949
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e050      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005928:	2304      	movs	r3, #4
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e04c      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005930:	2308      	movs	r3, #8
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e048      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005938:	2310      	movs	r3, #16
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e044      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005940:	2320      	movs	r3, #32
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e040      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005948:	2340      	movs	r3, #64	@ 0x40
 800594a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594e:	e03c      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005950:	2380      	movs	r3, #128	@ 0x80
 8005952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005956:	e038      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a71      	ldr	r2, [pc, #452]	@ (8005b24 <UART_SetConfig+0x908>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d130      	bne.n	80059c4 <UART_SetConfig+0x7a8>
 8005962:	4b6f      	ldr	r3, [pc, #444]	@ (8005b20 <UART_SetConfig+0x904>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005966:	f003 0307 	and.w	r3, r3, #7
 800596a:	2b05      	cmp	r3, #5
 800596c:	d826      	bhi.n	80059bc <UART_SetConfig+0x7a0>
 800596e:	a201      	add	r2, pc, #4	@ (adr r2, 8005974 <UART_SetConfig+0x758>)
 8005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005974:	0800598d 	.word	0x0800598d
 8005978:	08005995 	.word	0x08005995
 800597c:	0800599d 	.word	0x0800599d
 8005980:	080059a5 	.word	0x080059a5
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059b5 	.word	0x080059b5
 800598c:	2302      	movs	r3, #2
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e01a      	b.n	80059ca <UART_SetConfig+0x7ae>
 8005994:	2304      	movs	r3, #4
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e016      	b.n	80059ca <UART_SetConfig+0x7ae>
 800599c:	2308      	movs	r3, #8
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e012      	b.n	80059ca <UART_SetConfig+0x7ae>
 80059a4:	2310      	movs	r3, #16
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e00e      	b.n	80059ca <UART_SetConfig+0x7ae>
 80059ac:	2320      	movs	r3, #32
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e00a      	b.n	80059ca <UART_SetConfig+0x7ae>
 80059b4:	2340      	movs	r3, #64	@ 0x40
 80059b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ba:	e006      	b.n	80059ca <UART_SetConfig+0x7ae>
 80059bc:	2380      	movs	r3, #128	@ 0x80
 80059be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c2:	e002      	b.n	80059ca <UART_SetConfig+0x7ae>
 80059c4:	2380      	movs	r3, #128	@ 0x80
 80059c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a55      	ldr	r2, [pc, #340]	@ (8005b24 <UART_SetConfig+0x908>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	f040 80f8 	bne.w	8005bc6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059da:	2b20      	cmp	r3, #32
 80059dc:	dc46      	bgt.n	8005a6c <UART_SetConfig+0x850>
 80059de:	2b02      	cmp	r3, #2
 80059e0:	db75      	blt.n	8005ace <UART_SetConfig+0x8b2>
 80059e2:	3b02      	subs	r3, #2
 80059e4:	2b1e      	cmp	r3, #30
 80059e6:	d872      	bhi.n	8005ace <UART_SetConfig+0x8b2>
 80059e8:	a201      	add	r2, pc, #4	@ (adr r2, 80059f0 <UART_SetConfig+0x7d4>)
 80059ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ee:	bf00      	nop
 80059f0:	08005a73 	.word	0x08005a73
 80059f4:	08005acf 	.word	0x08005acf
 80059f8:	08005a7b 	.word	0x08005a7b
 80059fc:	08005acf 	.word	0x08005acf
 8005a00:	08005acf 	.word	0x08005acf
 8005a04:	08005acf 	.word	0x08005acf
 8005a08:	08005a8b 	.word	0x08005a8b
 8005a0c:	08005acf 	.word	0x08005acf
 8005a10:	08005acf 	.word	0x08005acf
 8005a14:	08005acf 	.word	0x08005acf
 8005a18:	08005acf 	.word	0x08005acf
 8005a1c:	08005acf 	.word	0x08005acf
 8005a20:	08005acf 	.word	0x08005acf
 8005a24:	08005acf 	.word	0x08005acf
 8005a28:	08005a9b 	.word	0x08005a9b
 8005a2c:	08005acf 	.word	0x08005acf
 8005a30:	08005acf 	.word	0x08005acf
 8005a34:	08005acf 	.word	0x08005acf
 8005a38:	08005acf 	.word	0x08005acf
 8005a3c:	08005acf 	.word	0x08005acf
 8005a40:	08005acf 	.word	0x08005acf
 8005a44:	08005acf 	.word	0x08005acf
 8005a48:	08005acf 	.word	0x08005acf
 8005a4c:	08005acf 	.word	0x08005acf
 8005a50:	08005acf 	.word	0x08005acf
 8005a54:	08005acf 	.word	0x08005acf
 8005a58:	08005acf 	.word	0x08005acf
 8005a5c:	08005acf 	.word	0x08005acf
 8005a60:	08005acf 	.word	0x08005acf
 8005a64:	08005acf 	.word	0x08005acf
 8005a68:	08005ac1 	.word	0x08005ac1
 8005a6c:	2b40      	cmp	r3, #64	@ 0x40
 8005a6e:	d02a      	beq.n	8005ac6 <UART_SetConfig+0x8aa>
 8005a70:	e02d      	b.n	8005ace <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005a72:	f7fe fed3 	bl	800481c <HAL_RCCEx_GetD3PCLK1Freq>
 8005a76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a78:	e02f      	b.n	8005ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fee2 	bl	8004848 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a88:	e027      	b.n	8005ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a8a:	f107 0318 	add.w	r3, r7, #24
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff f82e 	bl	8004af0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a98:	e01f      	b.n	8005ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a9a:	4b21      	ldr	r3, [pc, #132]	@ (8005b20 <UART_SetConfig+0x904>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b20 <UART_SetConfig+0x904>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	08db      	lsrs	r3, r3, #3
 8005aac:	f003 0303 	and.w	r3, r3, #3
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b28 <UART_SetConfig+0x90c>)
 8005ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ab8:	e00f      	b.n	8005ada <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005aba:	4b1b      	ldr	r3, [pc, #108]	@ (8005b28 <UART_SetConfig+0x90c>)
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abe:	e00c      	b.n	8005ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b2c <UART_SetConfig+0x910>)
 8005ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac4:	e009      	b.n	8005ada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005acc:	e005      	b.n	8005ada <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 81ee 	beq.w	8005ebe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae6:	4a12      	ldr	r2, [pc, #72]	@ (8005b30 <UART_SetConfig+0x914>)
 8005ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aec:	461a      	mov	r2, r3
 8005aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005af4:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	005b      	lsls	r3, r3, #1
 8005afe:	4413      	add	r3, r2
 8005b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d305      	bcc.n	8005b12 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d910      	bls.n	8005b34 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b18:	e1d1      	b.n	8005ebe <UART_SetConfig+0xca2>
 8005b1a:	bf00      	nop
 8005b1c:	40011c00 	.word	0x40011c00
 8005b20:	58024400 	.word	0x58024400
 8005b24:	58000c00 	.word	0x58000c00
 8005b28:	03d09000 	.word	0x03d09000
 8005b2c:	003d0900 	.word	0x003d0900
 8005b30:	080065d0 	.word	0x080065d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b36:	2200      	movs	r2, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	60fa      	str	r2, [r7, #12]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	4ac0      	ldr	r2, [pc, #768]	@ (8005e44 <UART_SetConfig+0xc28>)
 8005b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2200      	movs	r2, #0
 8005b4a:	603b      	str	r3, [r7, #0]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b56:	f7fa fbd9 	bl	800030c <__aeabi_uldivmod>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4610      	mov	r0, r2
 8005b60:	4619      	mov	r1, r3
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	020b      	lsls	r3, r1, #8
 8005b6c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b70:	0202      	lsls	r2, r0, #8
 8005b72:	6979      	ldr	r1, [r7, #20]
 8005b74:	6849      	ldr	r1, [r1, #4]
 8005b76:	0849      	lsrs	r1, r1, #1
 8005b78:	2000      	movs	r0, #0
 8005b7a:	460c      	mov	r4, r1
 8005b7c:	4605      	mov	r5, r0
 8005b7e:	eb12 0804 	adds.w	r8, r2, r4
 8005b82:	eb43 0905 	adc.w	r9, r3, r5
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	469a      	mov	sl, r3
 8005b8e:	4693      	mov	fp, r2
 8005b90:	4652      	mov	r2, sl
 8005b92:	465b      	mov	r3, fp
 8005b94:	4640      	mov	r0, r8
 8005b96:	4649      	mov	r1, r9
 8005b98:	f7fa fbb8 	bl	800030c <__aeabi_uldivmod>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005baa:	d308      	bcc.n	8005bbe <UART_SetConfig+0x9a2>
 8005bac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bb2:	d204      	bcs.n	8005bbe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bba:	60da      	str	r2, [r3, #12]
 8005bbc:	e17f      	b.n	8005ebe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005bc4:	e17b      	b.n	8005ebe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bce:	f040 80bd 	bne.w	8005d4c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8005bd2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	dc48      	bgt.n	8005c6c <UART_SetConfig+0xa50>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	db7b      	blt.n	8005cd6 <UART_SetConfig+0xaba>
 8005bde:	2b20      	cmp	r3, #32
 8005be0:	d879      	bhi.n	8005cd6 <UART_SetConfig+0xaba>
 8005be2:	a201      	add	r2, pc, #4	@ (adr r2, 8005be8 <UART_SetConfig+0x9cc>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c73 	.word	0x08005c73
 8005bec:	08005c7b 	.word	0x08005c7b
 8005bf0:	08005cd7 	.word	0x08005cd7
 8005bf4:	08005cd7 	.word	0x08005cd7
 8005bf8:	08005c83 	.word	0x08005c83
 8005bfc:	08005cd7 	.word	0x08005cd7
 8005c00:	08005cd7 	.word	0x08005cd7
 8005c04:	08005cd7 	.word	0x08005cd7
 8005c08:	08005c93 	.word	0x08005c93
 8005c0c:	08005cd7 	.word	0x08005cd7
 8005c10:	08005cd7 	.word	0x08005cd7
 8005c14:	08005cd7 	.word	0x08005cd7
 8005c18:	08005cd7 	.word	0x08005cd7
 8005c1c:	08005cd7 	.word	0x08005cd7
 8005c20:	08005cd7 	.word	0x08005cd7
 8005c24:	08005cd7 	.word	0x08005cd7
 8005c28:	08005ca3 	.word	0x08005ca3
 8005c2c:	08005cd7 	.word	0x08005cd7
 8005c30:	08005cd7 	.word	0x08005cd7
 8005c34:	08005cd7 	.word	0x08005cd7
 8005c38:	08005cd7 	.word	0x08005cd7
 8005c3c:	08005cd7 	.word	0x08005cd7
 8005c40:	08005cd7 	.word	0x08005cd7
 8005c44:	08005cd7 	.word	0x08005cd7
 8005c48:	08005cd7 	.word	0x08005cd7
 8005c4c:	08005cd7 	.word	0x08005cd7
 8005c50:	08005cd7 	.word	0x08005cd7
 8005c54:	08005cd7 	.word	0x08005cd7
 8005c58:	08005cd7 	.word	0x08005cd7
 8005c5c:	08005cd7 	.word	0x08005cd7
 8005c60:	08005cd7 	.word	0x08005cd7
 8005c64:	08005cd7 	.word	0x08005cd7
 8005c68:	08005cc9 	.word	0x08005cc9
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	d02e      	beq.n	8005cce <UART_SetConfig+0xab2>
 8005c70:	e031      	b.n	8005cd6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c72:	f7fd fc07 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8005c76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c78:	e033      	b.n	8005ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c7a:	f7fd fc19 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8005c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005c80:	e02f      	b.n	8005ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fe fdde 	bl	8004848 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c90:	e027      	b.n	8005ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c92:	f107 0318 	add.w	r3, r7, #24
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fe ff2a 	bl	8004af0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ca0:	e01f      	b.n	8005ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca2:	4b69      	ldr	r3, [pc, #420]	@ (8005e48 <UART_SetConfig+0xc2c>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005cae:	4b66      	ldr	r3, [pc, #408]	@ (8005e48 <UART_SetConfig+0xc2c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	08db      	lsrs	r3, r3, #3
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	4a64      	ldr	r2, [pc, #400]	@ (8005e4c <UART_SetConfig+0xc30>)
 8005cba:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005cc0:	e00f      	b.n	8005ce2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8005cc2:	4b62      	ldr	r3, [pc, #392]	@ (8005e4c <UART_SetConfig+0xc30>)
 8005cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cc6:	e00c      	b.n	8005ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005cc8:	4b61      	ldr	r3, [pc, #388]	@ (8005e50 <UART_SetConfig+0xc34>)
 8005cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ccc:	e009      	b.n	8005ce2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd4:	e005      	b.n	8005ce2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ce0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 80ea 	beq.w	8005ebe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	4a55      	ldr	r2, [pc, #340]	@ (8005e44 <UART_SetConfig+0xc28>)
 8005cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005cfc:	005a      	lsls	r2, r3, #1
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	441a      	add	r2, r3
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d12:	2b0f      	cmp	r3, #15
 8005d14:	d916      	bls.n	8005d44 <UART_SetConfig+0xb28>
 8005d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d1c:	d212      	bcs.n	8005d44 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	f023 030f 	bic.w	r3, r3, #15
 8005d26:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2a:	085b      	lsrs	r3, r3, #1
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d36:	4313      	orrs	r3, r2
 8005d38:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	e0bc      	b.n	8005ebe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005d4a:	e0b8      	b.n	8005ebe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	dc4b      	bgt.n	8005dec <UART_SetConfig+0xbd0>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f2c0 8087 	blt.w	8005e68 <UART_SetConfig+0xc4c>
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	f200 8084 	bhi.w	8005e68 <UART_SetConfig+0xc4c>
 8005d60:	a201      	add	r2, pc, #4	@ (adr r2, 8005d68 <UART_SetConfig+0xb4c>)
 8005d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d66:	bf00      	nop
 8005d68:	08005df3 	.word	0x08005df3
 8005d6c:	08005dfb 	.word	0x08005dfb
 8005d70:	08005e69 	.word	0x08005e69
 8005d74:	08005e69 	.word	0x08005e69
 8005d78:	08005e03 	.word	0x08005e03
 8005d7c:	08005e69 	.word	0x08005e69
 8005d80:	08005e69 	.word	0x08005e69
 8005d84:	08005e69 	.word	0x08005e69
 8005d88:	08005e13 	.word	0x08005e13
 8005d8c:	08005e69 	.word	0x08005e69
 8005d90:	08005e69 	.word	0x08005e69
 8005d94:	08005e69 	.word	0x08005e69
 8005d98:	08005e69 	.word	0x08005e69
 8005d9c:	08005e69 	.word	0x08005e69
 8005da0:	08005e69 	.word	0x08005e69
 8005da4:	08005e69 	.word	0x08005e69
 8005da8:	08005e23 	.word	0x08005e23
 8005dac:	08005e69 	.word	0x08005e69
 8005db0:	08005e69 	.word	0x08005e69
 8005db4:	08005e69 	.word	0x08005e69
 8005db8:	08005e69 	.word	0x08005e69
 8005dbc:	08005e69 	.word	0x08005e69
 8005dc0:	08005e69 	.word	0x08005e69
 8005dc4:	08005e69 	.word	0x08005e69
 8005dc8:	08005e69 	.word	0x08005e69
 8005dcc:	08005e69 	.word	0x08005e69
 8005dd0:	08005e69 	.word	0x08005e69
 8005dd4:	08005e69 	.word	0x08005e69
 8005dd8:	08005e69 	.word	0x08005e69
 8005ddc:	08005e69 	.word	0x08005e69
 8005de0:	08005e69 	.word	0x08005e69
 8005de4:	08005e69 	.word	0x08005e69
 8005de8:	08005e5b 	.word	0x08005e5b
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d037      	beq.n	8005e60 <UART_SetConfig+0xc44>
 8005df0:	e03a      	b.n	8005e68 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df2:	f7fd fb47 	bl	8003484 <HAL_RCC_GetPCLK1Freq>
 8005df6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005df8:	e03c      	b.n	8005e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dfa:	f7fd fb59 	bl	80034b0 <HAL_RCC_GetPCLK2Freq>
 8005dfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e00:	e038      	b.n	8005e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fe fd1e 	bl	8004848 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e10:	e030      	b.n	8005e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e12:	f107 0318 	add.w	r3, r7, #24
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fe6a 	bl	8004af0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e20:	e028      	b.n	8005e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e22:	4b09      	ldr	r3, [pc, #36]	@ (8005e48 <UART_SetConfig+0xc2c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d012      	beq.n	8005e54 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e2e:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <UART_SetConfig+0xc2c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	08db      	lsrs	r3, r3, #3
 8005e34:	f003 0303 	and.w	r3, r3, #3
 8005e38:	4a04      	ldr	r2, [pc, #16]	@ (8005e4c <UART_SetConfig+0xc30>)
 8005e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e40:	e018      	b.n	8005e74 <UART_SetConfig+0xc58>
 8005e42:	bf00      	nop
 8005e44:	080065d0 	.word	0x080065d0
 8005e48:	58024400 	.word	0x58024400
 8005e4c:	03d09000 	.word	0x03d09000
 8005e50:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8005e54:	4b24      	ldr	r3, [pc, #144]	@ (8005ee8 <UART_SetConfig+0xccc>)
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e58:	e00c      	b.n	8005e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e5a:	4b24      	ldr	r3, [pc, #144]	@ (8005eec <UART_SetConfig+0xcd0>)
 8005e5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e5e:	e009      	b.n	8005e74 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e66:	e005      	b.n	8005e74 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e72:	bf00      	nop
    }

    if (pclk != 0U)
 8005e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d021      	beq.n	8005ebe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <UART_SetConfig+0xcd4>)
 8005e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e88:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	085b      	lsrs	r3, r3, #1
 8005e92:	441a      	add	r2, r3
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e9c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea0:	2b0f      	cmp	r3, #15
 8005ea2:	d909      	bls.n	8005eb8 <UART_SetConfig+0xc9c>
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eaa:	d205      	bcs.n	8005eb8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60da      	str	r2, [r3, #12]
 8005eb6:	e002      	b.n	8005ebe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005eda:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3748      	adds	r7, #72	@ 0x48
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ee8:	03d09000 	.word	0x03d09000
 8005eec:	003d0900 	.word	0x003d0900
 8005ef0:	080065d0 	.word	0x080065d0

08005ef4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f00:	f003 0308 	and.w	r3, r3, #8
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00a      	beq.n	8005f62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f66:	f003 0304 	and.w	r3, r3, #4
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f88:	f003 0310 	and.w	r3, r3, #16
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00a      	beq.n	8005fa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d00a      	beq.n	8005fc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01a      	beq.n	800600a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ff2:	d10a      	bne.n	800600a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	605a      	str	r2, [r3, #4]
  }
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b098      	sub	sp, #96	@ 0x60
 800603c:	af02      	add	r7, sp, #8
 800603e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006048:	f7fb fa56 	bl	80014f8 <HAL_GetTick>
 800604c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b08      	cmp	r3, #8
 800605a:	d12f      	bne.n	80060bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800605c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006064:	2200      	movs	r2, #0
 8006066:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f88e 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d022      	beq.n	80060bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800608a:	653b      	str	r3, [r7, #80]	@ 0x50
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006094:	647b      	str	r3, [r7, #68]	@ 0x44
 8006096:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800609a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e6      	bne.n	8006076 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e063      	b.n	8006184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d149      	bne.n	800615e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d2:	2200      	movs	r2, #0
 80060d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f857 	bl	800618c <UART_WaitOnFlagUntilTimeout>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d03c      	beq.n	800615e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	623b      	str	r3, [r7, #32]
   return(result);
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006102:	633b      	str	r3, [r7, #48]	@ 0x30
 8006104:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e6      	bne.n	80060e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3308      	adds	r3, #8
 800611c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	60fb      	str	r3, [r7, #12]
   return(result);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3308      	adds	r3, #8
 8006134:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006136:	61fa      	str	r2, [r7, #28]
 8006138:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613a:	69b9      	ldr	r1, [r7, #24]
 800613c:	69fa      	ldr	r2, [r7, #28]
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	617b      	str	r3, [r7, #20]
   return(result);
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1e5      	bne.n	8006116 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e012      	b.n	8006184 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3758      	adds	r7, #88	@ 0x58
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	603b      	str	r3, [r7, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800619c:	e04f      	b.n	800623e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061a4:	d04b      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fb f9a7 	bl	80014f8 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <UART_WaitOnFlagUntilTimeout+0x30>
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061bc:	2303      	movs	r3, #3
 80061be:	e04e      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0304 	and.w	r3, r3, #4
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d037      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b80      	cmp	r3, #128	@ 0x80
 80061d2:	d034      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb2>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	2b40      	cmp	r3, #64	@ 0x40
 80061d8:	d031      	beq.n	800623e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	f003 0308 	and.w	r3, r3, #8
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d110      	bne.n	800620a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2208      	movs	r2, #8
 80061ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f839 	bl	8006268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2208      	movs	r2, #8
 80061fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e029      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006214:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006218:	d111      	bne.n	800623e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f81f 	bl	8006268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00f      	b.n	800625e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69da      	ldr	r2, [r3, #28]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4013      	ands	r3, r2
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	429a      	cmp	r2, r3
 800624c:	bf0c      	ite	eq
 800624e:	2301      	moveq	r3, #1
 8006250:	2300      	movne	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	461a      	mov	r2, r3
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	429a      	cmp	r2, r3
 800625a:	d0a0      	beq.n	800619e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006268:	b480      	push	{r7}
 800626a:	b095      	sub	sp, #84	@ 0x54
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006284:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800628e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006290:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006292:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006294:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e6      	bne.n	8006270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3308      	adds	r3, #8
 80062a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006330 <UART_EndRxTransfer+0xc8>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	3308      	adds	r3, #8
 80062c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062ca:	e841 2300 	strex	r3, r2, [r1]
 80062ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1e5      	bne.n	80062a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d118      	bne.n	8006310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f023 0310 	bic.w	r3, r3, #16
 80062f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	6979      	ldr	r1, [r7, #20]
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	e841 2300 	strex	r3, r2, [r1]
 8006308:	613b      	str	r3, [r7, #16]
   return(result);
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1e6      	bne.n	80062de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006324:	bf00      	nop
 8006326:	3754      	adds	r7, #84	@ 0x54
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	effffffe 	.word	0xeffffffe

08006334 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006342:	2b01      	cmp	r3, #1
 8006344:	d101      	bne.n	800634a <HAL_UARTEx_DisableFifoMode+0x16>
 8006346:	2302      	movs	r3, #2
 8006348:	e027      	b.n	800639a <HAL_UARTEx_DisableFifoMode+0x66>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2224      	movs	r2, #36	@ 0x24
 8006356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006378:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e02d      	b.n	800641a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2224      	movs	r2, #36	@ 0x24
 80063ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	683a      	ldr	r2, [r7, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f850 	bl	80064a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}

08006422 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006436:	2302      	movs	r3, #2
 8006438:	e02d      	b.n	8006496 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2224      	movs	r2, #36	@ 0x24
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f022 0201 	bic.w	r2, r2, #1
 8006460:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f812 	bl	80064a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
	...

080064a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d108      	bne.n	80064c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064c0:	e031      	b.n	8006526 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064c2:	2310      	movs	r3, #16
 80064c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064c6:	2310      	movs	r3, #16
 80064c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	0e5b      	lsrs	r3, r3, #25
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	0f5b      	lsrs	r3, r3, #29
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	7b3a      	ldrb	r2, [r7, #12]
 80064ee:	4911      	ldr	r1, [pc, #68]	@ (8006534 <UARTEx_SetNbDataToProcess+0x94>)
 80064f0:	5c8a      	ldrb	r2, [r1, r2]
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80064f6:	7b3a      	ldrb	r2, [r7, #12]
 80064f8:	490f      	ldr	r1, [pc, #60]	@ (8006538 <UARTEx_SetNbDataToProcess+0x98>)
 80064fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006500:	b29a      	uxth	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	7b7a      	ldrb	r2, [r7, #13]
 800650c:	4909      	ldr	r1, [pc, #36]	@ (8006534 <UARTEx_SetNbDataToProcess+0x94>)
 800650e:	5c8a      	ldrb	r2, [r1, r2]
 8006510:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006514:	7b7a      	ldrb	r2, [r7, #13]
 8006516:	4908      	ldr	r1, [pc, #32]	@ (8006538 <UARTEx_SetNbDataToProcess+0x98>)
 8006518:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800651a:	fb93 f3f2 	sdiv	r3, r3, r2
 800651e:	b29a      	uxth	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	080065e8 	.word	0x080065e8
 8006538:	080065f0 	.word	0x080065f0

0800653c <memset>:
 800653c:	4402      	add	r2, r0
 800653e:	4603      	mov	r3, r0
 8006540:	4293      	cmp	r3, r2
 8006542:	d100      	bne.n	8006546 <memset+0xa>
 8006544:	4770      	bx	lr
 8006546:	f803 1b01 	strb.w	r1, [r3], #1
 800654a:	e7f9      	b.n	8006540 <memset+0x4>

0800654c <__libc_init_array>:
 800654c:	b570      	push	{r4, r5, r6, lr}
 800654e:	4d0d      	ldr	r5, [pc, #52]	@ (8006584 <__libc_init_array+0x38>)
 8006550:	4c0d      	ldr	r4, [pc, #52]	@ (8006588 <__libc_init_array+0x3c>)
 8006552:	1b64      	subs	r4, r4, r5
 8006554:	10a4      	asrs	r4, r4, #2
 8006556:	2600      	movs	r6, #0
 8006558:	42a6      	cmp	r6, r4
 800655a:	d109      	bne.n	8006570 <__libc_init_array+0x24>
 800655c:	4d0b      	ldr	r5, [pc, #44]	@ (800658c <__libc_init_array+0x40>)
 800655e:	4c0c      	ldr	r4, [pc, #48]	@ (8006590 <__libc_init_array+0x44>)
 8006560:	f000 f818 	bl	8006594 <_init>
 8006564:	1b64      	subs	r4, r4, r5
 8006566:	10a4      	asrs	r4, r4, #2
 8006568:	2600      	movs	r6, #0
 800656a:	42a6      	cmp	r6, r4
 800656c:	d105      	bne.n	800657a <__libc_init_array+0x2e>
 800656e:	bd70      	pop	{r4, r5, r6, pc}
 8006570:	f855 3b04 	ldr.w	r3, [r5], #4
 8006574:	4798      	blx	r3
 8006576:	3601      	adds	r6, #1
 8006578:	e7ee      	b.n	8006558 <__libc_init_array+0xc>
 800657a:	f855 3b04 	ldr.w	r3, [r5], #4
 800657e:	4798      	blx	r3
 8006580:	3601      	adds	r6, #1
 8006582:	e7f2      	b.n	800656a <__libc_init_array+0x1e>
 8006584:	08006600 	.word	0x08006600
 8006588:	08006600 	.word	0x08006600
 800658c:	08006600 	.word	0x08006600
 8006590:	08006604 	.word	0x08006604

08006594 <_init>:
 8006594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006596:	bf00      	nop
 8006598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659a:	bc08      	pop	{r3}
 800659c:	469e      	mov	lr, r3
 800659e:	4770      	bx	lr

080065a0 <_fini>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	bf00      	nop
 80065a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a6:	bc08      	pop	{r3}
 80065a8:	469e      	mov	lr, r3
 80065aa:	4770      	bx	lr
